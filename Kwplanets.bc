#    Copyright (C) 2020 by Kevin D. Woerner
##-# =KDW= ########## DO NOT EDIT -- AUTOGENERATED CODE #########
##-# =KDW= ############ BUILDER $KWROOT/0lib/vkkcp.sh ###########
##-# =KDW= ##### SRC $KWROOT/codekdw/kw-lib/Kwplanets.fwipp #####
# 2020-08-31 kdw  For Changelog,See File Kwplanets.varylog
true = 1;
false = 0;
#IMPORT "Kw";
#IMPORT "Kwelements";
cxearthsiderealday = day / 1.002737909350795;
cxearthstellarday = day / 1.00273781191135448;
cxearthtropicalyear = 365.242190402 * day;
cxearthsiderealyear = 365.256363004 * day;
cxearthanomalisticyear = 365.259636 * day;
cxsiderealyear = cxearthsiderealyear;
cxanomalisticyear = cxearthanomalisticyear;
cxtropicalyear = cxearthtropicalyear;
cxstellarday = cxearthstellarday;
cxsiderealday = cxearthsiderealday;
cxsungmnasa = (1.32712440018 * 10^20) * unitgm;
cxsungmiers = (1.32712442099 * 10^20) * unitgm;
cxsungm = cxsungmnasa;
cxsunyear = 0.0 * day;
cxsunday = 24.47 * day;
cxsunflatness = (9.0 * 10^-6);
cxsun_a = (6.957 * 10^8) * meter;
cxsun_c = cxsun_a;
cxsun_b = cxsun_a * (1.0 - cxsunflatness);
cxsunradius = 0.333333333333333 * (cxsun_a + cxsun_b + cxsun_c);
cxsunescape = sqrt(2 * cxsungm / cxsunradius);
cxsunoblateness = sqrt(cxsunflatness * (2.0 - cxsunflatness));
cxsungravity = cxsungm / (cxsunradius * cxsunradius);
cxsunmass = cxsungm / gravitation;
cxsunvolume = 2.0 * tau / 3.0 * cxsunradius * cxsunradius *\
      cxsunradius;
cxsundensity = cxsunmass / cxsunvolume;
cxmercurygm = (2.2032 * 10^13) * unitgm;
cxmercuryyear = 87.9691 * day;
cxmercuryday = 58.6462 * day;
cxmercuryflatness = 0.0;
cxmercury_a = (2.4397 * 10^6) * meter;
cxmercury_c = cxmercury_a;
cxmercury_b = cxmercury_a * (1.0 - cxmercuryflatness);
cxmercuryradius = 0.333333333333333 * (cxmercury_a +\
      cxmercury_b + cxmercury_c);
cxmercuryescape = sqrt(2 * cxmercurygm / cxmercuryradius);
cxmercuryoblateness = sqrt(cxmercuryflatness * (2.0 -\
      cxmercuryflatness));
cxmercurygravity = cxmercurygm / (cxmercuryradius *\
      cxmercuryradius);
cxmercurymass = cxmercurygm / gravitation;
cxmercuryvolume = 2.0 * tau / 3.0 * cxmercuryradius *\
      cxmercuryradius * cxmercuryradius;
cxmercurydensity = cxmercurymass / cxmercuryvolume;
cxvenusgm = (3.24859 * 10^14) * unitgm;
cxvenusyear = 224.701 * day;
cxvenusday = -243.018 * day;
cxvenusflatness = 0.0;
cxvenus_a = (6.0518 * 10^6) * meter;
cxvenus_c = cxvenus_a;
cxvenus_b = cxvenus_a * (1.0 - cxvenusflatness);
cxvenusradius = 0.333333333333333 * (cxvenus_a + cxvenus_b +\
      cxvenus_c);
cxvenusescape = sqrt(2 * cxvenusgm / cxvenusradius);
cxvenusoblateness = sqrt(cxvenusflatness * (2.0 -\
      cxvenusflatness));
cxvenusgravity = cxvenusgm / (cxvenusradius * cxvenusradius);
cxvenusmass = cxvenusgm / gravitation;
cxvenusvolume = 2.0 * tau / 3.0 * cxvenusradius *\
      cxvenusradius * cxvenusradius;
cxvenusdensity = cxvenusmass / cxvenusvolume;
cxearthgm = (3.986004418 * 10^14) * unitgm;
cxearthyear = cxearthsiderealyear;
cxearthday = cxearthstellarday;
cxearthflatness = 1.0 / 298.257223563;
cxearth_a = (6.378137 * 10^6) * meter;
cxearth_c = cxearth_a;
cxearth_b = cxearth_a * (1.0 - cxearthflatness);
cxearthradius = 0.333333333333333 * (cxearth_a + cxearth_b +\
      cxearth_c);
cxearthescape = sqrt(2 * cxearthgm / cxearthradius);
cxearthoblateness = sqrt(cxearthflatness * (2.0 -\
      cxearthflatness));
cxearthgravity = cxearthgm / (cxearthradius * cxearthradius);
cxearthmass = cxearthgm / gravitation;
cxearthvolume = 2.0 * tau / 3.0 * cxearthradius *\
      cxearthradius * cxearthradius;
cxearthdensity = cxearthmass / cxearthvolume;
cxearthprecession = 50.28792 * arcsec / jyear;
cxearththeta_0 = 0.7790572732640 * turn;
cxmarsgm = (4.282837 * 10^13) * unitgm;
cxmarsyear = 686.971 * day;
cxmarsday = 1.02595676 * day;
cxmarsflatness = 1.0 / 169.81;
cxmars_a = (3.3962 * 10^6) * meter;
cxmars_c = cxmars_a;
cxmars_b = cxmars_a * (1.0 - cxmarsflatness);
cxmarsradius = 0.333333333333333 * (cxmars_a + cxmars_b +\
      cxmars_c);
cxmarsescape = sqrt(2 * cxmarsgm / cxmarsradius);
cxmarsoblateness = sqrt(cxmarsflatness * (2.0 - cxmarsflatness));
cxmarsgravity = cxmarsgm / (cxmarsradius * cxmarsradius);
cxmarsmass = cxmarsgm / gravitation;
cxmarsvolume = 2.0 * tau / 3.0 * cxmarsradius * cxmarsradius\
      * cxmarsradius;
cxmarsdensity = cxmarsmass / cxmarsvolume;
cxjupitergm = (1.26686534 * 10^17) * unitgm;
cxjupiteryear = 4332.59 * day;
cxjupiterday = 0.41354 * day;
cxjupiterflatness = 1.0 / 15.4144028;
cxjupiter_a = (7.1492 * 10^7) * meter;
cxjupiter_c = cxjupiter_a;
cxjupiter_b = cxjupiter_a * (1.0 - cxjupiterflatness);
cxjupiterradius = 0.333333333333333 * (cxjupiter_a +\
      cxjupiter_b + cxjupiter_c);
cxjupiterescape = sqrt(2 * cxjupitergm / cxjupiterradius);
cxjupiteroblateness = sqrt(cxjupiterflatness * (2.0 -\
      cxjupiterflatness));
cxjupitergravity = cxjupitergm / (cxjupiterradius *\
      cxjupiterradius);
cxjupitermass = cxjupitergm / gravitation;
cxjupitervolume = 2.0 * tau / 3.0 * cxjupiterradius *\
      cxjupiterradius * cxjupiterradius;
cxjupiterdensity = cxjupitermass / cxjupitervolume;
cxsaturngm = (3.7931187 * 10^16) * unitgm;
cxsaturnyear = 10759.22 * day;
cxsaturnday = 0.44401 * day;
cxsaturnflatness = 1.0 / 10.208;
cxsaturn_a = (6.0268 * 10^7) * meter;
cxsaturn_c = cxsaturn_a;
cxsaturn_b = cxsaturn_a * (1.0 - cxsaturnflatness);
cxsaturnradius = 0.333333333333333 * (cxsaturn_a + cxsaturn_b\
      + cxsaturn_c);
cxsaturnescape = sqrt(2 * cxsaturngm / cxsaturnradius);
cxsaturnoblateness = sqrt(cxsaturnflatness * (2.0 -\
      cxsaturnflatness));
cxsaturngravity = cxsaturngm / (cxsaturnradius * cxsaturnradius);
cxsaturnmass = cxsaturngm / gravitation;
cxsaturnvolume = 2.0 * tau / 3.0 * cxsaturnradius *\
      cxsaturnradius * cxsaturnradius;
cxsaturndensity = cxsaturnmass / cxsaturnvolume;
cxuranusgm = (5.793939 * 10^15) * unitgm;
cxuranusyear = 30688.5 * day;
cxuranusday = -0.71833 * day;
cxuranusflatness = 1.0 / 43.61604;
cxuranus_a = (2.5559 * 10^7) * meter;
cxuranus_c = cxuranus_a;
cxuranus_b = cxuranus_a * (1.0 - cxuranusflatness);
cxuranusradius = 0.333333333333333 * (cxuranus_a + cxuranus_b\
      + cxuranus_c);
cxuranusescape = sqrt(2 * cxuranusgm / cxuranusradius);
cxuranusoblateness = sqrt(cxuranusflatness * (2.0 -\
      cxuranusflatness));
cxuranusgravity = cxuranusgm / (cxuranusradius * cxuranusradius);
cxuranusmass = cxuranusgm / gravitation;
cxuranusvolume = 2.0 * tau / 3.0 * cxuranusradius *\
      cxuranusradius * cxuranusradius;
cxuranusdensity = cxuranusmass / cxuranusvolume;
cxneptunegm = (6.836529 * 10^15) * unitgm;
cxneptuneyear = (6.0182 * 10^4) * day;
cxneptuneday = 0.67125 * day;
cxneptuneflatness = 1.0 / 58.54373;
cxneptune_a = (2.4764 * 10^7) * meter;
cxneptune_c = cxneptune_a;
cxneptune_b = cxneptune_a * (1.0 - cxneptuneflatness);
cxneptuneradius = 0.333333333333333 * (cxneptune_a +\
      cxneptune_b + cxneptune_c);
cxneptuneescape = sqrt(2 * cxneptunegm / cxneptuneradius);
cxneptuneoblateness = sqrt(cxneptuneflatness * (2.0 -\
      cxneptuneflatness));
cxneptunegravity = cxneptunegm / (cxneptuneradius *\
      cxneptuneradius);
cxneptunemass = cxneptunegm / gravitation;
cxneptunevolume = 2.0 * tau / 3.0 * cxneptuneradius *\
      cxneptuneradius * cxneptuneradius;
cxneptunedensity = cxneptunemass / cxneptunevolume;
cxplutogm = (8.71 * 10^11) * unitgm;
cxplutoyear = (9.056 * 10^4) * day;
cxplutoday = 6.38723 * day;
cxplutoflatness = 0.0;
cxpluto_a = (1.1899 * 10^6) * meter;
cxpluto_c = cxpluto_a;
cxpluto_b = cxpluto_a * (1.0 - cxplutoflatness);
cxplutoradius = 0.333333333333333 * (cxpluto_a + cxpluto_b +\
      cxpluto_c);
cxplutoescape = sqrt(2 * cxplutogm / cxplutoradius);
cxplutooblateness = sqrt(cxplutoflatness * (2.0 -\
      cxplutoflatness));
cxplutogravity = cxplutogm / (cxplutoradius * cxplutoradius);
cxplutomass = cxplutogm / gravitation;
cxplutovolume = 2.0 * tau / 3.0 * cxplutoradius *\
      cxplutoradius * cxplutoradius;
cxplutodensity = cxplutomass / cxplutovolume;
cxmoongm = (4.9048695 * 10^12) * unitgm;
cxmoonyear = 27.32166155 * day;
cxmoonday = 27.321661 * day;
cxmoonflatness = 1.0 / 827.667;
cxmoon_a = (1.7381 * 10^6) * meter;
cxmoon_c = cxmoon_a;
cxmoon_b = cxmoon_a * (1.0 - cxmoonflatness);
cxmoonradius = 0.333333333333333 * (cxmoon_a + cxmoon_b +\
      cxmoon_c);
cxmoonescape = sqrt(2 * cxmoongm / cxmoonradius);
cxmoonoblateness = sqrt(cxmoonflatness * (2.0 - cxmoonflatness));
cxmoongravity = cxmoongm / (cxmoonradius * cxmoonradius);
cxmoonmass = cxmoongm / gravitation;
cxmoonvolume = 2.0 * tau / 3.0 * cxmoonradius * cxmoonradius\
      * cxmoonradius;
cxmoondensity = cxmoonmass / cxmoonvolume;
cxmoonorbit = (3.843999 * 10^8) * meter;
cxmooneccentricity = 0.0549;
cxmooninclination = 5.415 * arcdeg;
cxceresgm = (6.26325 * 10^10) * unitgm;
cxceresyear = 1681.63 * day;
cxceresday = 9.074170 * hour;
cxceresflatness = 1.0 / 13.0432;
cxceres_a = (4.826 * 10^5) * meter;
cxceres_c = (4.806 * 10^5) * meter;
cxceres_b = cxceres_a * (1.0 - cxceresflatness);
cxceresradius = 0.333333333333333 * (cxceres_a + cxceres_b +\
      cxceres_c);
cxceresescape = sqrt(2 * cxceresgm / cxceresradius);
cxceresoblateness = sqrt(cxceresflatness * (2.0 -\
      cxceresflatness));
cxceresgravity = cxceresgm / (cxceresradius * cxceresradius);
cxceresmass = cxceresgm / gravitation;
cxceresvolume = 2.0 * tau / 3.0 * cxceresradius *\
      cxceresradius * cxceresradius;
cxceresdensity = cxceresmass / cxceresvolume;
cxerisgm = (1.108 * 10^12) * unitgm;
cxerisyear = (2.0383 * 10^5) * day;
cxerisday = 25.9 * hour;
cxerisflatness = 0.0;
cxeris_a = (1.163 * 10^6) * meter;
cxeris_c = cxeris_a;
cxeris_b = cxeris_a * (1.0 - cxerisflatness);
cxerisradius = 0.333333333333333 * (cxeris_a + cxeris_b +\
      cxeris_c);
cxerisescape = sqrt(2 * cxerisgm / cxerisradius);
cxerisoblateness = sqrt(cxerisflatness * (2.0 - cxerisflatness));
cxerisgravity = cxerisgm / (cxerisradius * cxerisradius);
cxerismass = cxerisgm / gravitation;
cxerisvolume = 2.0 * tau / 3.0 * cxerisradius * cxerisradius\
      * cxerisradius;
cxerisdensity = cxerismass / cxerisvolume;
cxmakemakegm = (2.9366 * 10^11) * unitgm;
cxmakemakeyear = (1.12897 * 10^5) * day;
cxmakemakeday = 7.771 * hour;
cxmakemakeflatness = 1.0 / 30.7917;
cxmakemake_a = (7.39 * 10^5) * meter;
cxmakemake_c = cxmakemake_a;
cxmakemake_b = cxmakemake_a * (1.0 - cxmakemakeflatness);
cxmakemakeradius = 0.333333333333333 * (cxmakemake_a +\
      cxmakemake_b + cxmakemake_c);
cxmakemakeescape = sqrt(2 * cxmakemakegm / cxmakemakeradius);
cxmakemakeoblateness = sqrt(cxmakemakeflatness * (2.0 -\
      cxmakemakeflatness));
cxmakemakegravity = cxmakemakegm / (cxmakemakeradius *\
      cxmakemakeradius);
cxmakemakemass = cxmakemakegm / gravitation;
cxmakemakevolume = 2.0 * tau / 3.0 * cxmakemakeradius *\
      cxmakemakeradius * cxmakemakeradius;
cxmakemakedensity = cxmakemakemass / cxmakemakevolume;
cxhaumeagm = (2.674 * 10^11) * unitgm;
cxhaumeayear = (1.03774 * 10^5) * day;
cxhaumeaday = 3.9155 * hour;
cxhaumeaflatness = 1.0 / 1.96115;
cxhaumea_a = (1.161 * 10^6) * meter;
cxhaumea_c = (8.52 * 10^5) * meter;
cxhaumea_b = cxhaumea_a * (1.0 - cxhaumeaflatness);
cxhaumearadius = 0.333333333333333 * (cxhaumea_a + cxhaumea_b\
      + cxhaumea_c);
cxhaumeaescape = sqrt(2 * cxhaumeagm / cxhaumearadius);
cxhaumeaoblateness = sqrt(cxhaumeaflatness * (2.0 -\
      cxhaumeaflatness));
cxhaumeagravity = cxhaumeagm / (cxhaumearadius * cxhaumearadius);
cxhaumeamass = cxhaumeagm / gravitation;
cxhaumeavolume = 2.0 * tau / 3.0 * cxhaumearadius *\
      cxhaumearadius * cxhaumearadius;
cxhaumeadensity = cxhaumeamass / cxhaumeavolume;
cxsunorbit = 0.0 * au;
cxsuneccentricity = 0.0;
cxsuninclination = 0.0 * arcdeg;
cxsunlongitude = 0.0 * arcdeg;
cxsunperiapsis = 0.0 * arcdeg;
cxsunascending = 0.0 * arcdeg;
cxsunorbit_dt = 0.0 * au / jc;
cxsuneccentricity_dt = 0.0 / jc;
cxsuninclination_dt = 0.0 * arcdeg / jc;
cxsunlongitude_dt = 0.0 * arcdeg / jc;
cxsunperiapsis_dt = 0.0 * arcdeg / jc;
cxsunascending_dt = 0.0 * arcdeg / jc;
cxearthorbit = 1.00000261 * au;
cxeartheccentricity = 0.01671123;
cxearthinclination = 359.99998469 * arcdeg;
cxearthlongitude = 100.46457166 * arcdeg;
cxearthperiapsis = 102.93768193 * arcdeg;
cxearthascending = 0.0 * arcdeg;
cxearthorbit_dt = 0.00000562 * au / jc;
cxeartheccentricity_dt = -0.00004392 / jc;
cxearthinclination_dt = -0.01294668 * arcdeg / jc;
cxearthlongitude_dt = 35999.37244981 * arcdeg / jc;
cxearthperiapsis_dt = 0.32327364 * arcdeg / jc;
cxearthascending_dt = 0.0 * arcdeg / jc;
cxmercuryorbit = 0.38709927 * au;
cxmercuryeccentricity = 0.20563593;
cxmercuryinclination = 7.00497902 * arcdeg;
cxmercurylongitude = 252.25032350 * arcdeg;
cxmercuryperiapsis = 77.45779628 * arcdeg;
cxmercuryascending = 48.33076593 * arcdeg;
cxmercuryorbit_dt = 0.00000037 * au / jc;
cxmercuryeccentricity_dt = 0.00001906 / jc;
cxmercuryinclination_dt = -0.00594749 * arcdeg / jc;
cxmercurylongitude_dt = 149472.67411175 * arcdeg / jc;
cxmercuryperiapsis_dt = 0.16047689 * arcdeg / jc;
cxmercuryascending_dt = -0.12534081 * arcdeg / jc;
cxvenusorbit = 0.72333566 * au;
cxvenuseccentricity = 0.00677672;
cxvenusinclination = 3.39467605 * arcdeg;
cxvenuslongitude = 181.97909950 * arcdeg;
cxvenusperiapsis = 131.60246718 * arcdeg;
cxvenusascending = 76.67984255 * arcdeg;
cxvenusorbit_dt = 0.00000390 * au / jc;
cxvenuseccentricity_dt = -0.00004107 / jc;
cxvenusinclination_dt = -0.00078890 * arcdeg / jc;
cxvenuslongitude_dt = 58517.81538729 * arcdeg / jc;
cxvenusperiapsis_dt = 0.00268329 * arcdeg / jc;
cxvenusascending_dt = -0.27769418 * arcdeg / jc;
cxmarsorbit = 1.52371034 * au;
cxmarseccentricity = 0.09339410;
cxmarsinclination = 1.84969142 * arcdeg;
cxmarslongitude = 355.44656795 * arcdeg;
cxmarsperiapsis = 336.05637041 * arcdeg;
cxmarsascending = 49.55953891 * arcdeg;
cxmarsorbit_dt = 0.00001847 * au / jc;
cxmarseccentricity_dt = 0.00007882 / jc;
cxmarsinclination_dt = -0.00813131 * arcdeg / jc;
cxmarslongitude_dt = 19140.30268499 * arcdeg / jc;
cxmarsperiapsis_dt = 0.44441088 * arcdeg / jc;
cxmarsascending_dt = -0.29257343 * arcdeg / jc;
cxjupiterorbit = 5.20288700 * au;
cxjupitereccentricity = 0.04838624;
cxjupiterinclination = 1.30439695 * arcdeg;
cxjupiterlongitude = 34.39644051 * arcdeg;
cxjupiterperiapsis = 14.72847983 * arcdeg;
cxjupiterascending = 100.47390909 * arcdeg;
cxjupiterorbit_dt = -0.00011607 * au / jc;
cxjupitereccentricity_dt = -0.00013253 / jc;
cxjupiterinclination_dt = -0.00183714 * arcdeg / jc;
cxjupiterlongitude_dt = 3034.74612775 * arcdeg / jc;
cxjupiterperiapsis_dt = 0.21252668 * arcdeg / jc;
cxjupiterascending_dt = 0.20469106 * arcdeg / jc;
cxsaturnorbit = 9.53667594 * au;
cxsaturneccentricity = 0.05386179;
cxsaturninclination = 2.48599187 * arcdeg;
cxsaturnlongitude = 49.95424423 * arcdeg;
cxsaturnperiapsis = 92.59887831 * arcdeg;
cxsaturnascending = 113.66242448 * arcdeg;
cxsaturnorbit_dt = -0.00125060 * au / jc;
cxsaturneccentricity_dt = -0.00050991 / jc;
cxsaturninclination_dt = 0.00193609 * arcdeg / jc;
cxsaturnlongitude_dt = 1222.49362201 * arcdeg / jc;
cxsaturnperiapsis_dt = -0.41897216 * arcdeg / jc;
cxsaturnascending_dt = -0.28867794 * arcdeg / jc;
cxuranusorbit = 19.18916464 * au;
cxuranuseccentricity = 0.04725744;
cxuranusinclination = 0.77263783 * arcdeg;
cxuranuslongitude = 313.23810451 * arcdeg;
cxuranusperiapsis = 170.95427630 * arcdeg;
cxuranusascending = 74.01692503 * arcdeg;
cxuranusorbit_dt = -0.00196176 * au / jc;
cxuranuseccentricity_dt = -0.00004397 / jc;
cxuranusinclination_dt = -0.00242939 * arcdeg / jc;
cxuranuslongitude_dt = 428.48202785 * arcdeg / jc;
cxuranusperiapsis_dt = 0.40805281 * arcdeg / jc;
cxuranusascending_dt = 0.04240589 * arcdeg / jc;
cxneptuneorbit = 30.06992276 * au;
cxneptuneeccentricity = 0.00859048;
cxneptuneinclination = 1.77004347 * arcdeg;
cxneptunelongitude = 304.87997031 * arcdeg;
cxneptuneperiapsis = 44.96476227 * arcdeg;
cxneptuneascending = 131.78422574 * arcdeg;
cxneptuneorbit_dt = 0.00026291 * au / jc;
cxneptuneeccentricity_dt = 0.00005105 / jc;
cxneptuneinclination_dt = 0.00035372 * arcdeg / jc;
cxneptunelongitude_dt = 218.45945325 * arcdeg / jc;
cxneptuneperiapsis_dt = -0.32241464 * arcdeg / jc;
cxneptuneascending_dt = -0.00508664 * arcdeg / jc;
cxplutoorbit = 39.48211675 * au;
cxplutoeccentricity = 0.24882730;
cxplutoinclination = 17.14001206 * arcdeg;
cxplutolongitude = 238.92903833 * arcdeg;
cxplutoperiapsis = 224.06891629 * arcdeg;
cxplutoascending = 110.30393684 * arcdeg;
cxplutoorbit_dt = -0.00031596 * au / jc;
cxplutoeccentricity_dt = 0.00005170 / jc;
cxplutoinclination_dt = 0.00004818 * arcdeg / jc;
cxplutolongitude_dt = 145.20780515 * arcdeg / jc;
cxplutoperiapsis_dt = -0.04062942 * arcdeg / jc;
cxplutoascending_dt = -0.01183482 * arcdeg / jc;
cxceresorbit = 2.76740933 * au;
cxcereseccentricity = 0.07560729;
cxceresinclination = 10.59321706 * arcdeg;
cxcereslongitude = 102.82668 * arcdeg;
cxceresperiapsis = 73.023742647 * arcdeg;
cxceresascending = 80.308882612359 * arcdeg;
cxceresorbit_dt = 0.0 * au / jc;
cxcereseccentricity_dt = 0.0 / jc;
cxceresinclination_dt = 0.0 * arcdeg / jc;
cxcereslongitude_dt = 0.0 * arcdeg / jc;
cxceresperiapsis_dt = 0.0 * arcdeg / jc;
cxceresascending_dt = 0.0 * arcdeg / jc;
cxerisorbit = 67.781 * au;
cxeriseccentricity = 0.44068;
cxerisinclination = 44.0445 * arcdeg;
cxerislongitude = 32.4926663 * arcdeg;
cxerisperiapsis = 151.60371236817 * arcdeg;
cxerisascending = 35.87992471211 * arcdeg;
cxerisorbit_dt = 0.0 * au / jc;
cxeriseccentricity_dt = 0.0 / jc;
cxerisinclination_dt = 0.0 * arcdeg / jc;
cxerislongitude_dt = 0.0 * arcdeg / jc;
cxerisperiapsis_dt = 0.0 * arcdeg / jc;
cxerisascending_dt = 0.0 * arcdeg / jc;
cxmakemakeorbit = 45.715 * au;
cxmakemakeeccentricity = 0.15586;
cxmakemakeinclination = 29.00685 * arcdeg;
cxmakemakelongitude = 177.2966805 * arcdeg;
cxmakemakeperiapsis = 295.642772002 * arcdeg;
cxmakemakeascending = 79.616805978978 * arcdeg;
cxmakemakeorbit_dt = 0.0 * au / jc;
cxmakemakeeccentricity_dt = 0.0 / jc;
cxmakemakeinclination_dt = 0.0 * arcdeg / jc;
cxmakemakelongitude_dt = 0.0 * arcdeg / jc;
cxmakemakeperiapsis_dt = 0.0 * arcdeg / jc;
cxmakemakeascending_dt = 0.0 * arcdeg / jc;
cxhaumeaorbit = 43.218 * au;
cxhaumeaeccentricity = 0.19126;
cxhaumeainclination = 28.19 * arcdeg;
cxhaumealongitude = 215.687315 * arcdeg;
cxhaumeaperiapsis = 238.69440821915 * arcdeg;
cxhaumeaascending = 122.01840302632 * arcdeg;
cxhaumeaorbit_dt = 0.0 * au / jc;
cxhaumeaeccentricity_dt = 0.0 / jc;
cxhaumeainclination_dt = 0.0 * arcdeg / jc;
cxhaumealongitude_dt = 0.0 * arcdeg / jc;
cxhaumeaperiapsis_dt = 0.0 * arcdeg / jc;
cxhaumeaascending_dt = 0.0 * arcdeg / jc;
define margot(pmass,porbit) {
   auto retvalu;
   if (pmass <= 0.0 || porbit <= 0.0) {
      retvalu = 0.0;
   } else {
      retvalu = (5.0401742 * 10^-10) * pmass /\
            exp(log(porbit) * 1.125);
   }
   return (retvalu);
}
define sternlevison(pmass,porbit) {
   auto retvalu,xx;
   if (pmass <= 0.0 || porbit <= 0.0) {
      retvalu = 0.0;
   } else {
      xx = 2.0 * log(pmass) - 1.5 * log(porbit);
      retvalu = (2.482 * 10^-28) * exp(xx);
   }
   return (retvalu);
}
cxlc_p1_prev_pl = -1;
cxlc_p1_sun = 0;
cxlc_p1_mercury = 1;
cxlc_p1_venus = 2;
cxlc_p1_earth = 3;
cxlc_p1_mars = 4;
cxlc_p1_jupiter = 5;
cxlc_p1_saturn = 6;
cxlc_p1_uranus = 7;
cxlc_p1_neptune = 8;
cxlc_p1_pluto = 9;
cxlc_p1_ceres = 10;
cxlc_p1_eris = 11;
cxlc_p1_makemake = 12;
cxlc_p1_haumea = 13;
cxlc_p1_count = cxlc_p1_haumea + 1;
cxlc_p1_err = -1;
cxlc_p2_gm = 0;
cxlc_p2_day = 1;
cxlc_p2_flatness = 2;
cxlc_p2_a = 3;
cxlc_p2_c = 4;
cxlc_p2_year = 5;
cxlc_p2_orb = 6;
cxlc_p2_ecc = 7;
cxlc_p2_inc = 8;
cxlc_p2_lon = 9;
cxlc_p2_per = 10;
cxlc_p2_asc = 11;
cxlc_p2_orb_dt = 12;
cxlc_p2_ecc_dt = 13;
cxlc_p2_inc_dt = 14;
cxlc_p2_lon_dt = 15;
cxlc_p2_per_dt = 16;
cxlc_p2_asc_dt = 17;
cxlc_p2_count = 18;
lv_pl_helio_arr[0] = 0;
lv_pl_geo_arr[0] = 0;
lv_pl_ind = cxlc_p1_prev_pl;
lv_pl_mtrx[0][0] = 0;
lv_pl_earth_year = cxearthyear;
lv_pl_jtwoktime = 1.0 / 64.0;
define lf_pl_init(plnt) {
   # local-use Bc lv_pl_ind;
   # local-use Bc lv_pl_mtrx[];
   if (lv_pl_ind < 0) {
      lv_pl_mtrx[cxlc_p1_sun][cxlc_p2_gm] = cxsungm;
      lv_pl_mtrx[cxlc_p1_sun][cxlc_p2_day] = cxsunday;
      lv_pl_mtrx[cxlc_p1_sun][cxlc_p2_flatness] = cxsunflatness;
      lv_pl_mtrx[cxlc_p1_sun][cxlc_p2_a] = cxsun_a;
      lv_pl_mtrx[cxlc_p1_sun][cxlc_p2_c] = cxsun_c;
      lv_pl_mtrx[cxlc_p1_sun][cxlc_p2_year] = cxsunyear;
      lv_pl_mtrx[cxlc_p1_sun][cxlc_p2_orb] = cxsunorbit;
      lv_pl_mtrx[cxlc_p1_sun][cxlc_p2_ecc] = cxsuneccentricity;
      lv_pl_mtrx[cxlc_p1_sun][cxlc_p2_inc] = cxsuninclination;
      lv_pl_mtrx[cxlc_p1_sun][cxlc_p2_lon] = cxsunlongitude;
      lv_pl_mtrx[cxlc_p1_sun][cxlc_p2_per] = cxsunperiapsis;
      lv_pl_mtrx[cxlc_p1_sun][cxlc_p2_asc] = cxsunascending;
      lv_pl_mtrx[cxlc_p1_sun][cxlc_p2_orb_dt] = cxsunorbit_dt;
      lv_pl_mtrx[cxlc_p1_sun][cxlc_p2_ecc_dt] =\
            cxsuneccentricity_dt;
      lv_pl_mtrx[cxlc_p1_sun][cxlc_p2_inc_dt] =\
            cxsuninclination_dt;
      lv_pl_mtrx[cxlc_p1_sun][cxlc_p2_lon_dt] =\
            cxsunlongitude_dt;
      lv_pl_mtrx[cxlc_p1_sun][cxlc_p2_per_dt] =\
            cxsunperiapsis_dt;
      lv_pl_mtrx[cxlc_p1_sun][cxlc_p2_asc_dt] =\
            cxsunascending_dt;
      lv_pl_mtrx[cxlc_p1_mercury][cxlc_p2_gm] = cxmercurygm;
      lv_pl_mtrx[cxlc_p1_mercury][cxlc_p2_day] = cxmercuryday;
      lv_pl_mtrx[cxlc_p1_mercury][cxlc_p2_flatness] =\
            cxmercuryflatness;
      lv_pl_mtrx[cxlc_p1_mercury][cxlc_p2_a] = cxmercury_a;
      lv_pl_mtrx[cxlc_p1_mercury][cxlc_p2_c] = cxmercury_c;
      lv_pl_mtrx[cxlc_p1_mercury][cxlc_p2_year] = cxmercuryyear;
      lv_pl_mtrx[cxlc_p1_mercury][cxlc_p2_orb] = cxmercuryorbit;
      lv_pl_mtrx[cxlc_p1_mercury][cxlc_p2_ecc] =\
            cxmercuryeccentricity;
      lv_pl_mtrx[cxlc_p1_mercury][cxlc_p2_inc] =\
            cxmercuryinclination;
      lv_pl_mtrx[cxlc_p1_mercury][cxlc_p2_lon] =\
            cxmercurylongitude;
      lv_pl_mtrx[cxlc_p1_mercury][cxlc_p2_per] =\
            cxmercuryperiapsis;
      lv_pl_mtrx[cxlc_p1_mercury][cxlc_p2_asc] =\
            cxmercuryascending;
      lv_pl_mtrx[cxlc_p1_mercury][cxlc_p2_orb_dt] =\
            cxmercuryorbit_dt;
      lv_pl_mtrx[cxlc_p1_mercury][cxlc_p2_ecc_dt] =\
            cxmercuryeccentricity_dt;
      lv_pl_mtrx[cxlc_p1_mercury][cxlc_p2_inc_dt] =\
            cxmercuryinclination_dt;
      lv_pl_mtrx[cxlc_p1_mercury][cxlc_p2_lon_dt] =\
            cxmercurylongitude_dt;
      lv_pl_mtrx[cxlc_p1_mercury][cxlc_p2_per_dt] =\
            cxmercuryperiapsis_dt;
      lv_pl_mtrx[cxlc_p1_mercury][cxlc_p2_asc_dt] =\
            cxmercuryascending_dt;
      lv_pl_mtrx[cxlc_p1_venus][cxlc_p2_gm] = cxvenusgm;
      lv_pl_mtrx[cxlc_p1_venus][cxlc_p2_day] = cxvenusday;
      lv_pl_mtrx[cxlc_p1_venus][cxlc_p2_flatness] =\
            cxvenusflatness;
      lv_pl_mtrx[cxlc_p1_venus][cxlc_p2_a] = cxvenus_a;
      lv_pl_mtrx[cxlc_p1_venus][cxlc_p2_c] = cxvenus_c;
      lv_pl_mtrx[cxlc_p1_venus][cxlc_p2_year] = cxvenusyear;
      lv_pl_mtrx[cxlc_p1_venus][cxlc_p2_orb] = cxvenusorbit;
      lv_pl_mtrx[cxlc_p1_venus][cxlc_p2_ecc] =\
            cxvenuseccentricity;
      lv_pl_mtrx[cxlc_p1_venus][cxlc_p2_inc] =\
            cxvenusinclination;
      lv_pl_mtrx[cxlc_p1_venus][cxlc_p2_lon] = cxvenuslongitude;
      lv_pl_mtrx[cxlc_p1_venus][cxlc_p2_per] = cxvenusperiapsis;
      lv_pl_mtrx[cxlc_p1_venus][cxlc_p2_asc] = cxvenusascending;
      lv_pl_mtrx[cxlc_p1_venus][cxlc_p2_orb_dt] =\
            cxvenusorbit_dt;
      lv_pl_mtrx[cxlc_p1_venus][cxlc_p2_ecc_dt] =\
            cxvenuseccentricity_dt;
      lv_pl_mtrx[cxlc_p1_venus][cxlc_p2_inc_dt] =\
            cxvenusinclination_dt;
      lv_pl_mtrx[cxlc_p1_venus][cxlc_p2_lon_dt] =\
            cxvenuslongitude_dt;
      lv_pl_mtrx[cxlc_p1_venus][cxlc_p2_per_dt] =\
            cxvenusperiapsis_dt;
      lv_pl_mtrx[cxlc_p1_venus][cxlc_p2_asc_dt] =\
            cxvenusascending_dt;
      lv_pl_mtrx[cxlc_p1_earth][cxlc_p2_gm] = cxearthgm;
      lv_pl_mtrx[cxlc_p1_earth][cxlc_p2_day] = cxearthday;
      lv_pl_mtrx[cxlc_p1_earth][cxlc_p2_flatness] =\
            cxearthflatness;
      lv_pl_mtrx[cxlc_p1_earth][cxlc_p2_a] = cxearth_a;
      lv_pl_mtrx[cxlc_p1_earth][cxlc_p2_c] = cxearth_c;
      lv_pl_mtrx[cxlc_p1_earth][cxlc_p2_year] = cxearthyear;
      lv_pl_mtrx[cxlc_p1_earth][cxlc_p2_orb] = cxearthorbit;
      lv_pl_mtrx[cxlc_p1_earth][cxlc_p2_ecc] =\
            cxeartheccentricity;
      lv_pl_mtrx[cxlc_p1_earth][cxlc_p2_inc] =\
            cxearthinclination;
      lv_pl_mtrx[cxlc_p1_earth][cxlc_p2_lon] = cxearthlongitude;
      lv_pl_mtrx[cxlc_p1_earth][cxlc_p2_per] = cxearthperiapsis;
      lv_pl_mtrx[cxlc_p1_earth][cxlc_p2_asc] = cxearthascending;
      lv_pl_mtrx[cxlc_p1_earth][cxlc_p2_orb_dt] =\
            cxearthorbit_dt;
      lv_pl_mtrx[cxlc_p1_earth][cxlc_p2_ecc_dt] =\
            cxeartheccentricity_dt;
      lv_pl_mtrx[cxlc_p1_earth][cxlc_p2_inc_dt] =\
            cxearthinclination_dt;
      lv_pl_mtrx[cxlc_p1_earth][cxlc_p2_lon_dt] =\
            cxearthlongitude_dt;
      lv_pl_mtrx[cxlc_p1_earth][cxlc_p2_per_dt] =\
            cxearthperiapsis_dt;
      lv_pl_mtrx[cxlc_p1_earth][cxlc_p2_asc_dt] =\
            cxearthascending_dt;
      lv_pl_mtrx[cxlc_p1_mars][cxlc_p2_gm] = cxmarsgm;
      lv_pl_mtrx[cxlc_p1_mars][cxlc_p2_day] = cxmarsday;
      lv_pl_mtrx[cxlc_p1_mars][cxlc_p2_flatness] =\
            cxmarsflatness;
      lv_pl_mtrx[cxlc_p1_mars][cxlc_p2_a] = cxmars_a;
      lv_pl_mtrx[cxlc_p1_mars][cxlc_p2_c] = cxmars_c;
      lv_pl_mtrx[cxlc_p1_mars][cxlc_p2_year] = cxmarsyear;
      lv_pl_mtrx[cxlc_p1_mars][cxlc_p2_orb] = cxmarsorbit;
      lv_pl_mtrx[cxlc_p1_mars][cxlc_p2_ecc] = cxmarseccentricity;
      lv_pl_mtrx[cxlc_p1_mars][cxlc_p2_inc] = cxmarsinclination;
      lv_pl_mtrx[cxlc_p1_mars][cxlc_p2_lon] = cxmarslongitude;
      lv_pl_mtrx[cxlc_p1_mars][cxlc_p2_per] = cxmarsperiapsis;
      lv_pl_mtrx[cxlc_p1_mars][cxlc_p2_asc] = cxmarsascending;
      lv_pl_mtrx[cxlc_p1_mars][cxlc_p2_orb_dt] = cxmarsorbit_dt;
      lv_pl_mtrx[cxlc_p1_mars][cxlc_p2_ecc_dt] =\
            cxmarseccentricity_dt;
      lv_pl_mtrx[cxlc_p1_mars][cxlc_p2_inc_dt] =\
            cxmarsinclination_dt;
      lv_pl_mtrx[cxlc_p1_mars][cxlc_p2_lon_dt] =\
            cxmarslongitude_dt;
      lv_pl_mtrx[cxlc_p1_mars][cxlc_p2_per_dt] =\
            cxmarsperiapsis_dt;
      lv_pl_mtrx[cxlc_p1_mars][cxlc_p2_asc_dt] =\
            cxmarsascending_dt;
      lv_pl_mtrx[cxlc_p1_jupiter][cxlc_p2_gm] = cxjupitergm;
      lv_pl_mtrx[cxlc_p1_jupiter][cxlc_p2_day] = cxjupiterday;
      lv_pl_mtrx[cxlc_p1_jupiter][cxlc_p2_flatness] =\
            cxjupiterflatness;
      lv_pl_mtrx[cxlc_p1_jupiter][cxlc_p2_a] = cxjupiter_a;
      lv_pl_mtrx[cxlc_p1_jupiter][cxlc_p2_c] = cxjupiter_c;
      lv_pl_mtrx[cxlc_p1_jupiter][cxlc_p2_year] = cxjupiteryear;
      lv_pl_mtrx[cxlc_p1_jupiter][cxlc_p2_orb] = cxjupiterorbit;
      lv_pl_mtrx[cxlc_p1_jupiter][cxlc_p2_ecc] =\
            cxjupitereccentricity;
      lv_pl_mtrx[cxlc_p1_jupiter][cxlc_p2_inc] =\
            cxjupiterinclination;
      lv_pl_mtrx[cxlc_p1_jupiter][cxlc_p2_lon] =\
            cxjupiterlongitude;
      lv_pl_mtrx[cxlc_p1_jupiter][cxlc_p2_per] =\
            cxjupiterperiapsis;
      lv_pl_mtrx[cxlc_p1_jupiter][cxlc_p2_asc] =\
            cxjupiterascending;
      lv_pl_mtrx[cxlc_p1_jupiter][cxlc_p2_orb_dt] =\
            cxjupiterorbit_dt;
      lv_pl_mtrx[cxlc_p1_jupiter][cxlc_p2_ecc_dt] =\
            cxjupitereccentricity_dt;
      lv_pl_mtrx[cxlc_p1_jupiter][cxlc_p2_inc_dt] =\
            cxjupiterinclination_dt;
      lv_pl_mtrx[cxlc_p1_jupiter][cxlc_p2_lon_dt] =\
            cxjupiterlongitude_dt;
      lv_pl_mtrx[cxlc_p1_jupiter][cxlc_p2_per_dt] =\
            cxjupiterperiapsis_dt;
      lv_pl_mtrx[cxlc_p1_jupiter][cxlc_p2_asc_dt] =\
            cxjupiterascending_dt;
      lv_pl_mtrx[cxlc_p1_saturn][cxlc_p2_gm] = cxsaturngm;
      lv_pl_mtrx[cxlc_p1_saturn][cxlc_p2_day] = cxsaturnday;
      lv_pl_mtrx[cxlc_p1_saturn][cxlc_p2_flatness] =\
            cxsaturnflatness;
      lv_pl_mtrx[cxlc_p1_saturn][cxlc_p2_a] = cxsaturn_a;
      lv_pl_mtrx[cxlc_p1_saturn][cxlc_p2_c] = cxsaturn_c;
      lv_pl_mtrx[cxlc_p1_saturn][cxlc_p2_year] = cxsaturnyear;
      lv_pl_mtrx[cxlc_p1_saturn][cxlc_p2_orb] = cxsaturnorbit;
      lv_pl_mtrx[cxlc_p1_saturn][cxlc_p2_ecc] =\
            cxsaturneccentricity;
      lv_pl_mtrx[cxlc_p1_saturn][cxlc_p2_inc] =\
            cxsaturninclination;
      lv_pl_mtrx[cxlc_p1_saturn][cxlc_p2_lon] =\
            cxsaturnlongitude;
      lv_pl_mtrx[cxlc_p1_saturn][cxlc_p2_per] =\
            cxsaturnperiapsis;
      lv_pl_mtrx[cxlc_p1_saturn][cxlc_p2_asc] =\
            cxsaturnascending;
      lv_pl_mtrx[cxlc_p1_saturn][cxlc_p2_orb_dt] =\
            cxsaturnorbit_dt;
      lv_pl_mtrx[cxlc_p1_saturn][cxlc_p2_ecc_dt] =\
            cxsaturneccentricity_dt;
      lv_pl_mtrx[cxlc_p1_saturn][cxlc_p2_inc_dt] =\
            cxsaturninclination_dt;
      lv_pl_mtrx[cxlc_p1_saturn][cxlc_p2_lon_dt] =\
            cxsaturnlongitude_dt;
      lv_pl_mtrx[cxlc_p1_saturn][cxlc_p2_per_dt] =\
            cxsaturnperiapsis_dt;
      lv_pl_mtrx[cxlc_p1_saturn][cxlc_p2_asc_dt] =\
            cxsaturnascending_dt;
      lv_pl_mtrx[cxlc_p1_uranus][cxlc_p2_gm] = cxuranusgm;
      lv_pl_mtrx[cxlc_p1_uranus][cxlc_p2_day] = cxuranusday;
      lv_pl_mtrx[cxlc_p1_uranus][cxlc_p2_flatness] =\
            cxuranusflatness;
      lv_pl_mtrx[cxlc_p1_uranus][cxlc_p2_a] = cxuranus_a;
      lv_pl_mtrx[cxlc_p1_uranus][cxlc_p2_c] = cxuranus_c;
      lv_pl_mtrx[cxlc_p1_uranus][cxlc_p2_year] = cxuranusyear;
      lv_pl_mtrx[cxlc_p1_uranus][cxlc_p2_orb] = cxuranusorbit;
      lv_pl_mtrx[cxlc_p1_uranus][cxlc_p2_ecc] =\
            cxuranuseccentricity;
      lv_pl_mtrx[cxlc_p1_uranus][cxlc_p2_inc] =\
            cxuranusinclination;
      lv_pl_mtrx[cxlc_p1_uranus][cxlc_p2_lon] =\
            cxuranuslongitude;
      lv_pl_mtrx[cxlc_p1_uranus][cxlc_p2_per] =\
            cxuranusperiapsis;
      lv_pl_mtrx[cxlc_p1_uranus][cxlc_p2_asc] =\
            cxuranusascending;
      lv_pl_mtrx[cxlc_p1_uranus][cxlc_p2_orb_dt] =\
            cxuranusorbit_dt;
      lv_pl_mtrx[cxlc_p1_uranus][cxlc_p2_ecc_dt] =\
            cxuranuseccentricity_dt;
      lv_pl_mtrx[cxlc_p1_uranus][cxlc_p2_inc_dt] =\
            cxuranusinclination_dt;
      lv_pl_mtrx[cxlc_p1_uranus][cxlc_p2_lon_dt] =\
            cxuranuslongitude_dt;
      lv_pl_mtrx[cxlc_p1_uranus][cxlc_p2_per_dt] =\
            cxuranusperiapsis_dt;
      lv_pl_mtrx[cxlc_p1_uranus][cxlc_p2_asc_dt] =\
            cxuranusascending_dt;
      lv_pl_mtrx[cxlc_p1_neptune][cxlc_p2_gm] = cxneptunegm;
      lv_pl_mtrx[cxlc_p1_neptune][cxlc_p2_day] = cxneptuneday;
      lv_pl_mtrx[cxlc_p1_neptune][cxlc_p2_flatness] =\
            cxneptuneflatness;
      lv_pl_mtrx[cxlc_p1_neptune][cxlc_p2_a] = cxneptune_a;
      lv_pl_mtrx[cxlc_p1_neptune][cxlc_p2_c] = cxneptune_c;
      lv_pl_mtrx[cxlc_p1_neptune][cxlc_p2_year] = cxneptuneyear;
      lv_pl_mtrx[cxlc_p1_neptune][cxlc_p2_orb] = cxneptuneorbit;
      lv_pl_mtrx[cxlc_p1_neptune][cxlc_p2_ecc] =\
            cxneptuneeccentricity;
      lv_pl_mtrx[cxlc_p1_neptune][cxlc_p2_inc] =\
            cxneptuneinclination;
      lv_pl_mtrx[cxlc_p1_neptune][cxlc_p2_lon] =\
            cxneptunelongitude;
      lv_pl_mtrx[cxlc_p1_neptune][cxlc_p2_per] =\
            cxneptuneperiapsis;
      lv_pl_mtrx[cxlc_p1_neptune][cxlc_p2_asc] =\
            cxneptuneascending;
      lv_pl_mtrx[cxlc_p1_neptune][cxlc_p2_orb_dt] =\
            cxneptuneorbit_dt;
      lv_pl_mtrx[cxlc_p1_neptune][cxlc_p2_ecc_dt] =\
            cxneptuneeccentricity_dt;
      lv_pl_mtrx[cxlc_p1_neptune][cxlc_p2_inc_dt] =\
            cxneptuneinclination_dt;
      lv_pl_mtrx[cxlc_p1_neptune][cxlc_p2_lon_dt] =\
            cxneptunelongitude_dt;
      lv_pl_mtrx[cxlc_p1_neptune][cxlc_p2_per_dt] =\
            cxneptuneperiapsis_dt;
      lv_pl_mtrx[cxlc_p1_neptune][cxlc_p2_asc_dt] =\
            cxneptuneascending_dt;
      lv_pl_mtrx[cxlc_p1_pluto][cxlc_p2_gm] = cxplutogm;
      lv_pl_mtrx[cxlc_p1_pluto][cxlc_p2_day] = cxplutoday;
      lv_pl_mtrx[cxlc_p1_pluto][cxlc_p2_flatness] =\
            cxplutoflatness;
      lv_pl_mtrx[cxlc_p1_pluto][cxlc_p2_a] = cxpluto_a;
      lv_pl_mtrx[cxlc_p1_pluto][cxlc_p2_c] = cxpluto_c;
      lv_pl_mtrx[cxlc_p1_pluto][cxlc_p2_year] = cxplutoyear;
      lv_pl_mtrx[cxlc_p1_pluto][cxlc_p2_orb] = cxplutoorbit;
      lv_pl_mtrx[cxlc_p1_pluto][cxlc_p2_ecc] =\
            cxplutoeccentricity;
      lv_pl_mtrx[cxlc_p1_pluto][cxlc_p2_inc] =\
            cxplutoinclination;
      lv_pl_mtrx[cxlc_p1_pluto][cxlc_p2_lon] = cxplutolongitude;
      lv_pl_mtrx[cxlc_p1_pluto][cxlc_p2_per] = cxplutoperiapsis;
      lv_pl_mtrx[cxlc_p1_pluto][cxlc_p2_asc] = cxplutoascending;
      lv_pl_mtrx[cxlc_p1_pluto][cxlc_p2_orb_dt] =\
            cxplutoorbit_dt;
      lv_pl_mtrx[cxlc_p1_pluto][cxlc_p2_ecc_dt] =\
            cxplutoeccentricity_dt;
      lv_pl_mtrx[cxlc_p1_pluto][cxlc_p2_inc_dt] =\
            cxplutoinclination_dt;
      lv_pl_mtrx[cxlc_p1_pluto][cxlc_p2_lon_dt] =\
            cxplutolongitude_dt;
      lv_pl_mtrx[cxlc_p1_pluto][cxlc_p2_per_dt] =\
            cxplutoperiapsis_dt;
      lv_pl_mtrx[cxlc_p1_pluto][cxlc_p2_asc_dt] =\
            cxplutoascending_dt;
      lv_pl_mtrx[cxlc_p1_ceres][cxlc_p2_gm] = cxceresgm;
      lv_pl_mtrx[cxlc_p1_ceres][cxlc_p2_day] = cxceresday;
      lv_pl_mtrx[cxlc_p1_ceres][cxlc_p2_flatness] =\
            cxceresflatness;
      lv_pl_mtrx[cxlc_p1_ceres][cxlc_p2_a] = cxceres_a;
      lv_pl_mtrx[cxlc_p1_ceres][cxlc_p2_c] = cxceres_c;
      lv_pl_mtrx[cxlc_p1_ceres][cxlc_p2_year] = cxceresyear;
      lv_pl_mtrx[cxlc_p1_ceres][cxlc_p2_orb] = cxceresorbit;
      lv_pl_mtrx[cxlc_p1_ceres][cxlc_p2_ecc] =\
            cxcereseccentricity;
      lv_pl_mtrx[cxlc_p1_ceres][cxlc_p2_inc] =\
            cxceresinclination;
      lv_pl_mtrx[cxlc_p1_ceres][cxlc_p2_lon] = cxcereslongitude;
      lv_pl_mtrx[cxlc_p1_ceres][cxlc_p2_per] = cxceresperiapsis;
      lv_pl_mtrx[cxlc_p1_ceres][cxlc_p2_asc] = cxceresascending;
      lv_pl_mtrx[cxlc_p1_ceres][cxlc_p2_orb_dt] =\
            cxceresorbit_dt;
      lv_pl_mtrx[cxlc_p1_ceres][cxlc_p2_ecc_dt] =\
            cxcereseccentricity_dt;
      lv_pl_mtrx[cxlc_p1_ceres][cxlc_p2_inc_dt] =\
            cxceresinclination_dt;
      lv_pl_mtrx[cxlc_p1_ceres][cxlc_p2_lon_dt] =\
            cxcereslongitude_dt;
      lv_pl_mtrx[cxlc_p1_ceres][cxlc_p2_per_dt] =\
            cxceresperiapsis_dt;
      lv_pl_mtrx[cxlc_p1_ceres][cxlc_p2_asc_dt] =\
            cxceresascending_dt;
      lv_pl_mtrx[cxlc_p1_eris][cxlc_p2_gm] = cxerisgm;
      lv_pl_mtrx[cxlc_p1_eris][cxlc_p2_day] = cxerisday;
      lv_pl_mtrx[cxlc_p1_eris][cxlc_p2_flatness] =\
            cxerisflatness;
      lv_pl_mtrx[cxlc_p1_eris][cxlc_p2_a] = cxeris_a;
      lv_pl_mtrx[cxlc_p1_eris][cxlc_p2_c] = cxeris_c;
      lv_pl_mtrx[cxlc_p1_eris][cxlc_p2_year] = cxerisyear;
      lv_pl_mtrx[cxlc_p1_eris][cxlc_p2_orb] = cxerisorbit;
      lv_pl_mtrx[cxlc_p1_eris][cxlc_p2_ecc] = cxeriseccentricity;
      lv_pl_mtrx[cxlc_p1_eris][cxlc_p2_inc] = cxerisinclination;
      lv_pl_mtrx[cxlc_p1_eris][cxlc_p2_lon] = cxerislongitude;
      lv_pl_mtrx[cxlc_p1_eris][cxlc_p2_per] = cxerisperiapsis;
      lv_pl_mtrx[cxlc_p1_eris][cxlc_p2_asc] = cxerisascending;
      lv_pl_mtrx[cxlc_p1_eris][cxlc_p2_orb_dt] = cxerisorbit_dt;
      lv_pl_mtrx[cxlc_p1_eris][cxlc_p2_ecc_dt] =\
            cxeriseccentricity_dt;
      lv_pl_mtrx[cxlc_p1_eris][cxlc_p2_inc_dt] =\
            cxerisinclination_dt;
      lv_pl_mtrx[cxlc_p1_eris][cxlc_p2_lon_dt] =\
            cxerislongitude_dt;
      lv_pl_mtrx[cxlc_p1_eris][cxlc_p2_per_dt] =\
            cxerisperiapsis_dt;
      lv_pl_mtrx[cxlc_p1_eris][cxlc_p2_asc_dt] =\
            cxerisascending_dt;
      lv_pl_mtrx[cxlc_p1_makemake][cxlc_p2_gm] = cxmakemakegm;
      lv_pl_mtrx[cxlc_p1_makemake][cxlc_p2_day] = cxmakemakeday;
      lv_pl_mtrx[cxlc_p1_makemake][cxlc_p2_flatness] =\
            cxmakemakeflatness;
      lv_pl_mtrx[cxlc_p1_makemake][cxlc_p2_a] = cxmakemake_a;
      lv_pl_mtrx[cxlc_p1_makemake][cxlc_p2_c] = cxmakemake_c;
      lv_pl_mtrx[cxlc_p1_makemake][cxlc_p2_year] =\
            cxmakemakeyear;
      lv_pl_mtrx[cxlc_p1_makemake][cxlc_p2_orb] =\
            cxmakemakeorbit;
      lv_pl_mtrx[cxlc_p1_makemake][cxlc_p2_ecc] =\
            cxmakemakeeccentricity;
      lv_pl_mtrx[cxlc_p1_makemake][cxlc_p2_inc] =\
            cxmakemakeinclination;
      lv_pl_mtrx[cxlc_p1_makemake][cxlc_p2_lon] =\
            cxmakemakelongitude;
      lv_pl_mtrx[cxlc_p1_makemake][cxlc_p2_per] =\
            cxmakemakeperiapsis;
      lv_pl_mtrx[cxlc_p1_makemake][cxlc_p2_asc] =\
            cxmakemakeascending;
      lv_pl_mtrx[cxlc_p1_makemake][cxlc_p2_orb_dt] =\
            cxmakemakeorbit_dt;
      lv_pl_mtrx[cxlc_p1_makemake][cxlc_p2_ecc_dt] =\
            cxmakemakeeccentricity_dt;
      lv_pl_mtrx[cxlc_p1_makemake][cxlc_p2_inc_dt] =\
            cxmakemakeinclination_dt;
      lv_pl_mtrx[cxlc_p1_makemake][cxlc_p2_lon_dt] =\
            cxmakemakelongitude_dt;
      lv_pl_mtrx[cxlc_p1_makemake][cxlc_p2_per_dt] =\
            cxmakemakeperiapsis_dt;
      lv_pl_mtrx[cxlc_p1_makemake][cxlc_p2_asc_dt] =\
            cxmakemakeascending_dt;
      lv_pl_mtrx[cxlc_p1_haumea][cxlc_p2_gm] = cxhaumeagm;
      lv_pl_mtrx[cxlc_p1_haumea][cxlc_p2_day] = cxhaumeaday;
      lv_pl_mtrx[cxlc_p1_haumea][cxlc_p2_flatness] =\
            cxhaumeaflatness;
      lv_pl_mtrx[cxlc_p1_haumea][cxlc_p2_a] = cxhaumea_a;
      lv_pl_mtrx[cxlc_p1_haumea][cxlc_p2_c] = cxhaumea_c;
      lv_pl_mtrx[cxlc_p1_haumea][cxlc_p2_year] = cxhaumeayear;
      lv_pl_mtrx[cxlc_p1_haumea][cxlc_p2_orb] = cxhaumeaorbit;
      lv_pl_mtrx[cxlc_p1_haumea][cxlc_p2_ecc] =\
            cxhaumeaeccentricity;
      lv_pl_mtrx[cxlc_p1_haumea][cxlc_p2_inc] =\
            cxhaumeainclination;
      lv_pl_mtrx[cxlc_p1_haumea][cxlc_p2_lon] =\
            cxhaumealongitude;
      lv_pl_mtrx[cxlc_p1_haumea][cxlc_p2_per] =\
            cxhaumeaperiapsis;
      lv_pl_mtrx[cxlc_p1_haumea][cxlc_p2_asc] =\
            cxhaumeaascending;
      lv_pl_mtrx[cxlc_p1_haumea][cxlc_p2_orb_dt] =\
            cxhaumeaorbit_dt;
      lv_pl_mtrx[cxlc_p1_haumea][cxlc_p2_ecc_dt] =\
            cxhaumeaeccentricity_dt;
      lv_pl_mtrx[cxlc_p1_haumea][cxlc_p2_inc_dt] =\
            cxhaumeainclination_dt;
      lv_pl_mtrx[cxlc_p1_haumea][cxlc_p2_lon_dt] =\
            cxhaumealongitude_dt;
      lv_pl_mtrx[cxlc_p1_haumea][cxlc_p2_per_dt] =\
            cxhaumeaperiapsis_dt;
      lv_pl_mtrx[cxlc_p1_haumea][cxlc_p2_asc_dt] =\
            cxhaumeaascending_dt;
      if (0 < lv_pl_jtwoktime && lv_pl_jtwoktime < 1.0 / 32.0) {
         bcdummy = plsettime(uet2j2k(timee()));
      }
      lv_pl_earth_year = cxearthyear;
   }
   if (cxlc_p1_sun <= plnt && plnt < cxlc_p1_count) {
      lv_pl_ind = plnt;
   } else if (plnt == cxlc_p1_prev_pl) {
      if (lv_pl_ind < 0) {
         lv_pl_ind = cxlc_p1_earth;
      }
   } else {
      lv_pl_ind = cxlc_p1_prev_pl;
   }
   return (lv_pl_ind);
}
define lf_val(pa_ind,pb_bb,pb_bbd) {
   auto pl_ind,retvalu;
   if (pa_ind < cxlc_p1_prev_pl || cxlc_p1_count <= pa_ind) {
      retvalu = cxlc_p1_err;
   } else {
      pl_ind = pl(pa_ind);
      retvalu = (lv_pl_mtrx[pl_ind][pb_bb] + lv_pl_jtwoktime\
            * lv_pl_mtrx[pl_ind][pb_bbd]);
   }
   return (retvalu);
}
define pl(plnt) {
   return (lf_pl_init(plnt));
}
define plsettime(jtwokdate) {
   lv_pl_jtwoktime = jtwokdate * jd;
   return (lv_pl_jtwoktime);
}
define pl_gm(plnt) {
   # local-use Bc lv_pl_mtrx[];
   # local-use Bc lv_pl_ind;
   auto retvalu;
   bcdummy = lf_pl_init(plnt);
   if (cxlc_p1_sun <= plnt && plnt < cxlc_p1_count) {
      retvalu = lv_pl_mtrx[plnt][cxlc_p2_gm];
   } else if (plnt == cxlc_p1_prev_pl) {
      retvalu = lv_pl_mtrx[lv_pl_ind][cxlc_p2_gm];
   } else {
      retvalu = cxlc_p1_err;
   }
   return (retvalu);
}
define plgm() {
   # local-use Bc lv_pl_ind;
   return (pl_gm(cxlc_p1_prev_pl));
}
define pl_year(plnt) {
   # local-use Bc lv_pl_mtrx[];
   # local-use Bc lv_pl_ind;
   auto retvalu;
   bcdummy = lf_pl_init(plnt);
   if (cxlc_p1_sun <= plnt && plnt < cxlc_p1_count) {
      retvalu = lv_pl_mtrx[plnt][cxlc_p2_year];
   } else if (plnt == cxlc_p1_prev_pl) {
      retvalu = lv_pl_mtrx[lv_pl_ind][cxlc_p2_year];
   } else {
      retvalu = cxlc_p1_err;
   }
   return (retvalu);
}
define plyear() {
   # local-use Bc lv_pl_ind;
   return (pl_year(cxlc_p1_prev_pl));
}
define pl_day(plnt) {
   # local-use Bc lv_pl_mtrx[];
   # local-use Bc lv_pl_ind;
   auto retvalu;
   bcdummy = lf_pl_init(plnt);
   if (cxlc_p1_sun <= plnt && plnt < cxlc_p1_count) {
      retvalu = lv_pl_mtrx[plnt][cxlc_p2_day];
   } else if (plnt == cxlc_p1_prev_pl) {
      retvalu = lv_pl_mtrx[lv_pl_ind][cxlc_p2_day];
   } else {
      retvalu = cxlc_p1_err;
   }
   return (retvalu);
}
define plday() {
   # local-use Bc lv_pl_ind;
   return (pl_day(cxlc_p1_prev_pl));
}
define pl_flatness(plnt) {
   # local-use Bc lv_pl_mtrx[];
   # local-use Bc lv_pl_ind;
   auto retvalu;
   bcdummy = lf_pl_init(plnt);
   if (cxlc_p1_sun <= plnt && plnt < cxlc_p1_count) {
      retvalu = lv_pl_mtrx[plnt][cxlc_p2_flatness];
   } else if (plnt == cxlc_p1_prev_pl) {
      retvalu = lv_pl_mtrx[lv_pl_ind][cxlc_p2_flatness];
   } else {
      retvalu = cxlc_p1_err;
   }
   return (retvalu);
}
define plflatness() {
   # local-use Bc lv_pl_ind;
   return (pl_flatness(cxlc_p1_prev_pl));
}
define pl_a(plnt) {
   # local-use Bc lv_pl_mtrx[];
   # local-use Bc lv_pl_ind;
   auto retvalu;
   bcdummy = lf_pl_init(plnt);
   if (cxlc_p1_sun <= plnt && plnt < cxlc_p1_count) {
      retvalu = lv_pl_mtrx[plnt][cxlc_p2_a];
   } else if (plnt == cxlc_p1_prev_pl) {
      retvalu = lv_pl_mtrx[lv_pl_ind][cxlc_p2_a];
   } else {
      retvalu = cxlc_p1_err;
   }
   return (retvalu);
}
define pla() {
   # local-use Bc lv_pl_ind;
   return (pl_a(cxlc_p1_prev_pl));
}
define pl_c(plnt) {
   # local-use Bc lv_pl_mtrx[];
   # local-use Bc lv_pl_ind;
   auto retvalu;
   bcdummy = lf_pl_init(plnt);
   if (cxlc_p1_sun <= plnt && plnt < cxlc_p1_count) {
      retvalu = lv_pl_mtrx[plnt][cxlc_p2_c];
   } else if (plnt == cxlc_p1_prev_pl) {
      retvalu = lv_pl_mtrx[lv_pl_ind][cxlc_p2_c];
   } else {
      retvalu = cxlc_p1_err;
   }
   return (retvalu);
}
define plc() {
   # local-use Bc lv_pl_ind;
   return (pl_c(cxlc_p1_prev_pl));
}
define pl_orbit(plnt) {
   return (lf_val(plnt,cxlc_p2_orb,cxlc_p2_orb_dt));
}
define plorbit() {
   # local-use Bc lv_pl_ind;
   return (pl_orbit(cxlc_p1_prev_pl));
}
define pl_eccentricity(plnt) {
   return (lf_val(plnt,cxlc_p2_ecc,cxlc_p2_ecc_dt));
}
define pleccentricity() {
   # local-use Bc lv_pl_ind;
   return (pl_eccentricity(cxlc_p1_prev_pl));
}
define pl_inclination(plnt) {
   return (lf_val(plnt,cxlc_p2_inc,cxlc_p2_inc_dt));
}
define plinclination() {
   # local-use Bc lv_pl_ind;
   return (pl_inclination(cxlc_p1_prev_pl));
}
define pl_longitude(plnt) {
   return (lf_val(plnt,cxlc_p2_lon,cxlc_p2_lon_dt));
}
define pllongitude() {
   # local-use Bc lv_pl_ind;
   return (pl_longitude(cxlc_p1_prev_pl));
}
define pl_periapsis(plnt) {
   return (lf_val(plnt,cxlc_p2_per,cxlc_p2_per_dt));
}
define plperiapsis() {
   # local-use Bc lv_pl_ind;
   return (pl_periapsis(cxlc_p1_prev_pl));
}
define pl_ascending(plnt) {
   return (lf_val(plnt,cxlc_p2_asc,cxlc_p2_asc_dt));
}
define plascending() {
   # local-use Bc lv_pl_ind;
   return (pl_ascending(cxlc_p1_prev_pl));
}
define pl_mass(plnt) {
   auto retvalu;
   if (plnt < cxlc_p1_prev_pl || cxlc_p1_count <= plnt) {
      retvalu = cxlc_p1_err;
   } else {
      retvalu = pl_gm(plnt) / gravitation;
   }
   return (retvalu);
}
define plmass() {
   # local-use Bc lv_pl_ind;
   return (pl_mass(cxlc_p1_prev_pl));
}
define pl_b(plnt) {
   auto retvalu;
   if (plnt < cxlc_p1_prev_pl || cxlc_p1_count <= plnt) {
      retvalu = cxlc_p1_err;
   } else {
      retvalu = (1.0 - pl_flatness(plnt)) * pl_a(plnt);
   }
   return (retvalu);
}
define plb() {
   # local-use Bc lv_pl_ind;
   return (pl_b(cxlc_p1_prev_pl));
}
define pl_radius(plnt) {
   auto retvalu;
   if (plnt < cxlc_p1_prev_pl || cxlc_p1_count <= plnt) {
      retvalu = cxlc_p1_err;
   } else {
      retvalu = (pl_a(plnt) + pl_b(plnt) + pl_c(plnt)) / 3.0;
   }
   return (retvalu);
}
define plradius() {
   # local-use Bc lv_pl_ind;
   return (pl_radius(cxlc_p1_prev_pl));
}
define pl_gravity(plnt) {
   auto retvalu;
   if (plnt < cxlc_p1_prev_pl || cxlc_p1_count <= plnt) {
      retvalu = cxlc_p1_err;
   } else {
      retvalu = pl_gm(plnt) / square(pl_radius(plnt));
   }
   return (retvalu);
}
define plgravity() {
   # local-use Bc lv_pl_ind;
   return (pl_gravity(cxlc_p1_prev_pl));
}
define pl_meananomaly(plnt) {
   auto retvalu;
   if (plnt < cxlc_p1_prev_pl || cxlc_p1_count <= plnt) {
      retvalu = cxlc_p1_err;
   } else {
      retvalu = fmodu(pl_longitude(plnt) - pl_periapsis(plnt)\
            ,tau);
   }
   return (retvalu);
}
define plmeananomaly() {
   # local-use Bc lv_pl_ind;
   return (pl_meananomaly(cxlc_p1_prev_pl));
}
define pl_escape(plnt) {
   auto retvalu;
   if (plnt < cxlc_p1_prev_pl || cxlc_p1_count <= plnt) {
      retvalu = cxlc_p1_err;
   } else {
      retvalu = sqrt(2.0 * pl_gm(plnt) / pl_radius(plnt));
   }
   return (retvalu);
}
define plescape() {
   # local-use Bc lv_pl_ind;
   return (pl_escape(cxlc_p1_prev_pl));
}
define pl_synodic(plnt) {
   # local-use Bc lv_pl_earth_year;
   auto yra,retvalu;
   if (plnt < cxlc_p1_prev_pl || cxlc_p1_count <= plnt) {
      retvalu = cxlc_p1_err;
   } else {
      yra = pl_year(plnt);
      retvalu = divi(yra * lv_pl_earth_year,abs(yra -\
            lv_pl_earth_year),0.0);
   }
   return (retvalu);
}
define plsynodic() {
   # local-use Bc lv_pl_ind;
   return (pl_synodic(cxlc_p1_prev_pl));
}
define pl_volume(plnt) {
   auto retvalu;
   if (plnt < cxlc_p1_prev_pl || cxlc_p1_count <= plnt) {
      retvalu = cxlc_p1_err;
   } else {
      retvalu = 2.0 * tau * pl_a(plnt) * pl_b(plnt) *\
            pl_c(plnt) / 3.0;
   }
   return (retvalu);
}
define plvolume() {
   # local-use Bc lv_pl_ind;
   return (pl_volume(cxlc_p1_prev_pl));
}
define pl_density(plnt) {
   auto retvalu;
   if (plnt < cxlc_p1_prev_pl || cxlc_p1_count <= plnt) {
      retvalu = cxlc_p1_err;
   } else {
      retvalu = pl_mass(plnt) / pl_volume(plnt);
   }
   return (retvalu);
}
define pldensity() {
   # local-use Bc lv_pl_ind;
   return (pl_density(cxlc_p1_prev_pl));
}
define pl_argument(plnt) {
   auto retvalu;
   if (plnt < cxlc_p1_prev_pl || cxlc_p1_count <= plnt) {
      retvalu = cxlc_p1_err;
   } else {
      retvalu = pl_periapsis(plnt) - pl_ascending(plnt);
   }
   return (retvalu);
}
define plargument() {
   # local-use Bc lv_pl_ind;
   return (pl_argument(cxlc_p1_prev_pl));
}
define pl_margot(plnt) {
   auto retvalu;
   if (plnt < cxlc_p1_prev_pl || cxlc_p1_count <= plnt) {
      retvalu = cxlc_p1_err;
   } else {
      retvalu = margot(pl_mass(plnt),pl_orbit(plnt));
   }
   return (retvalu);
}
define plmargot() {
   # local-use Bc lv_pl_ind;
   return (pl_margot(cxlc_p1_prev_pl));
}
define pl_sternlevison(plnt) {
   auto retvalu;
   if (plnt < cxlc_p1_prev_pl || cxlc_p1_count <= plnt) {
      retvalu = cxlc_p1_err;
   } else {
      retvalu = sternlevison(pl_mass(plnt),pl_orbit(plnt));
   }
   return (retvalu);
}
define plsternlevison() {
   # local-use Bc lv_pl_ind;
   return (pl_sternlevison(cxlc_p1_prev_pl));
}
define pl_perihelion(plnt) {
   auto retvalu;
   if (plnt < cxlc_p1_prev_pl || cxlc_p1_count <= plnt) {
      retvalu = cxlc_p1_err;
   } else {
      retvalu = pl_orbit(plnt) * (1.0 - pl_eccentricity(plnt));
   }
   return (retvalu);
}
define plperihelion() {
   # local-use Bc lv_pl_ind;
   return (pl_perihelion(cxlc_p1_prev_pl));
}
define pl_aphelion(plnt) {
   auto retvalu;
   if (plnt < cxlc_p1_prev_pl || cxlc_p1_count <= plnt) {
      retvalu = cxlc_p1_err;
   } else {
      retvalu = pl_orbit(plnt) * (1.0 + pl_eccentricity(plnt));
   }
   return (retvalu);
}
define plaphelion() {
   # local-use Bc lv_pl_ind;
   return (pl_aphelion(cxlc_p1_prev_pl));
}
define eccentric_anomaly(mean_ano_rad,eccen) {
   auto mrad,xrad,nrvx_ii,nrvx_yy,nrvx_xx,nrvx_dy,nrvx_xp;
   mrad = fmodu(mean_ano_rad,tur2rad(1.0));
   xrad = mrad + eccen * sin(mrad);
   nrvx_xx = xrad;
   for (nrvx_ii = 0; nrvx_ii <= 20; nrvx_ii += 1) {
      nrvx_xp = nrvx_xx;
      nrvx_dy = 1.0 - eccen * cos(nrvx_xx);
      if (iszero(nrvx_dy)) {
         break;
      }
      nrvx_yy = nrvx_xx - eccen * sin(nrvx_xx) - mean_ano_rad;
      nrvx_xx -= nrvx_yy / nrvx_dy;
      if (iseq(nrvx_xp,nrvx_xx)) {
         break;
      }
   }
   return (nrvx_xx);
}
define pl_eccentricanomaly(plnt) {
   auto retvalu;
   if (plnt < cxlc_p1_prev_pl || cxlc_p1_count <= plnt) {
      retvalu = cxlc_p1_err;
   } else {
      retvalu = eccentric_anomaly(pl_meananomaly(plnt),\
            pl_eccentricity(plnt));
   }
   return (retvalu);
}
define pleccentricanomaly() {
   # local-use Bc lv_pl_ind;
   return (pl_eccentricanomaly(cxlc_p1_prev_pl));
}
define pl_heliocentric(plnt,jtwok) {
   # local-use Bc lv_pl_helio_arr[];
   # local-use Bc lv_pl_geo_arr[];
   auto orb_m,eccen,inc_rad,lon_rad,per_rad,asc_rad,\
         arg_rad,mean_anomaly_rad,eano_rad,dxx_m,dyy_m,\
         ci,co,cw,si,so,sw,swci,cwci,obl_rad,retvalu;
   if (lf_pl_init(plnt) < 0) {
      retvalu = cxlc_p1_err;
   } else {
      bcdummy = plsettime(jtwok);
      orb_m = plorbit();
      eccen = pleccentricity();
      inc_rad = plinclination();
      lon_rad = pllongitude();
      per_rad = plperiapsis();
      asc_rad = plascending();
      arg_rad = per_rad - asc_rad;
      mean_anomaly_rad = fmod(lon_rad - per_rad,tur2rad(1.0));
      eano_rad = eccentric_anomaly(mean_anomaly_rad,eccen);
      dxx_m = orb_m * (cos(eano_rad) - eccen);
      dyy_m = orb_m * topyh1(eccen) * sin(eano_rad);
      cw = cos(arg_rad);
      sw = sin(arg_rad);
      co = cos(asc_rad);
      so = sin(asc_rad);
      ci = cos(inc_rad);
      si = sin(inc_rad);
      swci = sw * ci;
      cwci = cw * ci;
      lv_pl_helio_arr[0] = (dxx_m * (cw * co - swci * so) -\
            dyy_m * (sw * co + cwci * so));
      lv_pl_helio_arr[1] = (dxx_m * (cw * so + swci * co) -\
            dyy_m * (sw * so - cwci * co));
      lv_pl_helio_arr[2] = (dxx_m * (sw * si) + dyy_m * (cw *\
            si));
      obl_rad = earth_obliquity(jtwok);
      co = cos(obl_rad);
      so = sin(obl_rad);
      lv_pl_geo_arr[0] = lv_pl_helio_arr[0];
      lv_pl_geo_arr[1] = co * lv_pl_helio_arr[1] - so *\
            lv_pl_helio_arr[2];
      lv_pl_geo_arr[2] = so * lv_pl_helio_arr[1] + co *\
            lv_pl_helio_arr[2];
      retvalu = hypot3(lv_pl_helio_arr[0],lv_pl_helio_arr[1]\
            ,lv_pl_helio_arr[2]);
   }
   return (retvalu);
}
define plhelio(indd) {
   # local-use Bc lv_pl_helio_arr[];
   auto ret_val;
   if (0 <= indd && indd < 3) {
      ret_val = lv_pl_helio_arr[indd];
   } else {
      ret_val = 0;
   }
   return (ret_val);
}
define plgeo(indd) {
   # local-use Bc lv_pl_geo_arr[];
   auto ret_val;
   if (0 <= indd && indd < 3) {
      ret_val = lv_pl_geo_arr[indd];
   } else {
      ret_val = 0;
   }
   return (ret_val);
}
define pl_name(plnt) {
   auto plnt_ind;
   plnt_ind = lf_pl_init(plnt);
   if (plnt_ind == cxlc_p1_sun) {
      print "SUN      ";
   } else if (plnt_ind == cxlc_p1_mercury) {
      print "MERCURY  ";
   } else if (plnt_ind == cxlc_p1_venus) {
      print "VENUS    ";
   } else if (plnt_ind == cxlc_p1_earth) {
      print "EARTH    ";
   } else if (plnt_ind == cxlc_p1_mars) {
      print "MARS     ";
   } else if (plnt_ind == cxlc_p1_jupiter) {
      print "JUPITER  ";
   } else if (plnt_ind == cxlc_p1_saturn) {
      print "SATURN   ";
   } else if (plnt_ind == cxlc_p1_uranus) {
      print "URANUS   ";
   } else if (plnt_ind == cxlc_p1_neptune) {
      print "NEPTUNE  ";
   } else if (plnt_ind == cxlc_p1_pluto) {
      print "PLUTO    ";
   } else if (plnt_ind == cxlc_p1_ceres) {
      print "CERES    ";
   } else if (plnt_ind == cxlc_p1_eris) {
      print "ERIS     ";
   } else if (plnt_ind == cxlc_p1_makemake) {
      print "MAKEMAKE ";
   } else if (plnt_ind == cxlc_p1_haumea) {
      print "HAUMEA   ";
   } else {
      print "UNKNOWN";
      print plnt_ind;
   }
   return (plnt_ind);
}
define plname() {
   # local-use Bc lv_pl_ind;
   return (pl_name(cxlc_p1_prev_pl));
}
define earth_radius(lat_deg) {
   return (pl_aradius(cxlc_p1_earth,lat_deg));
}
define earth_tropicalyear(jtwokdate) {
   auto jy;
   jy = jtwokdate * day / jyear;
   return (((((2.64 * 10^-16) * jy - (7.29 * 10^-14)) * jy -\
         (6.15359 * 10^-8)) * jy + 365.2421896698));
}
define earth_distance(lata_deg,lona_deg,latb_deg,lonb_deg) {
   return ((great_circle_distance(deg2rad(lata_deg),\
         deg2rad(lona_deg),deg2rad(latb_deg),\
         deg2rad(lonb_deg)) * cxearth_a));
}
define plaradius(lat_deg) {
   auto calat,sblat,aa,bb;
   aa = square(pla());
   bb = square(plb());
   calat = square(pla() * cosd(lat_deg));
   sblat = square(plb() * sind(lat_deg));
   return (sqrt((aa * calat + bb * sblat) / (calat + sblat)));
}
define pl_aradius(plnt,lat_deg) {
   bcdummy = pl(plnt);
   return (plaradius(lat_deg));
}
define earth_obliquity(jtwok) {
   auto obl_rad;
   obl_rad = (((-(1.24828 * 10^-16)) * jtwok - (3.56226633 *\
         10^-7)) * jtwok + 23.4392889);
   return (deg2rad(obl_rad));
}
define earth_gravity(lat_deg) {
   auto slatsq,obltsq,kk;
   slatsq = square(sind(lat_deg));
   obltsq = cxearthflatness * (2.0 - cxearthflatness);
   kk = (((1.0 - cxearthflatness) * earthgravityb) -\
         earthgravitya);
   return ((earthgravitya + kk * slatsq) / sqrt(1.0 - obltsq\
         * slatsq));
}
define earth_gravity_height(lat_deg,height_m) {
   return ((earth_gravity(lat_deg) - height_m * 2.0 *\
         cxearthgm / cube(cxearth_a)));
}
cxlc_isa_temperature = 0;
cxlc_isa_pressure = 1;
cxlc_isa_density = 2;
cxlc_isa_xheight = 0;
cxlc_isa_xtemperature = 1;
cxlc_isa_xlapserate = 2;
cxlc_isa_xpressure = 3;
cxlc_isa_xdensity = 4;
lv_isa_mtrx[0][0] = 0;
lv_isa_magic = 0.0;
define lf_isa_calc(height_m,state_x) {
   # local-use Bc lv_isa_mtrx[];
   # local-use Bc lv_isa_magic;
   auto h_ind,air_k_per_m,expon,this_temp,delta_h,ret_val;
   if (! ismagic(lv_isa_magic)) {
      lv_isa_mtrx[0][cxlc_isa_xheight] = 0;
      lv_isa_mtrx[0][cxlc_isa_xtemperature] = 288.15;
      lv_isa_mtrx[0][cxlc_isa_xlapserate] = -0.0065;
      lv_isa_mtrx[0][cxlc_isa_xpressure] = atm;
      lv_isa_mtrx[0][cxlc_isa_xdensity] = 1.2250;
      lv_isa_mtrx[1][cxlc_isa_xheight] = 11000;
      lv_isa_mtrx[1][cxlc_isa_xtemperature] = 216.65;
      lv_isa_mtrx[1][cxlc_isa_xlapserate] = 0.0;
      lv_isa_mtrx[1][cxlc_isa_xpressure] = 22632.10;
      lv_isa_mtrx[1][cxlc_isa_xdensity] = 0.36391;
      lv_isa_mtrx[2][cxlc_isa_xheight] = 20000;
      lv_isa_mtrx[2][cxlc_isa_xtemperature] = 216.65;
      lv_isa_mtrx[2][cxlc_isa_xlapserate] = 0.001;
      lv_isa_mtrx[2][cxlc_isa_xpressure] = 5474.89;
      lv_isa_mtrx[2][cxlc_isa_xdensity] = 0.08803;
      lv_isa_mtrx[3][cxlc_isa_xheight] = 32000;
      lv_isa_mtrx[3][cxlc_isa_xtemperature] = 228.65;
      lv_isa_mtrx[3][cxlc_isa_xlapserate] = 0.0028;
      lv_isa_mtrx[3][cxlc_isa_xpressure] = 868.02;
      lv_isa_mtrx[3][cxlc_isa_xdensity] = 0.01322;
      lv_isa_mtrx[4][cxlc_isa_xheight] = 47000;
      lv_isa_mtrx[4][cxlc_isa_xtemperature] = 270.65;
      lv_isa_mtrx[4][cxlc_isa_xlapserate] = 0.0;
      lv_isa_mtrx[4][cxlc_isa_xpressure] = 110.91;
      lv_isa_mtrx[4][cxlc_isa_xdensity] = 0.00143;
      lv_isa_mtrx[5][cxlc_isa_xheight] = 51000;
      lv_isa_mtrx[5][cxlc_isa_xtemperature] = 270.65;
      lv_isa_mtrx[5][cxlc_isa_xlapserate] = -0.0028;
      lv_isa_mtrx[5][cxlc_isa_xpressure] = 66.94;
      lv_isa_mtrx[5][cxlc_isa_xdensity] = (8.6 * 10^-4);
      lv_isa_mtrx[6][cxlc_isa_xheight] = 71000;
      lv_isa_mtrx[6][cxlc_isa_xtemperature] = 214.65;
      lv_isa_mtrx[6][cxlc_isa_xlapserate] = -0.002;
      lv_isa_mtrx[6][cxlc_isa_xpressure] = 3.96;
      lv_isa_mtrx[6][cxlc_isa_xdensity] = (6.4 * 10^-5);
      lv_isa_magic = magicset();
   }
   h_ind = 6;
   while (height_m < lv_isa_mtrx[h_ind][0] && 0 < h_ind) {
      h_ind -= 1;
   }
   delta_h = height_m - lv_isa_mtrx[h_ind][cxlc_isa_xheight];
   this_temp = lv_isa_mtrx[h_ind][cxlc_isa_xtemperature] +\
         lv_isa_mtrx[h_ind][cxlc_isa_xlapserate] * delta_h;
   if (state_x == cxlc_isa_temperature) {
      ret_val = this_temp;
   } else {
      air_k_per_m = gravity * air_mass / gas;
      if (iszero(lv_isa_mtrx[h_ind][cxlc_isa_xlapserate])) {
         ret_val = exp(-air_k_per_m * delta_h /\
               lv_isa_mtrx[h_ind][cxlc_isa_xtemperature]);
      } else {
         expon = air_k_per_m /\
               lv_isa_mtrx[h_ind][cxlc_isa_xlapserate];
         if (state_x == cxlc_isa_density) {
            expon += 1;
         }
         ret_val =\
               pow(lv_isa_mtrx[h_ind][cxlc_isa_xtemperature]\
               / this_temp,expon);
      }
      if (state_x == cxlc_isa_pressure) {
         ret_val *= lv_isa_mtrx[h_ind][cxlc_isa_xpressure];
      } else {
         ret_val *= lv_isa_mtrx[h_ind][cxlc_isa_xdensity];
      }
   }
   return (ret_val);
}
define isa_temp(height_m) {
   return (lf_isa_calc(height_m,cxlc_isa_temperature));
}
define isa_pres(height_m) {
   return (lf_isa_calc(height_m,cxlc_isa_pressure));
}
define isa_dens(height_m) {
   return (lf_isa_calc(height_m,cxlc_isa_density));
}
define vin_distance(lata_deg,lona_deg,latb_deg,lonb_deg,\
      *ret_bearings_arr_p[]) {
   auto retvalu,rad_arr[];
   retvalu = cxearth_a * ellipsoid_distance(cxearthflatness,\
         deg2rad(lata_deg),deg2rad(lona_deg),\
         deg2rad(latb_deg),deg2rad(lonb_deg),rad_arr[]) /\
         meter;
   ret_bearings_arr_p[0] = rad2deg(rad_arr[0]);
   ret_bearings_arr_p[1] = rad2deg(rad_arr[1]);
   return (retvalu);
}
define vin_destination(lata_deg,lona_deg,heading_deg,\
      dist_m,*ret_dest_arr_p[]) {
   auto fltnss,retvalu,rad_arr[];
   fltnss = cxearthflatness;
   retvalu = rad2deg(ellipsoid_destination(fltnss,\
         deg2rad(lata_deg),deg2rad(lona_deg),\
         deg2rad(heading_deg),dist_m * meter / cxearth_a,\
         rad_arr[]));
   ret_dest_arr_p[0] = rad2deg(rad_arr[0]);
   ret_dest_arr_p[1] = rad2deg(rad_arr[1]);
   return (retvalu);
}
#   DDDDDDDDDDescription ---------------- kwplanets_description #
define kwplanets_description() {
   print "Usage: bcc [Expression]\n";
   print "   Kwplanets 0-ary Functions: pla plaphelion plargume";
   print "nt plascending plb plc plday pldensity pleccentricano";
   print "maly pleccentricity plescape plflatness plgm plgravit";
   print "y plinclination pllongitude plmargot plmass plmeanano";
   print "maly plname plorbit plperiapsis plperihelion plradius";
   print " plsternlevison plsynodic plvolume plyear";
   print "\n";
   print "   Kwplanets 1-ary Functions: earth_gravity earth_obl";
   print "iquity earth_radius earth_tropicalyear isa_dens isa_p";
   print "res isa_temp pl pl_a pl_aphelion pl_argument pl_ascen";
   print "ding pl_b pl_c pl_day pl_density pl_eccentricanomaly ";
   print "pl_eccentricity pl_escape pl_flatness pl_gm pl_gravit";
   print "y pl_inclination pl_longitude pl_margot pl_mass pl_me";
   print "ananomaly pl_name pl_orbit pl_periapsis pl_perihelion";
   print " pl_radius pl_sternlevison pl_synodic pl_volume pl_ye";
   print "ar plaradius plgeo plhelio plsettime";
   print "\n";
   print "   Kwplanets 2-ary Functions: earth_gravity_height ec";
   print "centric_anomaly margot pl_aradius pl_heliocentric ste";
   print "rnlevison";
   print "\n";
   print "   Kwplanets 4-ary Functions: earth_distance";
   print "\n";
   print "   Kwplanets 5-ary Functions: vin_destination vin_dis";
   print "tance";
   print "\n";
}
define kwplanets_desc() {
   print "Usage: bcc [Expression]\n";
   print "   Kwplanets 0-ary Functions: pla(phelion|rgument|sce";
   print "nding)? plb plc pld(ay|ensity) ple(ccentric(anomaly|i";
   print "ty)|scape) plflatness plg(m|ravity) plinclination pll";
   print "ongitude plm(a(rgot|ss)|eananomaly) plname plorbit pl";
   print "peri(apsis|helion) plradius pls(ternlevison|ynodic) p";
   print "lvolume plyear";
   print "\n";
   print "   Kwplanets 1-ary Functions: earth_(gravity|obliquit";
   print "y|radius|tropicalyear) isa_(dens|pres|temp) pl pl_(a(";
   print "phelion|rgument|scending)?|b|c|d(ay|ensity)|e(ccentri";
   print "c(anomaly|ity)|scape)|flatness|g(m|ravity)|inclinatio";
   print "n|longitude|m(a(rgot|ss)|eananomaly)|name|orbit|peri(";
   print "apsis|helion)|radius|s(ternlevison|ynodic)|volume|yea";
   print "r) plaradius plgeo plhelio plsettime";
   print "\n";
   print "   Kwplanets 2-ary Functions: earth_gravity_height ec";
   print "centric_anomaly margot pl_(aradius|heliocentric) ster";
   print "nlevison";
   print "\n";
   print "   Kwplanets 4-ary Functions: earth_distance";
   print "\n";
   print "   Kwplanets 5-ary Functions: vin_d(estination|istanc";
   print "e)";
   print "\n";
}
