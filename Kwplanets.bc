#    Copyright (C) 2021 by Kevin D. Woerner
##-# =KDW= ################# BUILDER $KWROOT/0lib/vkkcp.sh ##################
##-# =KDW= ######### SOURCE $KWROOT/codekdw/kw-lib/Kwplanets.fwipp ##########
##-# =KDW= #### THIS FILE CAN BE OVERWRITTEN BY KEVIN D. WOERNER OR HIS #####
##-# =KDW= ############ MINIONS AT *ANY* TIME. Caveat utilitor. #############
# 2021-05-14 kdw  For Changelog,See File Kwplanets.varylog
true = 1;
false = 0;
#IMPORT "Kw";
#IMPORT "Kwelements";
cxsun_gm = (1.32712440018 * 10^20) * cxunitgm;
cxsun_year = 0.0 * cxday;
cxsun_day = 24.47 * cxday;
cxmercury_gm = (2.2032 * 10^13) * cxunitgm;
cxmercury_year = 87.9691 * cxday;
cxmercury_day = 58.6462 * cxday;
cxvenus_gm = (3.24859 * 10^14) * cxunitgm;
cxvenus_year = 224.701 * cxday;
cxvenus_day = -243.018 * cxday;
cxmars_gm = (4.282837 * 10^13) * cxunitgm;
cxmars_year = 686.971 * cxday;
cxmars_day = 1.02595676 * cxday;
cxearth_gm = (3.986004418 * 10^14) * cxunitgm;
cxearth_year = 365.256363004 * cxday;
cxearth_day = 1.0 / 1.00273781191135448 * cxday;
cxjupiter_gm = (1.26686534 * 10^17) * cxunitgm;
cxjupiter_year = 4332.59 * cxday;
cxjupiter_day = 0.41354 * cxday;
cxsaturn_gm = (3.7931187 * 10^16) * cxunitgm;
cxsaturn_year = 10759.22 * cxday;
cxsaturn_day = 0.44401 * cxday;
cxuranus_gm = (5.793939 * 10^15) * cxunitgm;
cxuranus_year = 30688.5 * cxday;
cxuranus_day = -0.71833 * cxday;
cxneptune_gm = (6.836529 * 10^15) * cxunitgm;
cxneptune_year = (6.0182 * 10^4) * cxday;
cxneptune_day = 0.67125 * cxday;
cxpluto_gm = (8.71 * 10^11) * cxunitgm;
cxpluto_year = (9.056 * 10^4) * cxday;
cxpluto_day = 6.38723 * cxday;
cxmoon_gm = (4.9048695 * 10^12) * cxunitgm;
cxmoon_year = 27.32166155 * cxday;
cxmoon_day = 27.321661 * cxday;
cxceres_gm = (6.26325 * 10^10) * cxunitgm;
cxceres_year = 1681.63 * cxday;
cxceres_day = 0.378090 * cxday;
cxeris_gm = (1.108 * 10^12) * cxunitgm;
cxeris_year = (2.0383 * 10^5) * cxday;
cxeris_day = 1.0792 * cxday;
cxmakemake_gm = (2.9366 * 10^11) * cxunitgm;
cxmakemake_year = (1.12897 * 10^5) * cxday;
cxmakemake_day = 0.32379 * cxday;
cxhaumea_gm = (2.674 * 10^11) * cxunitgm;
cxhaumea_year = (1.03774 * 10^5) * cxday;
cxhaumea_day = 0.16314585 * cxday;
cxearth_solarday = cxday;
cxearth_siderealday = cxday / 1.002737909350795;
cxearth_stellarday = cxearth_day;
cxearth_tropicalyear = 365.242190402 * cxday;
cxearth_siderealyear = cxearth_year;
cxearth_anomalisticyear = 365.259636 * cxday;
cxsiderealyear = cxearth_siderealyear;
cxanomalisticyear = cxearth_anomalisticyear;
cxtropicalyear = cxearth_tropicalyear;
cxsun_flatness = (9.0 * 10^-6);
cxsun_a = (6.957 * 10^8) * cxmeter;
cxsun_c = cxsun_a;
cxmercury_flatness = 0.0;
cxmercury_a = (2.4397 * 10^6) * cxmeter;
cxmercury_c = cxmercury_a;
cxvenus_flatness = 0.0;
cxvenus_a = (6.0518 * 10^6) * cxmeter;
cxvenus_c = cxvenus_a;
cxearth_flatness = 1.0 / 298.257223563;
cxearth_a = (6.378137 * 10^6) * cxmeter;
cxearth_c = cxearth_a;
cxmars_flatness = 1.0 / 169.81;
cxmars_a = (3.3962 * 10^6) * cxmeter;
cxmars_c = cxmars_a;
cxjupiter_flatness = 1.0 / 15.4144028;
cxjupiter_a = (7.1492 * 10^7) * cxmeter;
cxjupiter_c = cxjupiter_a;
cxsaturn_flatness = 1.0 / 10.208;
cxsaturn_a = (6.0268 * 10^7) * cxmeter;
cxsaturn_c = cxsaturn_a;
cxuranus_flatness = 1.0 / 43.61604;
cxuranus_a = (2.5559 * 10^7) * cxmeter;
cxuranus_c = cxuranus_a;
cxneptune_flatness = 1.0 / 58.54373;
cxneptune_a = (2.4764 * 10^7) * cxmeter;
cxneptune_c = cxneptune_a;
cxpluto_flatness = 0.0;
cxpluto_a = (1.1899 * 10^6) * cxmeter;
cxpluto_c = cxpluto_a;
cxmoon_flatness = 1.0 / 827.667;
cxmoon_a = (1.7381 * 10^6) * cxmeter;
cxmoon_c = cxmoon_a;
cxceres_flatness = 1.0 / 13.0432;
cxceres_a = (4.826 * 10^5) * cxmeter;
cxceres_c = (4.806 * 10^5) * cxmeter;
cxeris_flatness = 0.0;
cxeris_a = (1.163 * 10^6) * cxmeter;
cxeris_c = cxeris_a;
cxmakemake_flatness = 1.0 / 30.7917;
cxmakemake_a = (7.39 * 10^5) * cxmeter;
cxmakemake_c = cxmakemake_a;
cxhaumea_flatness = 1.0 / 1.96115;
cxhaumea_a = (1.161 * 10^6) * cxmeter;
cxhaumea_c = (8.52 * 10^5) * cxmeter;
cxsun_b = cxsun_a * (1.0 - cxsun_flatness);
cxsun_radius = (cxsun_a + cxsun_b + cxsun_c) / 3.0;
cxsun_escape = sqrt(2.0 * cxsun_gm / cxsun_radius);
cxsun_oblateness = sqrt(cxsun_flatness * (2.0 - cxsun_flatness));
cxsun_gravity = cxsun_gm / (cxsun_radius * cxsun_radius);
cxsun_mass = cxsun_gm / cxgravitation;
cxsun_volume = 2.0 * cxtau / 3.0 * cxsun_radius * cxsun_radius *\
         cxsun_radius;
cxsun_surface = 2.0 * cxtau * cxsun_radius * cxsun_radius;
cxsun_density = cxsun_mass / cxsun_volume;
cxearth_b = cxearth_a * (1.0 - cxearth_flatness);
cxearth_radius = (cxearth_a + cxearth_b + cxearth_c) / 3.0;
cxearth_escape = sqrt(2.0 * cxearth_gm / cxearth_radius);
cxearth_oblateness = sqrt(cxearth_flatness * (2.0 - cxearth_flatness));
cxearth_gravity = cxearth_gm / (cxearth_radius * cxearth_radius);
cxearth_mass = cxearth_gm / cxgravitation;
cxearth_volume = 2.0 * cxtau / 3.0 * cxearth_radius * cxearth_radius *\
         cxearth_radius;
cxearth_surface = 2.0 * cxtau * cxearth_radius * cxearth_radius;
cxearth_density = cxearth_mass / cxearth_volume;
cxmercury_b = cxmercury_a * (1.0 - cxmercury_flatness);
cxmercury_radius = (cxmercury_a + cxmercury_b + cxmercury_c) / 3.0;
cxmercury_escape = sqrt(2.0 * cxmercury_gm / cxmercury_radius);
cxmercury_oblateness = sqrt(cxmercury_flatness * (2.0 - cxmercury_flatness));
cxmercury_gravity = cxmercury_gm / (cxmercury_radius * cxmercury_radius);
cxmercury_mass = cxmercury_gm / cxgravitation;
cxmercury_volume = 2.0 * cxtau / 3.0 * cxmercury_radius *\
         cxmercury_radius * cxmercury_radius;
cxmercury_surface = 2.0 * cxtau * cxmercury_radius * cxmercury_radius;
cxmercury_density = cxmercury_mass / cxmercury_volume;
cxmercury_synodic = cxearth_siderealyear * cxmercury_year /\
         (cxmercury_year - cxearth_siderealyear);
cxvenus_b = cxvenus_a * (1.0 - cxvenus_flatness);
cxvenus_radius = (cxvenus_a + cxvenus_b + cxvenus_c) / 3.0;
cxvenus_escape = sqrt(2.0 * cxvenus_gm / cxvenus_radius);
cxvenus_oblateness = sqrt(cxvenus_flatness * (2.0 - cxvenus_flatness));
cxvenus_gravity = cxvenus_gm / (cxvenus_radius * cxvenus_radius);
cxvenus_mass = cxvenus_gm / cxgravitation;
cxvenus_volume = 2.0 * cxtau / 3.0 * cxvenus_radius * cxvenus_radius *\
         cxvenus_radius;
cxvenus_surface = 2.0 * cxtau * cxvenus_radius * cxvenus_radius;
cxvenus_density = cxvenus_mass / cxvenus_volume;
cxvenus_synodic = cxearth_siderealyear * cxvenus_year / (cxvenus_year -\
         cxearth_siderealyear);
cxmars_b = cxmars_a * (1.0 - cxmars_flatness);
cxmars_radius = (cxmars_a + cxmars_b + cxmars_c) / 3.0;
cxmars_escape = sqrt(2.0 * cxmars_gm / cxmars_radius);
cxmars_oblateness = sqrt(cxmars_flatness * (2.0 - cxmars_flatness));
cxmars_gravity = cxmars_gm / (cxmars_radius * cxmars_radius);
cxmars_mass = cxmars_gm / cxgravitation;
cxmars_volume = 2.0 * cxtau / 3.0 * cxmars_radius * cxmars_radius *\
         cxmars_radius;
cxmars_surface = 2.0 * cxtau * cxmars_radius * cxmars_radius;
cxmars_density = cxmars_mass / cxmars_volume;
cxmars_synodic = cxearth_siderealyear * cxmars_year / (cxmars_year -\
         cxearth_siderealyear);
cxjupiter_b = cxjupiter_a * (1.0 - cxjupiter_flatness);
cxjupiter_radius = (cxjupiter_a + cxjupiter_b + cxjupiter_c) / 3.0;
cxjupiter_escape = sqrt(2.0 * cxjupiter_gm / cxjupiter_radius);
cxjupiter_oblateness = sqrt(cxjupiter_flatness * (2.0 - cxjupiter_flatness));
cxjupiter_gravity = cxjupiter_gm / (cxjupiter_radius * cxjupiter_radius);
cxjupiter_mass = cxjupiter_gm / cxgravitation;
cxjupiter_volume = 2.0 * cxtau / 3.0 * cxjupiter_radius *\
         cxjupiter_radius * cxjupiter_radius;
cxjupiter_surface = 2.0 * cxtau * cxjupiter_radius * cxjupiter_radius;
cxjupiter_density = cxjupiter_mass / cxjupiter_volume;
cxjupiter_synodic = cxearth_siderealyear * cxjupiter_year /\
         (cxjupiter_year - cxearth_siderealyear);
cxsaturn_b = cxsaturn_a * (1.0 - cxsaturn_flatness);
cxsaturn_radius = (cxsaturn_a + cxsaturn_b + cxsaturn_c) / 3.0;
cxsaturn_escape = sqrt(2.0 * cxsaturn_gm / cxsaturn_radius);
cxsaturn_oblateness = sqrt(cxsaturn_flatness * (2.0 - cxsaturn_flatness));
cxsaturn_gravity = cxsaturn_gm / (cxsaturn_radius * cxsaturn_radius);
cxsaturn_mass = cxsaturn_gm / cxgravitation;
cxsaturn_volume = 2.0 * cxtau / 3.0 * cxsaturn_radius * cxsaturn_radius *\
         cxsaturn_radius;
cxsaturn_surface = 2.0 * cxtau * cxsaturn_radius * cxsaturn_radius;
cxsaturn_density = cxsaturn_mass / cxsaturn_volume;
cxsaturn_synodic = cxearth_siderealyear * cxsaturn_year / (cxsaturn_year\
         - cxearth_siderealyear);
cxuranus_b = cxuranus_a * (1.0 - cxuranus_flatness);
cxuranus_radius = (cxuranus_a + cxuranus_b + cxuranus_c) / 3.0;
cxuranus_escape = sqrt(2.0 * cxuranus_gm / cxuranus_radius);
cxuranus_oblateness = sqrt(cxuranus_flatness * (2.0 - cxuranus_flatness));
cxuranus_gravity = cxuranus_gm / (cxuranus_radius * cxuranus_radius);
cxuranus_mass = cxuranus_gm / cxgravitation;
cxuranus_volume = 2.0 * cxtau / 3.0 * cxuranus_radius * cxuranus_radius *\
         cxuranus_radius;
cxuranus_surface = 2.0 * cxtau * cxuranus_radius * cxuranus_radius;
cxuranus_density = cxuranus_mass / cxuranus_volume;
cxuranus_synodic = cxearth_siderealyear * cxuranus_year / (cxuranus_year\
         - cxearth_siderealyear);
cxneptune_b = cxneptune_a * (1.0 - cxneptune_flatness);
cxneptune_radius = (cxneptune_a + cxneptune_b + cxneptune_c) / 3.0;
cxneptune_escape = sqrt(2.0 * cxneptune_gm / cxneptune_radius);
cxneptune_oblateness = sqrt(cxneptune_flatness * (2.0 - cxneptune_flatness));
cxneptune_gravity = cxneptune_gm / (cxneptune_radius * cxneptune_radius);
cxneptune_mass = cxneptune_gm / cxgravitation;
cxneptune_volume = 2.0 * cxtau / 3.0 * cxneptune_radius *\
         cxneptune_radius * cxneptune_radius;
cxneptune_surface = 2.0 * cxtau * cxneptune_radius * cxneptune_radius;
cxneptune_density = cxneptune_mass / cxneptune_volume;
cxneptune_synodic = cxearth_siderealyear * cxneptune_year /\
         (cxneptune_year - cxearth_siderealyear);
cxpluto_b = cxpluto_a * (1.0 - cxpluto_flatness);
cxpluto_radius = (cxpluto_a + cxpluto_b + cxpluto_c) / 3.0;
cxpluto_escape = sqrt(2.0 * cxpluto_gm / cxpluto_radius);
cxpluto_oblateness = sqrt(cxpluto_flatness * (2.0 - cxpluto_flatness));
cxpluto_gravity = cxpluto_gm / (cxpluto_radius * cxpluto_radius);
cxpluto_mass = cxpluto_gm / cxgravitation;
cxpluto_volume = 2.0 * cxtau / 3.0 * cxpluto_radius * cxpluto_radius *\
         cxpluto_radius;
cxpluto_surface = 2.0 * cxtau * cxpluto_radius * cxpluto_radius;
cxpluto_density = cxpluto_mass / cxpluto_volume;
cxpluto_synodic = cxearth_siderealyear * cxpluto_year / (cxpluto_year -\
         cxearth_siderealyear);
cxmoon_b = cxmoon_a * (1.0 - cxmoon_flatness);
cxmoon_radius = (cxmoon_a + cxmoon_b + cxmoon_c) / 3.0;
cxmoon_escape = sqrt(2.0 * cxmoon_gm / cxmoon_radius);
cxmoon_oblateness = sqrt(cxmoon_flatness * (2.0 - cxmoon_flatness));
cxmoon_gravity = cxmoon_gm / (cxmoon_radius * cxmoon_radius);
cxmoon_mass = cxmoon_gm / cxgravitation;
cxmoon_volume = 2.0 * cxtau / 3.0 * cxmoon_radius * cxmoon_radius *\
         cxmoon_radius;
cxmoon_surface = 2.0 * cxtau * cxmoon_radius * cxmoon_radius;
cxmoon_density = cxmoon_mass / cxmoon_volume;
cxmoon_synodic = cxearth_siderealyear * cxmoon_year / (cxmoon_year -\
         cxearth_siderealyear);
cxceres_b = cxceres_a * (1.0 - cxceres_flatness);
cxceres_radius = (cxceres_a + cxceres_b + cxceres_c) / 3.0;
cxceres_escape = sqrt(2.0 * cxceres_gm / cxceres_radius);
cxceres_oblateness = sqrt(cxceres_flatness * (2.0 - cxceres_flatness));
cxceres_gravity = cxceres_gm / (cxceres_radius * cxceres_radius);
cxceres_mass = cxceres_gm / cxgravitation;
cxceres_volume = 2.0 * cxtau / 3.0 * cxceres_radius * cxceres_radius *\
         cxceres_radius;
cxceres_surface = 2.0 * cxtau * cxceres_radius * cxceres_radius;
cxceres_density = cxceres_mass / cxceres_volume;
cxceres_synodic = cxearth_siderealyear * cxceres_year / (cxceres_year -\
         cxearth_siderealyear);
cxeris_b = cxeris_a * (1.0 - cxeris_flatness);
cxeris_radius = (cxeris_a + cxeris_b + cxeris_c) / 3.0;
cxeris_escape = sqrt(2.0 * cxeris_gm / cxeris_radius);
cxeris_oblateness = sqrt(cxeris_flatness * (2.0 - cxeris_flatness));
cxeris_gravity = cxeris_gm / (cxeris_radius * cxeris_radius);
cxeris_mass = cxeris_gm / cxgravitation;
cxeris_volume = 2.0 * cxtau / 3.0 * cxeris_radius * cxeris_radius *\
         cxeris_radius;
cxeris_surface = 2.0 * cxtau * cxeris_radius * cxeris_radius;
cxeris_density = cxeris_mass / cxeris_volume;
cxeris_synodic = cxearth_siderealyear * cxeris_year / (cxeris_year -\
         cxearth_siderealyear);
cxmakemake_b = cxmakemake_a * (1.0 - cxmakemake_flatness);
cxmakemake_radius = (cxmakemake_a + cxmakemake_b + cxmakemake_c) / 3.0;
cxmakemake_escape = sqrt(2.0 * cxmakemake_gm / cxmakemake_radius);
cxmakemake_oblateness = sqrt(cxmakemake_flatness * (2.0 -\
         cxmakemake_flatness));
cxmakemake_gravity = cxmakemake_gm / (cxmakemake_radius * cxmakemake_radius);
cxmakemake_mass = cxmakemake_gm / cxgravitation;
cxmakemake_volume = 2.0 * cxtau / 3.0 * cxmakemake_radius *\
         cxmakemake_radius * cxmakemake_radius;
cxmakemake_surface = 2.0 * cxtau * cxmakemake_radius * cxmakemake_radius;
cxmakemake_density = cxmakemake_mass / cxmakemake_volume;
cxmakemake_synodic = cxearth_siderealyear * cxmakemake_year /\
         (cxmakemake_year - cxearth_siderealyear);
cxhaumea_b = cxhaumea_a * (1.0 - cxhaumea_flatness);
cxhaumea_radius = (cxhaumea_a + cxhaumea_b + cxhaumea_c) / 3.0;
cxhaumea_escape = sqrt(2.0 * cxhaumea_gm / cxhaumea_radius);
cxhaumea_oblateness = sqrt(cxhaumea_flatness * (2.0 - cxhaumea_flatness));
cxhaumea_gravity = cxhaumea_gm / (cxhaumea_radius * cxhaumea_radius);
cxhaumea_mass = cxhaumea_gm / cxgravitation;
cxhaumea_volume = 2.0 * cxtau / 3.0 * cxhaumea_radius * cxhaumea_radius *\
         cxhaumea_radius;
cxhaumea_surface = 2.0 * cxtau * cxhaumea_radius * cxhaumea_radius;
cxhaumea_density = cxhaumea_mass / cxhaumea_volume;
cxhaumea_synodic = cxearth_siderealyear * cxhaumea_year / (cxhaumea_year\
         - cxearth_siderealyear);
cxsun_gmiers = (1.32712442099 * 10^20) * cxunitgm;
cxsun_gmnasa = cxsun_gm;
cxearth_theta_0 = 0.7790572732640 * cxturn;
cxmoon_orbit = (3.843999 * 10^8) * cxmeter;
cxmoon_eccentricity = 0.0549;
cxmoon_inclination = 5.415 * cxarcdeg;
cxsun_orbit = 0.0 * cxau;
cxsun_eccentricity = 0.0;
cxsun_inclination = 0.0 * cxarcdeg;
cxsun_longitude = 0.0 * cxarcdeg;
cxsun_periapsis = 0.0 * cxarcdeg;
cxsun_ascending = 0.0 * cxarcdeg;
cxsun_orbit_dt = 0.0 * cxau / cxjcentury;
cxsun_eccentricity_dt = 0.0 / cxjcentury;
cxsun_inclination_dt = 0.0 * cxarcdeg / cxjcentury;
cxsun_longitude_dt = 0.0 * cxarcdeg / cxjcentury;
cxsun_periapsis_dt = 0.0 * cxarcdeg / cxjcentury;
cxsun_ascending_dt = 0.0 * cxarcdeg / cxjcentury;
cxearth_orbit = 1.00000261 * cxau;
cxearth_eccentricity = 0.01671123;
cxearth_inclination = 359.99998469 * cxarcdeg;
cxearth_longitude = 100.46457166 * cxarcdeg;
cxearth_periapsis = 102.93768193 * cxarcdeg;
cxearth_ascending = 0.0 * cxarcdeg;
cxearth_orbit_dt = 0.00000562 * cxau / cxjcentury;
cxearth_eccentricity_dt = -0.00004392 / cxjcentury;
cxearth_inclination_dt = -0.01294668 * cxarcdeg / cxjcentury;
cxearth_longitude_dt = 35999.37244981 * cxarcdeg / cxjcentury;
cxearth_periapsis_dt = 0.32327364 * cxarcdeg / cxjcentury;
cxearth_ascending_dt = 0.0 * cxarcdeg / cxjcentury;
cxmercury_orbit = 0.38709927 * cxau;
cxmercury_eccentricity = 0.20563593;
cxmercury_inclination = 7.00497902 * cxarcdeg;
cxmercury_longitude = 252.25032350 * cxarcdeg;
cxmercury_periapsis = 77.45779628 * cxarcdeg;
cxmercury_ascending = 48.33076593 * cxarcdeg;
cxmercury_orbit_dt = 0.00000037 * cxau / cxjcentury;
cxmercury_eccentricity_dt = 0.00001906 / cxjcentury;
cxmercury_inclination_dt = -0.00594749 * cxarcdeg / cxjcentury;
cxmercury_longitude_dt = 149472.67411175 * cxarcdeg / cxjcentury;
cxmercury_periapsis_dt = 0.16047689 * cxarcdeg / cxjcentury;
cxmercury_ascending_dt = -0.12534081 * cxarcdeg / cxjcentury;
cxvenus_orbit = 0.72333566 * cxau;
cxvenus_eccentricity = 0.00677672;
cxvenus_inclination = 3.39467605 * cxarcdeg;
cxvenus_longitude = 181.97909950 * cxarcdeg;
cxvenus_periapsis = 131.60246718 * cxarcdeg;
cxvenus_ascending = 76.67984255 * cxarcdeg;
cxvenus_orbit_dt = 0.00000390 * cxau / cxjcentury;
cxvenus_eccentricity_dt = -0.00004107 / cxjcentury;
cxvenus_inclination_dt = -0.00078890 * cxarcdeg / cxjcentury;
cxvenus_longitude_dt = 58517.81538729 * cxarcdeg / cxjcentury;
cxvenus_periapsis_dt = 0.00268329 * cxarcdeg / cxjcentury;
cxvenus_ascending_dt = -0.27769418 * cxarcdeg / cxjcentury;
cxmars_orbit = 1.52371034 * cxau;
cxmars_eccentricity = 0.09339410;
cxmars_inclination = 1.84969142 * cxarcdeg;
cxmars_longitude = 355.44656795 * cxarcdeg;
cxmars_periapsis = 336.05637041 * cxarcdeg;
cxmars_ascending = 49.55953891 * cxarcdeg;
cxmars_orbit_dt = 0.00001847 * cxau / cxjcentury;
cxmars_eccentricity_dt = 0.00007882 / cxjcentury;
cxmars_inclination_dt = -0.00813131 * cxarcdeg / cxjcentury;
cxmars_longitude_dt = 19140.30268499 * cxarcdeg / cxjcentury;
cxmars_periapsis_dt = 0.44441088 * cxarcdeg / cxjcentury;
cxmars_ascending_dt = -0.29257343 * cxarcdeg / cxjcentury;
cxjupiter_orbit = 5.20288700 * cxau;
cxjupiter_eccentricity = 0.04838624;
cxjupiter_inclination = 1.30439695 * cxarcdeg;
cxjupiter_longitude = 34.39644051 * cxarcdeg;
cxjupiter_periapsis = 14.72847983 * cxarcdeg;
cxjupiter_ascending = 100.47390909 * cxarcdeg;
cxjupiter_orbit_dt = -0.00011607 * cxau / cxjcentury;
cxjupiter_eccentricity_dt = -0.00013253 / cxjcentury;
cxjupiter_inclination_dt = -0.00183714 * cxarcdeg / cxjcentury;
cxjupiter_longitude_dt = 3034.74612775 * cxarcdeg / cxjcentury;
cxjupiter_periapsis_dt = 0.21252668 * cxarcdeg / cxjcentury;
cxjupiter_ascending_dt = 0.20469106 * cxarcdeg / cxjcentury;
cxsaturn_orbit = 9.53667594 * cxau;
cxsaturn_eccentricity = 0.05386179;
cxsaturn_inclination = 2.48599187 * cxarcdeg;
cxsaturn_longitude = 49.95424423 * cxarcdeg;
cxsaturn_periapsis = 92.59887831 * cxarcdeg;
cxsaturn_ascending = 113.66242448 * cxarcdeg;
cxsaturn_orbit_dt = -0.00125060 * cxau / cxjcentury;
cxsaturn_eccentricity_dt = -0.00050991 / cxjcentury;
cxsaturn_inclination_dt = 0.00193609 * cxarcdeg / cxjcentury;
cxsaturn_longitude_dt = 1222.49362201 * cxarcdeg / cxjcentury;
cxsaturn_periapsis_dt = -0.41897216 * cxarcdeg / cxjcentury;
cxsaturn_ascending_dt = -0.28867794 * cxarcdeg / cxjcentury;
cxuranus_orbit = 19.18916464 * cxau;
cxuranus_eccentricity = 0.04725744;
cxuranus_inclination = 0.77263783 * cxarcdeg;
cxuranus_longitude = 313.23810451 * cxarcdeg;
cxuranus_periapsis = 170.95427630 * cxarcdeg;
cxuranus_ascending = 74.01692503 * cxarcdeg;
cxuranus_orbit_dt = -0.00196176 * cxau / cxjcentury;
cxuranus_eccentricity_dt = -0.00004397 / cxjcentury;
cxuranus_inclination_dt = -0.00242939 * cxarcdeg / cxjcentury;
cxuranus_longitude_dt = 428.48202785 * cxarcdeg / cxjcentury;
cxuranus_periapsis_dt = 0.40805281 * cxarcdeg / cxjcentury;
cxuranus_ascending_dt = 0.04240589 * cxarcdeg / cxjcentury;
cxneptune_orbit = 30.06992276 * cxau;
cxneptune_eccentricity = 0.00859048;
cxneptune_inclination = 1.77004347 * cxarcdeg;
cxneptune_longitude = 304.87997031 * cxarcdeg;
cxneptune_periapsis = 44.96476227 * cxarcdeg;
cxneptune_ascending = 131.78422574 * cxarcdeg;
cxneptune_orbit_dt = 0.00026291 * cxau / cxjcentury;
cxneptune_eccentricity_dt = 0.00005105 / cxjcentury;
cxneptune_inclination_dt = 0.00035372 * cxarcdeg / cxjcentury;
cxneptune_longitude_dt = 218.45945325 * cxarcdeg / cxjcentury;
cxneptune_periapsis_dt = -0.32241464 * cxarcdeg / cxjcentury;
cxneptune_ascending_dt = -0.00508664 * cxarcdeg / cxjcentury;
cxpluto_orbit = 39.48211675 * cxau;
cxpluto_eccentricity = 0.24882730;
cxpluto_inclination = 17.14001206 * cxarcdeg;
cxpluto_longitude = 238.92903833 * cxarcdeg;
cxpluto_periapsis = 224.06891629 * cxarcdeg;
cxpluto_ascending = 110.30393684 * cxarcdeg;
cxpluto_orbit_dt = -0.00031596 * cxau / cxjcentury;
cxpluto_eccentricity_dt = 0.00005170 / cxjcentury;
cxpluto_inclination_dt = 0.00004818 * cxarcdeg / cxjcentury;
cxpluto_longitude_dt = 145.20780515 * cxarcdeg / cxjcentury;
cxpluto_periapsis_dt = -0.04062942 * cxarcdeg / cxjcentury;
cxpluto_ascending_dt = -0.01183482 * cxarcdeg / cxjcentury;
cxceres_orbit = 2.76740933 * cxau;
cxceres_eccentricity = 0.07560729;
cxceres_inclination = 10.59321706 * cxarcdeg;
cxceres_longitude = 102.82668 * cxarcdeg;
cxceres_periapsis = 73.023742647 * cxarcdeg;
cxceres_ascending = 80.308882612359 * cxarcdeg;
cxceres_orbit_dt = 0.0 * cxau / cxjcentury;
cxceres_eccentricity_dt = 0.0 / cxjcentury;
cxceres_inclination_dt = 0.0 * cxarcdeg / cxjcentury;
cxceres_longitude_dt = 0.0 * cxarcdeg / cxjcentury;
cxceres_periapsis_dt = 0.0 * cxarcdeg / cxjcentury;
cxceres_ascending_dt = 0.0 * cxarcdeg / cxjcentury;
cxeris_orbit = 67.781 * cxau;
cxeris_eccentricity = 0.44068;
cxeris_inclination = 44.0445 * cxarcdeg;
cxeris_longitude = 32.4926663 * cxarcdeg;
cxeris_periapsis = 151.60371236817 * cxarcdeg;
cxeris_ascending = 35.87992471211 * cxarcdeg;
cxeris_orbit_dt = 0.0 * cxau / cxjcentury;
cxeris_eccentricity_dt = 0.0 / cxjcentury;
cxeris_inclination_dt = 0.0 * cxarcdeg / cxjcentury;
cxeris_longitude_dt = 0.0 * cxarcdeg / cxjcentury;
cxeris_periapsis_dt = 0.0 * cxarcdeg / cxjcentury;
cxeris_ascending_dt = 0.0 * cxarcdeg / cxjcentury;
cxmakemake_orbit = 45.715 * cxau;
cxmakemake_eccentricity = 0.15586;
cxmakemake_inclination = 29.00685 * cxarcdeg;
cxmakemake_longitude = 177.2966805 * cxarcdeg;
cxmakemake_periapsis = 295.642772002 * cxarcdeg;
cxmakemake_ascending = 79.616805978978 * cxarcdeg;
cxmakemake_orbit_dt = 0.0 * cxau / cxjcentury;
cxmakemake_eccentricity_dt = 0.0 / cxjcentury;
cxmakemake_inclination_dt = 0.0 * cxarcdeg / cxjcentury;
cxmakemake_longitude_dt = 0.0 * cxarcdeg / cxjcentury;
cxmakemake_periapsis_dt = 0.0 * cxarcdeg / cxjcentury;
cxmakemake_ascending_dt = 0.0 * cxarcdeg / cxjcentury;
cxhaumea_orbit = 43.218 * cxau;
cxhaumea_eccentricity = 0.19126;
cxhaumea_inclination = 28.19 * cxarcdeg;
cxhaumea_longitude = 215.687315 * cxarcdeg;
cxhaumea_periapsis = 238.69440821915 * cxarcdeg;
cxhaumea_ascending = 122.01840302632 * cxarcdeg;
cxhaumea_orbit_dt = 0.0 * cxau / cxjcentury;
cxhaumea_eccentricity_dt = 0.0 / cxjcentury;
cxhaumea_inclination_dt = 0.0 * cxarcdeg / cxjcentury;
cxhaumea_longitude_dt = 0.0 * cxarcdeg / cxjcentury;
cxhaumea_periapsis_dt = 0.0 * cxarcdeg / cxjcentury;
cxhaumea_ascending_dt = 0.0 * cxarcdeg / cxjcentury;
define orbitgm_v(gm_gm,orbit_m) {
   return (sqrt(gm_gm / orbit_m));
}
define orbit_v(mass_kg,orbit_m) {
   return (orbitgm_v(cxgravitation * mass_kg,orbit_m));
}
define margot(pmass,porbit) {
   auto retvalu;
   if (pmass <= 0.0 || porbit <= 0.0) {
      retvalu = 0.0;
   } else {
      retvalu = (5.0401742 * 10^-10) * pmass / exp(log(porbit) * 1.125);
   }
   return (retvalu);
}
define sternlevison(pmass,porbit) {
   auto retvalu,xx;
   if (pmass <= 0.0 || porbit <= 0.0) {
      retvalu = 0.0;
   } else {
      xx = 2.0 * log(pmass) - 1.5 * log(porbit);
      retvalu = (2.482 * 10^-28) * exp(xx);
   }
   return (retvalu);
}
cxlc_p1_err = -1;
cxlc_p1_prev_pl = -1;
cxlc_p1_sun = 0;
cxlc_p1_mercury = 1;
cxlc_p1_venus = 2;
cxlc_p1_earth = 3;
cxlc_p1_mars = 4;
cxlc_p1_jupiter = 5;
cxlc_p1_saturn = 6;
cxlc_p1_uranus = 7;
cxlc_p1_neptune = 8;
cxlc_p1_pluto = 9;
cxlc_p1_ceres = 10;
cxlc_p1_eris = 11;
cxlc_p1_makemake = 12;
cxlc_p1_haumea = 13;
cxlc_p1_cnt = 14;
cxlc_p2_gm = 0;
cxlc_p2_day = 1;
cxlc_p2_flatness = 2;
cxlc_p2_a = 3;
cxlc_p2_c = 4;
cxlc_p2_year = 5;
cxlc_p2_orb = 6;
cxlc_p2_ecc = 7;
cxlc_p2_inc = 8;
cxlc_p2_lon = 9;
cxlc_p2_per = 10;
cxlc_p2_asc = 11;
cxlc_p2_orb_dt = 12;
cxlc_p2_ecc_dt = 13;
cxlc_p2_inc_dt = 14;
cxlc_p2_lon_dt = 15;
cxlc_p2_per_dt = 16;
cxlc_p2_asc_dt = 17;
cxlc_p2_cnt = 18;
lv_plsun_arr[0] = 0;
lv_plgeo_arr[0] = 0;
lv_pl_ind = cxlc_p1_prev_pl;
lv_pl_mtrx[0][0] = 0;
lv_pl_earth_year = cxearth_year;
lv_pl_jtwoktime = 1.0 / 64.0;
define lf_pl_init(plnt) {
   # local-use Bc lv_pl_ind;
   # local-use Bc lv_pl_mtrx[];
   if (lv_pl_ind < 0) {
      lv_pl_mtrx[cxlc_p1_sun][cxlc_p2_gm] = cxsun_gm;
      lv_pl_mtrx[cxlc_p1_sun][cxlc_p2_day] = cxsun_day;
      lv_pl_mtrx[cxlc_p1_sun][cxlc_p2_flatness] = cxsun_flatness;
      lv_pl_mtrx[cxlc_p1_sun][cxlc_p2_a] = cxsun_a;
      lv_pl_mtrx[cxlc_p1_sun][cxlc_p2_c] = cxsun_c;
      lv_pl_mtrx[cxlc_p1_sun][cxlc_p2_year] = cxsun_year;
      lv_pl_mtrx[cxlc_p1_sun][cxlc_p2_orb] = cxsun_orbit;
      lv_pl_mtrx[cxlc_p1_sun][cxlc_p2_ecc] = cxsun_eccentricity;
      lv_pl_mtrx[cxlc_p1_sun][cxlc_p2_inc] = cxsun_inclination;
      lv_pl_mtrx[cxlc_p1_sun][cxlc_p2_lon] = cxsun_longitude;
      lv_pl_mtrx[cxlc_p1_sun][cxlc_p2_per] = cxsun_periapsis;
      lv_pl_mtrx[cxlc_p1_sun][cxlc_p2_asc] = cxsun_ascending;
      lv_pl_mtrx[cxlc_p1_sun][cxlc_p2_orb_dt] = cxsun_orbit_dt;
      lv_pl_mtrx[cxlc_p1_sun][cxlc_p2_ecc_dt] = cxsun_eccentricity_dt;
      lv_pl_mtrx[cxlc_p1_sun][cxlc_p2_inc_dt] = cxsun_inclination_dt;
      lv_pl_mtrx[cxlc_p1_sun][cxlc_p2_lon_dt] = cxsun_longitude_dt;
      lv_pl_mtrx[cxlc_p1_sun][cxlc_p2_per_dt] = cxsun_periapsis_dt;
      lv_pl_mtrx[cxlc_p1_sun][cxlc_p2_asc_dt] = cxsun_ascending_dt;
      lv_pl_mtrx[cxlc_p1_mercury][cxlc_p2_gm] = cxmercury_gm;
      lv_pl_mtrx[cxlc_p1_mercury][cxlc_p2_day] = cxmercury_day;
      lv_pl_mtrx[cxlc_p1_mercury][cxlc_p2_flatness] = cxmercury_flatness;
      lv_pl_mtrx[cxlc_p1_mercury][cxlc_p2_a] = cxmercury_a;
      lv_pl_mtrx[cxlc_p1_mercury][cxlc_p2_c] = cxmercury_c;
      lv_pl_mtrx[cxlc_p1_mercury][cxlc_p2_year] = cxmercury_year;
      lv_pl_mtrx[cxlc_p1_mercury][cxlc_p2_orb] = cxmercury_orbit;
      lv_pl_mtrx[cxlc_p1_mercury][cxlc_p2_ecc] = cxmercury_eccentricity;
      lv_pl_mtrx[cxlc_p1_mercury][cxlc_p2_inc] = cxmercury_inclination;
      lv_pl_mtrx[cxlc_p1_mercury][cxlc_p2_lon] = cxmercury_longitude;
      lv_pl_mtrx[cxlc_p1_mercury][cxlc_p2_per] = cxmercury_periapsis;
      lv_pl_mtrx[cxlc_p1_mercury][cxlc_p2_asc] = cxmercury_ascending;
      lv_pl_mtrx[cxlc_p1_mercury][cxlc_p2_orb_dt] = cxmercury_orbit_dt;
      lv_pl_mtrx[cxlc_p1_mercury][cxlc_p2_ecc_dt] =\
               cxmercury_eccentricity_dt;
      lv_pl_mtrx[cxlc_p1_mercury][cxlc_p2_inc_dt] = cxmercury_inclination_dt;
      lv_pl_mtrx[cxlc_p1_mercury][cxlc_p2_lon_dt] = cxmercury_longitude_dt;
      lv_pl_mtrx[cxlc_p1_mercury][cxlc_p2_per_dt] = cxmercury_periapsis_dt;
      lv_pl_mtrx[cxlc_p1_mercury][cxlc_p2_asc_dt] = cxmercury_ascending_dt;
      lv_pl_mtrx[cxlc_p1_venus][cxlc_p2_gm] = cxvenus_gm;
      lv_pl_mtrx[cxlc_p1_venus][cxlc_p2_day] = cxvenus_day;
      lv_pl_mtrx[cxlc_p1_venus][cxlc_p2_flatness] = cxvenus_flatness;
      lv_pl_mtrx[cxlc_p1_venus][cxlc_p2_a] = cxvenus_a;
      lv_pl_mtrx[cxlc_p1_venus][cxlc_p2_c] = cxvenus_c;
      lv_pl_mtrx[cxlc_p1_venus][cxlc_p2_year] = cxvenus_year;
      lv_pl_mtrx[cxlc_p1_venus][cxlc_p2_orb] = cxvenus_orbit;
      lv_pl_mtrx[cxlc_p1_venus][cxlc_p2_ecc] = cxvenus_eccentricity;
      lv_pl_mtrx[cxlc_p1_venus][cxlc_p2_inc] = cxvenus_inclination;
      lv_pl_mtrx[cxlc_p1_venus][cxlc_p2_lon] = cxvenus_longitude;
      lv_pl_mtrx[cxlc_p1_venus][cxlc_p2_per] = cxvenus_periapsis;
      lv_pl_mtrx[cxlc_p1_venus][cxlc_p2_asc] = cxvenus_ascending;
      lv_pl_mtrx[cxlc_p1_venus][cxlc_p2_orb_dt] = cxvenus_orbit_dt;
      lv_pl_mtrx[cxlc_p1_venus][cxlc_p2_ecc_dt] = cxvenus_eccentricity_dt;
      lv_pl_mtrx[cxlc_p1_venus][cxlc_p2_inc_dt] = cxvenus_inclination_dt;
      lv_pl_mtrx[cxlc_p1_venus][cxlc_p2_lon_dt] = cxvenus_longitude_dt;
      lv_pl_mtrx[cxlc_p1_venus][cxlc_p2_per_dt] = cxvenus_periapsis_dt;
      lv_pl_mtrx[cxlc_p1_venus][cxlc_p2_asc_dt] = cxvenus_ascending_dt;
      lv_pl_mtrx[cxlc_p1_earth][cxlc_p2_gm] = cxearth_gm;
      lv_pl_mtrx[cxlc_p1_earth][cxlc_p2_day] = cxearth_day;
      lv_pl_mtrx[cxlc_p1_earth][cxlc_p2_flatness] = cxearth_flatness;
      lv_pl_mtrx[cxlc_p1_earth][cxlc_p2_a] = cxearth_a;
      lv_pl_mtrx[cxlc_p1_earth][cxlc_p2_c] = cxearth_c;
      lv_pl_mtrx[cxlc_p1_earth][cxlc_p2_year] = cxearth_year;
      lv_pl_mtrx[cxlc_p1_earth][cxlc_p2_orb] = cxearth_orbit;
      lv_pl_mtrx[cxlc_p1_earth][cxlc_p2_ecc] = cxearth_eccentricity;
      lv_pl_mtrx[cxlc_p1_earth][cxlc_p2_inc] = cxearth_inclination;
      lv_pl_mtrx[cxlc_p1_earth][cxlc_p2_lon] = cxearth_longitude;
      lv_pl_mtrx[cxlc_p1_earth][cxlc_p2_per] = cxearth_periapsis;
      lv_pl_mtrx[cxlc_p1_earth][cxlc_p2_asc] = cxearth_ascending;
      lv_pl_mtrx[cxlc_p1_earth][cxlc_p2_orb_dt] = cxearth_orbit_dt;
      lv_pl_mtrx[cxlc_p1_earth][cxlc_p2_ecc_dt] = cxearth_eccentricity_dt;
      lv_pl_mtrx[cxlc_p1_earth][cxlc_p2_inc_dt] = cxearth_inclination_dt;
      lv_pl_mtrx[cxlc_p1_earth][cxlc_p2_lon_dt] = cxearth_longitude_dt;
      lv_pl_mtrx[cxlc_p1_earth][cxlc_p2_per_dt] = cxearth_periapsis_dt;
      lv_pl_mtrx[cxlc_p1_earth][cxlc_p2_asc_dt] = cxearth_ascending_dt;
      lv_pl_mtrx[cxlc_p1_mars][cxlc_p2_gm] = cxmars_gm;
      lv_pl_mtrx[cxlc_p1_mars][cxlc_p2_day] = cxmars_day;
      lv_pl_mtrx[cxlc_p1_mars][cxlc_p2_flatness] = cxmars_flatness;
      lv_pl_mtrx[cxlc_p1_mars][cxlc_p2_a] = cxmars_a;
      lv_pl_mtrx[cxlc_p1_mars][cxlc_p2_c] = cxmars_c;
      lv_pl_mtrx[cxlc_p1_mars][cxlc_p2_year] = cxmars_year;
      lv_pl_mtrx[cxlc_p1_mars][cxlc_p2_orb] = cxmars_orbit;
      lv_pl_mtrx[cxlc_p1_mars][cxlc_p2_ecc] = cxmars_eccentricity;
      lv_pl_mtrx[cxlc_p1_mars][cxlc_p2_inc] = cxmars_inclination;
      lv_pl_mtrx[cxlc_p1_mars][cxlc_p2_lon] = cxmars_longitude;
      lv_pl_mtrx[cxlc_p1_mars][cxlc_p2_per] = cxmars_periapsis;
      lv_pl_mtrx[cxlc_p1_mars][cxlc_p2_asc] = cxmars_ascending;
      lv_pl_mtrx[cxlc_p1_mars][cxlc_p2_orb_dt] = cxmars_orbit_dt;
      lv_pl_mtrx[cxlc_p1_mars][cxlc_p2_ecc_dt] = cxmars_eccentricity_dt;
      lv_pl_mtrx[cxlc_p1_mars][cxlc_p2_inc_dt] = cxmars_inclination_dt;
      lv_pl_mtrx[cxlc_p1_mars][cxlc_p2_lon_dt] = cxmars_longitude_dt;
      lv_pl_mtrx[cxlc_p1_mars][cxlc_p2_per_dt] = cxmars_periapsis_dt;
      lv_pl_mtrx[cxlc_p1_mars][cxlc_p2_asc_dt] = cxmars_ascending_dt;
      lv_pl_mtrx[cxlc_p1_jupiter][cxlc_p2_gm] = cxjupiter_gm;
      lv_pl_mtrx[cxlc_p1_jupiter][cxlc_p2_day] = cxjupiter_day;
      lv_pl_mtrx[cxlc_p1_jupiter][cxlc_p2_flatness] = cxjupiter_flatness;
      lv_pl_mtrx[cxlc_p1_jupiter][cxlc_p2_a] = cxjupiter_a;
      lv_pl_mtrx[cxlc_p1_jupiter][cxlc_p2_c] = cxjupiter_c;
      lv_pl_mtrx[cxlc_p1_jupiter][cxlc_p2_year] = cxjupiter_year;
      lv_pl_mtrx[cxlc_p1_jupiter][cxlc_p2_orb] = cxjupiter_orbit;
      lv_pl_mtrx[cxlc_p1_jupiter][cxlc_p2_ecc] = cxjupiter_eccentricity;
      lv_pl_mtrx[cxlc_p1_jupiter][cxlc_p2_inc] = cxjupiter_inclination;
      lv_pl_mtrx[cxlc_p1_jupiter][cxlc_p2_lon] = cxjupiter_longitude;
      lv_pl_mtrx[cxlc_p1_jupiter][cxlc_p2_per] = cxjupiter_periapsis;
      lv_pl_mtrx[cxlc_p1_jupiter][cxlc_p2_asc] = cxjupiter_ascending;
      lv_pl_mtrx[cxlc_p1_jupiter][cxlc_p2_orb_dt] = cxjupiter_orbit_dt;
      lv_pl_mtrx[cxlc_p1_jupiter][cxlc_p2_ecc_dt] =\
               cxjupiter_eccentricity_dt;
      lv_pl_mtrx[cxlc_p1_jupiter][cxlc_p2_inc_dt] = cxjupiter_inclination_dt;
      lv_pl_mtrx[cxlc_p1_jupiter][cxlc_p2_lon_dt] = cxjupiter_longitude_dt;
      lv_pl_mtrx[cxlc_p1_jupiter][cxlc_p2_per_dt] = cxjupiter_periapsis_dt;
      lv_pl_mtrx[cxlc_p1_jupiter][cxlc_p2_asc_dt] = cxjupiter_ascending_dt;
      lv_pl_mtrx[cxlc_p1_saturn][cxlc_p2_gm] = cxsaturn_gm;
      lv_pl_mtrx[cxlc_p1_saturn][cxlc_p2_day] = cxsaturn_day;
      lv_pl_mtrx[cxlc_p1_saturn][cxlc_p2_flatness] = cxsaturn_flatness;
      lv_pl_mtrx[cxlc_p1_saturn][cxlc_p2_a] = cxsaturn_a;
      lv_pl_mtrx[cxlc_p1_saturn][cxlc_p2_c] = cxsaturn_c;
      lv_pl_mtrx[cxlc_p1_saturn][cxlc_p2_year] = cxsaturn_year;
      lv_pl_mtrx[cxlc_p1_saturn][cxlc_p2_orb] = cxsaturn_orbit;
      lv_pl_mtrx[cxlc_p1_saturn][cxlc_p2_ecc] = cxsaturn_eccentricity;
      lv_pl_mtrx[cxlc_p1_saturn][cxlc_p2_inc] = cxsaturn_inclination;
      lv_pl_mtrx[cxlc_p1_saturn][cxlc_p2_lon] = cxsaturn_longitude;
      lv_pl_mtrx[cxlc_p1_saturn][cxlc_p2_per] = cxsaturn_periapsis;
      lv_pl_mtrx[cxlc_p1_saturn][cxlc_p2_asc] = cxsaturn_ascending;
      lv_pl_mtrx[cxlc_p1_saturn][cxlc_p2_orb_dt] = cxsaturn_orbit_dt;
      lv_pl_mtrx[cxlc_p1_saturn][cxlc_p2_ecc_dt] = cxsaturn_eccentricity_dt;
      lv_pl_mtrx[cxlc_p1_saturn][cxlc_p2_inc_dt] = cxsaturn_inclination_dt;
      lv_pl_mtrx[cxlc_p1_saturn][cxlc_p2_lon_dt] = cxsaturn_longitude_dt;
      lv_pl_mtrx[cxlc_p1_saturn][cxlc_p2_per_dt] = cxsaturn_periapsis_dt;
      lv_pl_mtrx[cxlc_p1_saturn][cxlc_p2_asc_dt] = cxsaturn_ascending_dt;
      lv_pl_mtrx[cxlc_p1_uranus][cxlc_p2_gm] = cxuranus_gm;
      lv_pl_mtrx[cxlc_p1_uranus][cxlc_p2_day] = cxuranus_day;
      lv_pl_mtrx[cxlc_p1_uranus][cxlc_p2_flatness] = cxuranus_flatness;
      lv_pl_mtrx[cxlc_p1_uranus][cxlc_p2_a] = cxuranus_a;
      lv_pl_mtrx[cxlc_p1_uranus][cxlc_p2_c] = cxuranus_c;
      lv_pl_mtrx[cxlc_p1_uranus][cxlc_p2_year] = cxuranus_year;
      lv_pl_mtrx[cxlc_p1_uranus][cxlc_p2_orb] = cxuranus_orbit;
      lv_pl_mtrx[cxlc_p1_uranus][cxlc_p2_ecc] = cxuranus_eccentricity;
      lv_pl_mtrx[cxlc_p1_uranus][cxlc_p2_inc] = cxuranus_inclination;
      lv_pl_mtrx[cxlc_p1_uranus][cxlc_p2_lon] = cxuranus_longitude;
      lv_pl_mtrx[cxlc_p1_uranus][cxlc_p2_per] = cxuranus_periapsis;
      lv_pl_mtrx[cxlc_p1_uranus][cxlc_p2_asc] = cxuranus_ascending;
      lv_pl_mtrx[cxlc_p1_uranus][cxlc_p2_orb_dt] = cxuranus_orbit_dt;
      lv_pl_mtrx[cxlc_p1_uranus][cxlc_p2_ecc_dt] = cxuranus_eccentricity_dt;
      lv_pl_mtrx[cxlc_p1_uranus][cxlc_p2_inc_dt] = cxuranus_inclination_dt;
      lv_pl_mtrx[cxlc_p1_uranus][cxlc_p2_lon_dt] = cxuranus_longitude_dt;
      lv_pl_mtrx[cxlc_p1_uranus][cxlc_p2_per_dt] = cxuranus_periapsis_dt;
      lv_pl_mtrx[cxlc_p1_uranus][cxlc_p2_asc_dt] = cxuranus_ascending_dt;
      lv_pl_mtrx[cxlc_p1_neptune][cxlc_p2_gm] = cxneptune_gm;
      lv_pl_mtrx[cxlc_p1_neptune][cxlc_p2_day] = cxneptune_day;
      lv_pl_mtrx[cxlc_p1_neptune][cxlc_p2_flatness] = cxneptune_flatness;
      lv_pl_mtrx[cxlc_p1_neptune][cxlc_p2_a] = cxneptune_a;
      lv_pl_mtrx[cxlc_p1_neptune][cxlc_p2_c] = cxneptune_c;
      lv_pl_mtrx[cxlc_p1_neptune][cxlc_p2_year] = cxneptune_year;
      lv_pl_mtrx[cxlc_p1_neptune][cxlc_p2_orb] = cxneptune_orbit;
      lv_pl_mtrx[cxlc_p1_neptune][cxlc_p2_ecc] = cxneptune_eccentricity;
      lv_pl_mtrx[cxlc_p1_neptune][cxlc_p2_inc] = cxneptune_inclination;
      lv_pl_mtrx[cxlc_p1_neptune][cxlc_p2_lon] = cxneptune_longitude;
      lv_pl_mtrx[cxlc_p1_neptune][cxlc_p2_per] = cxneptune_periapsis;
      lv_pl_mtrx[cxlc_p1_neptune][cxlc_p2_asc] = cxneptune_ascending;
      lv_pl_mtrx[cxlc_p1_neptune][cxlc_p2_orb_dt] = cxneptune_orbit_dt;
      lv_pl_mtrx[cxlc_p1_neptune][cxlc_p2_ecc_dt] =\
               cxneptune_eccentricity_dt;
      lv_pl_mtrx[cxlc_p1_neptune][cxlc_p2_inc_dt] = cxneptune_inclination_dt;
      lv_pl_mtrx[cxlc_p1_neptune][cxlc_p2_lon_dt] = cxneptune_longitude_dt;
      lv_pl_mtrx[cxlc_p1_neptune][cxlc_p2_per_dt] = cxneptune_periapsis_dt;
      lv_pl_mtrx[cxlc_p1_neptune][cxlc_p2_asc_dt] = cxneptune_ascending_dt;
      lv_pl_mtrx[cxlc_p1_pluto][cxlc_p2_gm] = cxpluto_gm;
      lv_pl_mtrx[cxlc_p1_pluto][cxlc_p2_day] = cxpluto_day;
      lv_pl_mtrx[cxlc_p1_pluto][cxlc_p2_flatness] = cxpluto_flatness;
      lv_pl_mtrx[cxlc_p1_pluto][cxlc_p2_a] = cxpluto_a;
      lv_pl_mtrx[cxlc_p1_pluto][cxlc_p2_c] = cxpluto_c;
      lv_pl_mtrx[cxlc_p1_pluto][cxlc_p2_year] = cxpluto_year;
      lv_pl_mtrx[cxlc_p1_pluto][cxlc_p2_orb] = cxpluto_orbit;
      lv_pl_mtrx[cxlc_p1_pluto][cxlc_p2_ecc] = cxpluto_eccentricity;
      lv_pl_mtrx[cxlc_p1_pluto][cxlc_p2_inc] = cxpluto_inclination;
      lv_pl_mtrx[cxlc_p1_pluto][cxlc_p2_lon] = cxpluto_longitude;
      lv_pl_mtrx[cxlc_p1_pluto][cxlc_p2_per] = cxpluto_periapsis;
      lv_pl_mtrx[cxlc_p1_pluto][cxlc_p2_asc] = cxpluto_ascending;
      lv_pl_mtrx[cxlc_p1_pluto][cxlc_p2_orb_dt] = cxpluto_orbit_dt;
      lv_pl_mtrx[cxlc_p1_pluto][cxlc_p2_ecc_dt] = cxpluto_eccentricity_dt;
      lv_pl_mtrx[cxlc_p1_pluto][cxlc_p2_inc_dt] = cxpluto_inclination_dt;
      lv_pl_mtrx[cxlc_p1_pluto][cxlc_p2_lon_dt] = cxpluto_longitude_dt;
      lv_pl_mtrx[cxlc_p1_pluto][cxlc_p2_per_dt] = cxpluto_periapsis_dt;
      lv_pl_mtrx[cxlc_p1_pluto][cxlc_p2_asc_dt] = cxpluto_ascending_dt;
      lv_pl_mtrx[cxlc_p1_ceres][cxlc_p2_gm] = cxceres_gm;
      lv_pl_mtrx[cxlc_p1_ceres][cxlc_p2_day] = cxceres_day;
      lv_pl_mtrx[cxlc_p1_ceres][cxlc_p2_flatness] = cxceres_flatness;
      lv_pl_mtrx[cxlc_p1_ceres][cxlc_p2_a] = cxceres_a;
      lv_pl_mtrx[cxlc_p1_ceres][cxlc_p2_c] = cxceres_c;
      lv_pl_mtrx[cxlc_p1_ceres][cxlc_p2_year] = cxceres_year;
      lv_pl_mtrx[cxlc_p1_ceres][cxlc_p2_orb] = cxceres_orbit;
      lv_pl_mtrx[cxlc_p1_ceres][cxlc_p2_ecc] = cxceres_eccentricity;
      lv_pl_mtrx[cxlc_p1_ceres][cxlc_p2_inc] = cxceres_inclination;
      lv_pl_mtrx[cxlc_p1_ceres][cxlc_p2_lon] = cxceres_longitude;
      lv_pl_mtrx[cxlc_p1_ceres][cxlc_p2_per] = cxceres_periapsis;
      lv_pl_mtrx[cxlc_p1_ceres][cxlc_p2_asc] = cxceres_ascending;
      lv_pl_mtrx[cxlc_p1_ceres][cxlc_p2_orb_dt] = cxceres_orbit_dt;
      lv_pl_mtrx[cxlc_p1_ceres][cxlc_p2_ecc_dt] = cxceres_eccentricity_dt;
      lv_pl_mtrx[cxlc_p1_ceres][cxlc_p2_inc_dt] = cxceres_inclination_dt;
      lv_pl_mtrx[cxlc_p1_ceres][cxlc_p2_lon_dt] = cxceres_longitude_dt;
      lv_pl_mtrx[cxlc_p1_ceres][cxlc_p2_per_dt] = cxceres_periapsis_dt;
      lv_pl_mtrx[cxlc_p1_ceres][cxlc_p2_asc_dt] = cxceres_ascending_dt;
      lv_pl_mtrx[cxlc_p1_eris][cxlc_p2_gm] = cxeris_gm;
      lv_pl_mtrx[cxlc_p1_eris][cxlc_p2_day] = cxeris_day;
      lv_pl_mtrx[cxlc_p1_eris][cxlc_p2_flatness] = cxeris_flatness;
      lv_pl_mtrx[cxlc_p1_eris][cxlc_p2_a] = cxeris_a;
      lv_pl_mtrx[cxlc_p1_eris][cxlc_p2_c] = cxeris_c;
      lv_pl_mtrx[cxlc_p1_eris][cxlc_p2_year] = cxeris_year;
      lv_pl_mtrx[cxlc_p1_eris][cxlc_p2_orb] = cxeris_orbit;
      lv_pl_mtrx[cxlc_p1_eris][cxlc_p2_ecc] = cxeris_eccentricity;
      lv_pl_mtrx[cxlc_p1_eris][cxlc_p2_inc] = cxeris_inclination;
      lv_pl_mtrx[cxlc_p1_eris][cxlc_p2_lon] = cxeris_longitude;
      lv_pl_mtrx[cxlc_p1_eris][cxlc_p2_per] = cxeris_periapsis;
      lv_pl_mtrx[cxlc_p1_eris][cxlc_p2_asc] = cxeris_ascending;
      lv_pl_mtrx[cxlc_p1_eris][cxlc_p2_orb_dt] = cxeris_orbit_dt;
      lv_pl_mtrx[cxlc_p1_eris][cxlc_p2_ecc_dt] = cxeris_eccentricity_dt;
      lv_pl_mtrx[cxlc_p1_eris][cxlc_p2_inc_dt] = cxeris_inclination_dt;
      lv_pl_mtrx[cxlc_p1_eris][cxlc_p2_lon_dt] = cxeris_longitude_dt;
      lv_pl_mtrx[cxlc_p1_eris][cxlc_p2_per_dt] = cxeris_periapsis_dt;
      lv_pl_mtrx[cxlc_p1_eris][cxlc_p2_asc_dt] = cxeris_ascending_dt;
      lv_pl_mtrx[cxlc_p1_makemake][cxlc_p2_gm] = cxmakemake_gm;
      lv_pl_mtrx[cxlc_p1_makemake][cxlc_p2_day] = cxmakemake_day;
      lv_pl_mtrx[cxlc_p1_makemake][cxlc_p2_flatness] = cxmakemake_flatness;
      lv_pl_mtrx[cxlc_p1_makemake][cxlc_p2_a] = cxmakemake_a;
      lv_pl_mtrx[cxlc_p1_makemake][cxlc_p2_c] = cxmakemake_c;
      lv_pl_mtrx[cxlc_p1_makemake][cxlc_p2_year] = cxmakemake_year;
      lv_pl_mtrx[cxlc_p1_makemake][cxlc_p2_orb] = cxmakemake_orbit;
      lv_pl_mtrx[cxlc_p1_makemake][cxlc_p2_ecc] = cxmakemake_eccentricity;
      lv_pl_mtrx[cxlc_p1_makemake][cxlc_p2_inc] = cxmakemake_inclination;
      lv_pl_mtrx[cxlc_p1_makemake][cxlc_p2_lon] = cxmakemake_longitude;
      lv_pl_mtrx[cxlc_p1_makemake][cxlc_p2_per] = cxmakemake_periapsis;
      lv_pl_mtrx[cxlc_p1_makemake][cxlc_p2_asc] = cxmakemake_ascending;
      lv_pl_mtrx[cxlc_p1_makemake][cxlc_p2_orb_dt] = cxmakemake_orbit_dt;
      lv_pl_mtrx[cxlc_p1_makemake][cxlc_p2_ecc_dt] =\
               cxmakemake_eccentricity_dt;
      lv_pl_mtrx[cxlc_p1_makemake][cxlc_p2_inc_dt] =\
               cxmakemake_inclination_dt;
      lv_pl_mtrx[cxlc_p1_makemake][cxlc_p2_lon_dt] = cxmakemake_longitude_dt;
      lv_pl_mtrx[cxlc_p1_makemake][cxlc_p2_per_dt] = cxmakemake_periapsis_dt;
      lv_pl_mtrx[cxlc_p1_makemake][cxlc_p2_asc_dt] = cxmakemake_ascending_dt;
      lv_pl_mtrx[cxlc_p1_haumea][cxlc_p2_gm] = cxhaumea_gm;
      lv_pl_mtrx[cxlc_p1_haumea][cxlc_p2_day] = cxhaumea_day;
      lv_pl_mtrx[cxlc_p1_haumea][cxlc_p2_flatness] = cxhaumea_flatness;
      lv_pl_mtrx[cxlc_p1_haumea][cxlc_p2_a] = cxhaumea_a;
      lv_pl_mtrx[cxlc_p1_haumea][cxlc_p2_c] = cxhaumea_c;
      lv_pl_mtrx[cxlc_p1_haumea][cxlc_p2_year] = cxhaumea_year;
      lv_pl_mtrx[cxlc_p1_haumea][cxlc_p2_orb] = cxhaumea_orbit;
      lv_pl_mtrx[cxlc_p1_haumea][cxlc_p2_ecc] = cxhaumea_eccentricity;
      lv_pl_mtrx[cxlc_p1_haumea][cxlc_p2_inc] = cxhaumea_inclination;
      lv_pl_mtrx[cxlc_p1_haumea][cxlc_p2_lon] = cxhaumea_longitude;
      lv_pl_mtrx[cxlc_p1_haumea][cxlc_p2_per] = cxhaumea_periapsis;
      lv_pl_mtrx[cxlc_p1_haumea][cxlc_p2_asc] = cxhaumea_ascending;
      lv_pl_mtrx[cxlc_p1_haumea][cxlc_p2_orb_dt] = cxhaumea_orbit_dt;
      lv_pl_mtrx[cxlc_p1_haumea][cxlc_p2_ecc_dt] = cxhaumea_eccentricity_dt;
      lv_pl_mtrx[cxlc_p1_haumea][cxlc_p2_inc_dt] = cxhaumea_inclination_dt;
      lv_pl_mtrx[cxlc_p1_haumea][cxlc_p2_lon_dt] = cxhaumea_longitude_dt;
      lv_pl_mtrx[cxlc_p1_haumea][cxlc_p2_per_dt] = cxhaumea_periapsis_dt;
      lv_pl_mtrx[cxlc_p1_haumea][cxlc_p2_asc_dt] = cxhaumea_ascending_dt;
      if (0 < lv_pl_jtwoktime && lv_pl_jtwoktime < 1.0 / 32.0) {
         bcdummy = plsettime(uet2j2k(timee()));
      }
      lv_pl_earth_year = cxearth_year;
   }
   if (cxlc_p1_sun <= plnt && plnt < cxlc_p1_cnt) {
      lv_pl_ind = plnt;
   } else if (plnt == cxlc_p1_prev_pl) {
      if (lv_pl_ind < 0) {
         lv_pl_ind = cxlc_p1_earth;
      }
   } else {
      lv_pl_ind = cxlc_p1_prev_pl;
   }
   return (lv_pl_ind);
}
define lf_val(pa_ind,pb_bb,pb_bbd) {
   auto pl_ind,retvalu;
   if (pa_ind < cxlc_p1_prev_pl || cxlc_p1_cnt <= pa_ind) {
      retvalu = cxlc_p1_err;
   } else {
      pl_ind = pl(pa_ind);
      retvalu = (lv_pl_mtrx[pl_ind][pb_bb] + lv_pl_jtwoktime *\
               lv_pl_mtrx[pl_ind][pb_bbd]);
   }
   return (retvalu);
}
define pl(plnt) {
   return (lf_pl_init(plnt));
}
define plsettime(jtwokdate) {
   lv_pl_jtwoktime = jtwokdate * cxjday;
   return (lv_pl_jtwoktime);
}
define pl_gm(plnt) {
   # local-use Bc lv_pl_mtrx[];
   # local-use Bc lv_pl_ind;
   auto retvalu;
   bcdummy = lf_pl_init(plnt);
   if (cxlc_p1_sun <= plnt && plnt < cxlc_p1_cnt) {
      retvalu = lv_pl_mtrx[plnt][cxlc_p2_gm];
   } else if (plnt == cxlc_p1_prev_pl) {
      retvalu = lv_pl_mtrx[lv_pl_ind][cxlc_p2_gm];
   } else {
      retvalu = cxlc_p1_err;
   }
   return (retvalu);
}
define plgm() {
   # local-use Bc lv_pl_ind;
   return (pl_gm(cxlc_p1_prev_pl));
}
define pl_year(plnt) {
   # local-use Bc lv_pl_mtrx[];
   # local-use Bc lv_pl_ind;
   auto retvalu;
   bcdummy = lf_pl_init(plnt);
   if (cxlc_p1_sun <= plnt && plnt < cxlc_p1_cnt) {
      retvalu = lv_pl_mtrx[plnt][cxlc_p2_year];
   } else if (plnt == cxlc_p1_prev_pl) {
      retvalu = lv_pl_mtrx[lv_pl_ind][cxlc_p2_year];
   } else {
      retvalu = cxlc_p1_err;
   }
   return (retvalu);
}
define plyear() {
   # local-use Bc lv_pl_ind;
   return (pl_year(cxlc_p1_prev_pl));
}
define pl_day(plnt) {
   # local-use Bc lv_pl_mtrx[];
   # local-use Bc lv_pl_ind;
   auto retvalu;
   bcdummy = lf_pl_init(plnt);
   if (cxlc_p1_sun <= plnt && plnt < cxlc_p1_cnt) {
      retvalu = lv_pl_mtrx[plnt][cxlc_p2_day];
   } else if (plnt == cxlc_p1_prev_pl) {
      retvalu = lv_pl_mtrx[lv_pl_ind][cxlc_p2_day];
   } else {
      retvalu = cxlc_p1_err;
   }
   return (retvalu);
}
define plday() {
   # local-use Bc lv_pl_ind;
   return (pl_day(cxlc_p1_prev_pl));
}
define pl_flatness(plnt) {
   # local-use Bc lv_pl_mtrx[];
   # local-use Bc lv_pl_ind;
   auto retvalu;
   bcdummy = lf_pl_init(plnt);
   if (cxlc_p1_sun <= plnt && plnt < cxlc_p1_cnt) {
      retvalu = lv_pl_mtrx[plnt][cxlc_p2_flatness];
   } else if (plnt == cxlc_p1_prev_pl) {
      retvalu = lv_pl_mtrx[lv_pl_ind][cxlc_p2_flatness];
   } else {
      retvalu = cxlc_p1_err;
   }
   return (retvalu);
}
define plflatness() {
   # local-use Bc lv_pl_ind;
   return (pl_flatness(cxlc_p1_prev_pl));
}
define pl_a(plnt) {
   # local-use Bc lv_pl_mtrx[];
   # local-use Bc lv_pl_ind;
   auto retvalu;
   bcdummy = lf_pl_init(plnt);
   if (cxlc_p1_sun <= plnt && plnt < cxlc_p1_cnt) {
      retvalu = lv_pl_mtrx[plnt][cxlc_p2_a];
   } else if (plnt == cxlc_p1_prev_pl) {
      retvalu = lv_pl_mtrx[lv_pl_ind][cxlc_p2_a];
   } else {
      retvalu = cxlc_p1_err;
   }
   return (retvalu);
}
define pla() {
   # local-use Bc lv_pl_ind;
   return (pl_a(cxlc_p1_prev_pl));
}
define pl_c(plnt) {
   # local-use Bc lv_pl_mtrx[];
   # local-use Bc lv_pl_ind;
   auto retvalu;
   bcdummy = lf_pl_init(plnt);
   if (cxlc_p1_sun <= plnt && plnt < cxlc_p1_cnt) {
      retvalu = lv_pl_mtrx[plnt][cxlc_p2_c];
   } else if (plnt == cxlc_p1_prev_pl) {
      retvalu = lv_pl_mtrx[lv_pl_ind][cxlc_p2_c];
   } else {
      retvalu = cxlc_p1_err;
   }
   return (retvalu);
}
define plc() {
   # local-use Bc lv_pl_ind;
   return (pl_c(cxlc_p1_prev_pl));
}
define pl_orbit(plnt) {
   return (lf_val(plnt,cxlc_p2_orb,cxlc_p2_orb_dt));
}
define plorbit() {
   # local-use Bc lv_pl_ind;
   return (pl_orbit(cxlc_p1_prev_pl));
}
define pl_eccentricity(plnt) {
   return (lf_val(plnt,cxlc_p2_ecc,cxlc_p2_ecc_dt));
}
define pleccentricity() {
   # local-use Bc lv_pl_ind;
   return (pl_eccentricity(cxlc_p1_prev_pl));
}
define pl_inclination(plnt) {
   return (lf_val(plnt,cxlc_p2_inc,cxlc_p2_inc_dt));
}
define plinclination() {
   # local-use Bc lv_pl_ind;
   return (pl_inclination(cxlc_p1_prev_pl));
}
define pl_longitude(plnt) {
   return (lf_val(plnt,cxlc_p2_lon,cxlc_p2_lon_dt));
}
define pllongitude() {
   # local-use Bc lv_pl_ind;
   return (pl_longitude(cxlc_p1_prev_pl));
}
define pl_periapsis(plnt) {
   return (lf_val(plnt,cxlc_p2_per,cxlc_p2_per_dt));
}
define plperiapsis() {
   # local-use Bc lv_pl_ind;
   return (pl_periapsis(cxlc_p1_prev_pl));
}
define pl_ascending(plnt) {
   return (lf_val(plnt,cxlc_p2_asc,cxlc_p2_asc_dt));
}
define plascending() {
   # local-use Bc lv_pl_ind;
   return (pl_ascending(cxlc_p1_prev_pl));
}
define pl_mass(plnt) {
   auto retvalu;
   if (plnt < cxlc_p1_prev_pl || cxlc_p1_cnt <= plnt) {
      retvalu = cxlc_p1_err;
   } else {
      retvalu = pl_gm(plnt) / cxgravitation;
   }
   return (retvalu);
}
define plmass() {
   # local-use Bc lv_pl_ind;
   return (pl_mass(cxlc_p1_prev_pl));
}
define pl_b(plnt) {
   auto retvalu;
   if (plnt < cxlc_p1_prev_pl || cxlc_p1_cnt <= plnt) {
      retvalu = cxlc_p1_err;
   } else {
      retvalu = (1.0 - pl_flatness(plnt)) * pl_a(plnt);
   }
   return (retvalu);
}
define plb() {
   # local-use Bc lv_pl_ind;
   return (pl_b(cxlc_p1_prev_pl));
}
define pl_radius(plnt) {
   auto retvalu;
   if (plnt < cxlc_p1_prev_pl || cxlc_p1_cnt <= plnt) {
      retvalu = cxlc_p1_err;
   } else {
      retvalu = (pl_a(plnt) + pl_b(plnt) + pl_c(plnt)) / 3.0;
   }
   return (retvalu);
}
define plradius() {
   # local-use Bc lv_pl_ind;
   return (pl_radius(cxlc_p1_prev_pl));
}
define pl_gravity(plnt) {
   auto retvalu;
   if (plnt < cxlc_p1_prev_pl || cxlc_p1_cnt <= plnt) {
      retvalu = cxlc_p1_err;
   } else {
      retvalu = pl_gm(plnt) / square(pl_radius(plnt));
   }
   return (retvalu);
}
define plgravity() {
   # local-use Bc lv_pl_ind;
   return (pl_gravity(cxlc_p1_prev_pl));
}
define pl_meananomaly(plnt) {
   auto retvalu;
   if (plnt < cxlc_p1_prev_pl || cxlc_p1_cnt <= plnt) {
      retvalu = cxlc_p1_err;
   } else {
      retvalu = fmodu(pl_longitude(plnt) - pl_periapsis(plnt),cxtau);
   }
   return (retvalu);
}
define plmeananomaly() {
   # local-use Bc lv_pl_ind;
   return (pl_meananomaly(cxlc_p1_prev_pl));
}
define pl_escape(plnt) {
   auto retvalu;
   if (plnt < cxlc_p1_prev_pl || cxlc_p1_cnt <= plnt) {
      retvalu = cxlc_p1_err;
   } else {
      retvalu = sqrt(2.0 * pl_gm(plnt) / pl_radius(plnt));
   }
   return (retvalu);
}
define plescape() {
   # local-use Bc lv_pl_ind;
   return (pl_escape(cxlc_p1_prev_pl));
}
define pl_synodic(plnt) {
   # local-use Bc lv_pl_earth_year;
   auto yra,retvalu;
   if (plnt < cxlc_p1_prev_pl || cxlc_p1_cnt <= plnt) {
      retvalu = cxlc_p1_err;
   } else {
      yra = pl_year(plnt);
      retvalu = divi(yra * lv_pl_earth_year,abs(yra - lv_pl_earth_year),\
               0.0);
   }
   return (retvalu);
}
define plsynodic() {
   # local-use Bc lv_pl_ind;
   return (pl_synodic(cxlc_p1_prev_pl));
}
define pl_volume(plnt) {
   auto retvalu;
   if (plnt < cxlc_p1_prev_pl || cxlc_p1_cnt <= plnt) {
      retvalu = cxlc_p1_err;
   } else {
      retvalu = 2.0 * cxtau * pl_a(plnt) * pl_b(plnt) * pl_c(plnt) / 3.0;
   }
   return (retvalu);
}
define plvolume() {
   # local-use Bc lv_pl_ind;
   return (pl_volume(cxlc_p1_prev_pl));
}
define pl_surface(plnt) {
   auto retvalu;
   if (plnt < cxlc_p1_prev_pl || cxlc_p1_cnt <= plnt) {
      retvalu = cxlc_p1_err;
   } else {
      retvalu = ellipsoid_surface(pl_a(plnt),pl_b(plnt),pl_c(plnt));
   }
   return (retvalu);
}
define plsurface() {
   # local-use Bc lv_pl_ind;
   return (pl_surface(cxlc_p1_prev_pl));
}
define pl_density(plnt) {
   auto retvalu;
   if (plnt < cxlc_p1_prev_pl || cxlc_p1_cnt <= plnt) {
      retvalu = cxlc_p1_err;
   } else {
      retvalu = pl_mass(plnt) / pl_volume(plnt);
   }
   return (retvalu);
}
define pldensity() {
   # local-use Bc lv_pl_ind;
   return (pl_density(cxlc_p1_prev_pl));
}
define pl_argument(plnt) {
   auto retvalu;
   if (plnt < cxlc_p1_prev_pl || cxlc_p1_cnt <= plnt) {
      retvalu = cxlc_p1_err;
   } else {
      retvalu = pl_periapsis(plnt) - pl_ascending(plnt);
   }
   return (retvalu);
}
define plargument() {
   # local-use Bc lv_pl_ind;
   return (pl_argument(cxlc_p1_prev_pl));
}
define pl_margot(plnt) {
   auto retvalu;
   if (plnt < cxlc_p1_prev_pl || cxlc_p1_cnt <= plnt) {
      retvalu = cxlc_p1_err;
   } else {
      retvalu = margot(pl_mass(plnt),pl_orbit(plnt));
   }
   return (retvalu);
}
define plmargot() {
   # local-use Bc lv_pl_ind;
   return (pl_margot(cxlc_p1_prev_pl));
}
define pl_sternlevison(plnt) {
   auto retvalu;
   if (plnt < cxlc_p1_prev_pl || cxlc_p1_cnt <= plnt) {
      retvalu = cxlc_p1_err;
   } else {
      retvalu = sternlevison(pl_mass(plnt),pl_orbit(plnt));
   }
   return (retvalu);
}
define plsternlevison() {
   # local-use Bc lv_pl_ind;
   return (pl_sternlevison(cxlc_p1_prev_pl));
}
define pl_perihelion(plnt) {
   auto retvalu;
   if (plnt < cxlc_p1_prev_pl || cxlc_p1_cnt <= plnt) {
      retvalu = cxlc_p1_err;
   } else {
      retvalu = pl_orbit(plnt) * (1.0 - pl_eccentricity(plnt));
   }
   return (retvalu);
}
define plperihelion() {
   # local-use Bc lv_pl_ind;
   return (pl_perihelion(cxlc_p1_prev_pl));
}
define pl_aphelion(plnt) {
   auto retvalu;
   if (plnt < cxlc_p1_prev_pl || cxlc_p1_cnt <= plnt) {
      retvalu = cxlc_p1_err;
   } else {
      retvalu = pl_orbit(plnt) * (1.0 + pl_eccentricity(plnt));
   }
   return (retvalu);
}
define plaphelion() {
   # local-use Bc lv_pl_ind;
   return (pl_aphelion(cxlc_p1_prev_pl));
}
define eccentric_anomaly(mean_ano_rad,eccen) {
   auto mrad,xrad,nrvx_ii,nrvx_yy,nrvx_xx,nrvx_dy,nrvx_xp;
   mrad = fmodu(mean_ano_rad,tur2rad(1.0));
   xrad = mrad + eccen * sin(mrad);
   nrvx_xx = xrad;
   for (nrvx_ii = 0; nrvx_ii <= 20; nrvx_ii += 1) {
      nrvx_xp = nrvx_xx;
      nrvx_dy = 1.0 - eccen * cos(nrvx_xx);
      if (iszero(nrvx_dy)) {
         break;
      }
      nrvx_yy = nrvx_xx - eccen * sin(nrvx_xx) - mean_ano_rad;
      nrvx_xx -= nrvx_yy / nrvx_dy;
      if (iseq(nrvx_xp,nrvx_xx)) {
         break;
      }
   }
   return (nrvx_xx);
}
define pl_eccentricanomaly(plnt) {
   auto retvalu;
   if (plnt < cxlc_p1_prev_pl || cxlc_p1_cnt <= plnt) {
      retvalu = cxlc_p1_err;
   } else {
      retvalu = eccentric_anomaly(pl_meananomaly(plnt),\
               pl_eccentricity(plnt));
   }
   return (retvalu);
}
define pleccentricanomaly() {
   # local-use Bc lv_pl_ind;
   return (pl_eccentricanomaly(cxlc_p1_prev_pl));
}
define pl_heliocentric(plnt,jtwok) {
   # local-use Bc lv_plsun_arr[];
   # local-use Bc lv_plgeo_arr[];
   auto orb_m,eccen,inc_rad,lon_rad,per_rad,asc_rad,arg_rad,\
            mean_anomaly_rad,eano_rad,dxx_m,dyy_m,ci,co,cw,si,so,\
            sw,swci,cwci,obl_rad,retvalu;
   if (lf_pl_init(plnt) < 0.0) {
      retvalu = cxlc_p1_err;
   } else {
      bcdummy = plsettime(jtwok);
      orb_m = plorbit();
      eccen = pleccentricity();
      inc_rad = plinclination();
      lon_rad = pllongitude();
      per_rad = plperiapsis();
      asc_rad = plascending();
      arg_rad = per_rad - asc_rad;
      mean_anomaly_rad = fmod(lon_rad - per_rad,tur2rad(1.0));
      eano_rad = eccentric_anomaly(mean_anomaly_rad,eccen);
      dxx_m = orb_m * (cos(eano_rad) - eccen);
      dyy_m = orb_m * topyh1(eccen) * sin(eano_rad);
      cw = cos(arg_rad);
      sw = sin(arg_rad);
      co = cos(asc_rad);
      so = sin(asc_rad);
      ci = cos(inc_rad);
      si = sin(inc_rad);
      swci = sw * ci;
      cwci = cw * ci;
      lv_plsun_arr[0] = (dxx_m * (cw * co - swci * so) - dyy_m * (sw * co\
               + cwci * so));
      lv_plsun_arr[1] = (dxx_m * (cw * so + swci * co) - dyy_m * (sw * so\
               - cwci * co));
      lv_plsun_arr[2] = (dxx_m * (sw * si) + dyy_m * (cw * si));
      obl_rad = earthobliquity(jtwok);
      co = cos(obl_rad);
      so = sin(obl_rad);
      lv_plgeo_arr[0] = lv_plsun_arr[0];
      lv_plgeo_arr[1] = co * lv_plsun_arr[1] - so * lv_plsun_arr[2];
      lv_plgeo_arr[2] = so * lv_plsun_arr[1] + co * lv_plsun_arr[2];
      retvalu = hypot3(lv_plsun_arr[0],lv_plsun_arr[1],lv_plsun_arr[2]);
   }
   return (retvalu);
}
define plhelio(indd) {
   # local-use Bc lv_plsun_arr[];
   auto retvalu;
   if (0 <= indd && indd < 3) {
      retvalu = lv_plsun_arr[indd];
   } else {
      retvalu = 0.0;
   }
   return (retvalu);
}
define plgeo(indd) {
   # local-use Bc lv_plgeo_arr[];
   auto retvalu;
   if (0 <= indd && indd < 3) {
      retvalu = lv_plgeo_arr[indd];
   } else {
      retvalu = 0.0;
   }
   return (retvalu);
}
define pl_name(plnt) {
   auto plnt_ind;
   plnt_ind = lf_pl_init(plnt);
   if (plnt_ind == cxlc_p1_sun) {
      print "SUN      ";
   } else if (plnt_ind == cxlc_p1_mercury) {
      print "MERCURY  ";
   } else if (plnt_ind == cxlc_p1_venus) {
      print "VENUS    ";
   } else if (plnt_ind == cxlc_p1_earth) {
      print "EARTH    ";
   } else if (plnt_ind == cxlc_p1_mars) {
      print "MARS     ";
   } else if (plnt_ind == cxlc_p1_jupiter) {
      print "JUPITER  ";
   } else if (plnt_ind == cxlc_p1_saturn) {
      print "SATURN   ";
   } else if (plnt_ind == cxlc_p1_uranus) {
      print "URANUS   ";
   } else if (plnt_ind == cxlc_p1_neptune) {
      print "NEPTUNE  ";
   } else if (plnt_ind == cxlc_p1_pluto) {
      print "PLUTO    ";
   } else if (plnt_ind == cxlc_p1_ceres) {
      print "CERES    ";
   } else if (plnt_ind == cxlc_p1_eris) {
      print "ERIS     ";
   } else if (plnt_ind == cxlc_p1_makemake) {
      print "MAKEMAKE ";
   } else if (plnt_ind == cxlc_p1_haumea) {
      print "HAUMEA   ";
   } else {
      print "UNKNOWN";
      print plnt_ind;
   }
   return (plnt_ind);
}
define plname() {
   # local-use Bc lv_pl_ind;
   return (pl_name(cxlc_p1_prev_pl));
}
define earthradius(lat_deg) {
   return (pl_aradius(cxlc_p1_earth,lat_deg));
}
define earthtropicalyear(jtwokdate) {
   auto jy;
   jy = jtwokdate * cxday / cxjyear;
   return (((((2.64 * 10^-16) * jy - (7.29 * 10^-14)) * jy - (6.15359 *\
            10^-8)) * jy + 365.2421896698));
}
define earthdistance(lata_deg,lona_deg,latb_deg,lonb_deg) {
   return (cxearth_a * great_circle_distance(deg2rad(lata_deg),\
            deg2rad(lona_deg),deg2rad(latb_deg),deg2rad(lonb_deg)));
}
define plaradius(lat_deg) {
   auto calat,sblat,aa,bb;
   aa = square(pla());
   bb = square(plb());
   calat = square(pla() * cosd(lat_deg));
   sblat = square(plb() * sind(lat_deg));
   return (sqrt((aa * calat + bb * sblat) / (calat + sblat)));
}
define pl_aradius(plnt,lat_deg) {
   bcdummy = pl(plnt);
   return (plaradius(lat_deg));
}
define earthobliquity(jtwok) {
   auto tmill,ob_arcsec;
   tmill = jtwok * cxday / ((1.0 * 10^4) * cxjyear);
   ob_arcsec = (((((((((((2.45) * tmill + 5.79) * tmill + 27.8) * tmill +\
            7.12) * tmill - 39.05) * tmill - 249.67) * tmill - 51.38) *\
            tmill + 1999.25) * tmill - 1.55) * tmill - 4680.93) * tmill +\
            84381.448);
   return (sec2rad(ob_arcsec));
}
define earthprecession(jtwok) {
   auto tmill,ob_arcsec;
   tmill = jtwok * cxday / ((1.0 * 10^4) * cxjyear);
   ob_arcsec = ((((((((((-8.66) * tmill - 47.59) * tmill + 24.24) * tmill\
            + 130.95) * tmill + 174.51) * tmill - 180.55) * tmill -\
            2353.16) * tmill + 77.32) * tmill + 11119.71) * tmill +\
            502909.66) * tmill + 0.0;
   return (sec2rad(ob_arcsec));
}
cxearth_gravitya = 9.7803253359 * cxmpss;
cxearth_gravityb = 9.8321849378 * cxmpss;
define earthgravity(lat_deg) {
   auto slatsq,obltsq,kk;
   slatsq = square(sind(lat_deg));
   obltsq = cxearth_flatness * (2.0 - cxearth_flatness);
   kk = (((1.0 - cxearth_flatness) * cxearth_gravityb) - cxearth_gravitya);
   return ((cxearth_gravitya + kk * slatsq) / sqrt(1.0 - obltsq * slatsq));
}
define earthgravity_height(lat_deg,height_m) {
   return ((earthgravity(lat_deg) - height_m * 2.0 * cxearth_gm /\
            cube(cxearth_a)));
}
cxlc_isa_cnt = 12;
cxlc_isa_temp = 0;
cxlc_isa_pres = 1;
cxlc_isa_dens = 2;
cxlc_isa_height = 3;
cxlc_isa_key_cnt = 4;
lv_isa_mtrx[0][0] = 0;
lv_isa_magic = 0.0;
define lf_isa_calc(height_m,state_x) {
   # local-use Bc lv_isa_mtrx[];
   # local-use Bc lv_isa_magic;
   auto h_ind,air_k_per_m,expon,this_temp,delta_h,retvalu,tdiff,\
            hdiff,lapse_kpm;
   if (! ismagic(lv_isa_magic)) {
      lv_isa_mtrx[0][cxlc_isa_height] = 0.0;
      lv_isa_mtrx[0][cxlc_isa_temp] = 288.15;
      lv_isa_mtrx[0][cxlc_isa_pres] = cxatm;
      lv_isa_mtrx[0][cxlc_isa_dens] = 1.2250;
      lv_isa_mtrx[1][cxlc_isa_height] = (1.1 * 10^4);
      lv_isa_mtrx[1][cxlc_isa_temp] = 216.65;
      lv_isa_mtrx[1][cxlc_isa_pres] = 22632.10;
      lv_isa_mtrx[1][cxlc_isa_dens] = 0.36391;
      lv_isa_mtrx[2][cxlc_isa_height] = (2.0 * 10^4);
      lv_isa_mtrx[2][cxlc_isa_temp] = 216.65;
      lv_isa_mtrx[2][cxlc_isa_pres] = 5474.89;
      lv_isa_mtrx[2][cxlc_isa_dens] = 0.08803;
      lv_isa_mtrx[3][cxlc_isa_height] = (3.2 * 10^4);
      lv_isa_mtrx[3][cxlc_isa_temp] = 228.65;
      lv_isa_mtrx[3][cxlc_isa_pres] = 868.02;
      lv_isa_mtrx[3][cxlc_isa_dens] = 0.01322;
      lv_isa_mtrx[4][cxlc_isa_height] = (4.7 * 10^4);
      lv_isa_mtrx[4][cxlc_isa_temp] = 270.65;
      lv_isa_mtrx[4][cxlc_isa_pres] = 110.91;
      lv_isa_mtrx[4][cxlc_isa_dens] = 0.00143;
      lv_isa_mtrx[5][cxlc_isa_height] = (5.1 * 10^4);
      lv_isa_mtrx[5][cxlc_isa_temp] = 270.65;
      lv_isa_mtrx[5][cxlc_isa_pres] = 66.94;
      lv_isa_mtrx[5][cxlc_isa_dens] = (8.6 * 10^-4);
      lv_isa_mtrx[6][cxlc_isa_height] = (7.1 * 10^4);
      lv_isa_mtrx[6][cxlc_isa_temp] = 214.65;
      lv_isa_mtrx[6][cxlc_isa_pres] = 3.96;
      lv_isa_mtrx[6][cxlc_isa_dens] = (6.4 * 10^-5);
      lv_isa_mtrx[7][cxlc_isa_height] = 84852;
      lv_isa_mtrx[7][cxlc_isa_temp] = 186.87;
      lv_isa_mtrx[7][cxlc_isa_pres] = 0.3734;
      lv_isa_mtrx[7][cxlc_isa_dens] = (7.0 * 10^-6);
      lv_isa_mtrx[8][cxlc_isa_height] = 89700;
      lv_isa_mtrx[8][cxlc_isa_temp] = 186.87;
      lv_isa_mtrx[8][cxlc_isa_pres] = 0.15;
      lv_isa_mtrx[8][cxlc_isa_dens] = (3.0 * 10^-6);
      lv_isa_mtrx[9][cxlc_isa_height] = 100400;
      lv_isa_mtrx[9][cxlc_isa_temp] = 199.55;
      lv_isa_mtrx[9][cxlc_isa_pres] = 0.02;
      lv_isa_mtrx[9][cxlc_isa_dens] = (5.0 * 10^-7);
      lv_isa_mtrx[10][cxlc_isa_height] = 105000;
      lv_isa_mtrx[10][cxlc_isa_temp] = 217.65;
      lv_isa_mtrx[10][cxlc_isa_pres] = 0.01;
      lv_isa_mtrx[10][cxlc_isa_dens] = (2.0 * 10^-7);
      lv_isa_mtrx[11][cxlc_isa_height] = 110000;
      lv_isa_mtrx[11][cxlc_isa_temp] = 263.95;
      lv_isa_mtrx[11][cxlc_isa_pres] = 0.01;
      lv_isa_mtrx[11][cxlc_isa_dens] = (1.0 * 10^-7);
      lv_isa_magic = magicset();
   }
   h_ind = cxlc_isa_cnt - 1;
   while (height_m < lv_isa_mtrx[h_ind][cxlc_isa_height] && 0 < h_ind) {
      h_ind -= 1;
   }
   delta_h = height_m - lv_isa_mtrx[h_ind][cxlc_isa_height];
   if (h_ind < cxlc_isa_cnt - 1) {
      tdiff = lv_isa_mtrx[h_ind + 1][cxlc_isa_temp] -\
               lv_isa_mtrx[h_ind][cxlc_isa_temp];
      hdiff = lv_isa_mtrx[h_ind + 1][cxlc_isa_height] -\
               lv_isa_mtrx[h_ind][cxlc_isa_height];
      lapse_kpm = tdiff / hdiff;
   } else {
      lapse_kpm = 0.003;
   }
   this_temp = lv_isa_mtrx[h_ind][cxlc_isa_temp] + lapse_kpm * delta_h;
   if (state_x == cxlc_isa_temp) {
      retvalu = this_temp;
   } else {
      air_k_per_m = cxgravity * cxair_mass / cxgas;
      if (iszero(lapse_kpm)) {
         retvalu = exp(-air_k_per_m * delta_h /\
                  lv_isa_mtrx[h_ind][cxlc_isa_temp]);
      } else {
         expon = air_k_per_m / lapse_kpm;
         if (state_x == cxlc_isa_dens) {
            expon += 1;
         }
         retvalu = pow(lv_isa_mtrx[h_ind][cxlc_isa_temp] / this_temp,expon);
      }
      if (state_x == cxlc_isa_pres) {
         retvalu *= lv_isa_mtrx[h_ind][cxlc_isa_pres];
      } else {
         retvalu *= lv_isa_mtrx[h_ind][cxlc_isa_dens];
      }
   }
   return (retvalu);
}
define isa_temp(height_m) {
   return (lf_isa_calc(height_m,cxlc_isa_temp));
}
define isa_pres(height_m) {
   return (lf_isa_calc(height_m,cxlc_isa_pres));
}
define isa_dens(height_m) {
   return (lf_isa_calc(height_m,cxlc_isa_dens));
}
define vin_distance(lata_deg,lona_deg,latb_deg,lonb_deg,\
         *ret_bearings_arr_p[]) {
   auto retvalu,rad_arr[];
   retvalu = cxearth_a * ellipsoid_distance(cxearth_flatness,\
            deg2rad(lata_deg),deg2rad(lona_deg),deg2rad(latb_deg),\
            deg2rad(lonb_deg),rad_arr[]);
   ret_bearings_arr_p[0] = rad2deg(rad_arr[0]);
   ret_bearings_arr_p[1] = rad2deg(rad_arr[1]);
   return (retvalu);
}
define vin_destination(lata_deg,lona_deg,heading_deg,dist_m,\
         *ret_dest_arr_p[]) {
   auto fltnss,retvalu,rad_arr[];
   fltnss = cxearth_flatness;
   retvalu = ellipsoid_destination(fltnss,deg2rad(lata_deg),\
            deg2rad(lona_deg),deg2rad(heading_deg),dist_m / cxearth_a,\
            rad_arr[]);
   ret_dest_arr_p[0] = rad2deg(rad_arr[0]);
   ret_dest_arr_p[1] = rad2deg(rad_arr[1]);
   return (rad2deg(retvalu));
}
cxlc_prem_dens = 0;
cxlc_prem_mass = 1;
cxlc_prem_xheight = 0;
cxlc_prem_xcoea = 1;
cxlc_prem_xcoeb = 2;
cxlc_prem_xcoec = 3;
cxlc_prem_xmassd = 4;
lv_prem_mtrx[0][0] = 0;
lv_prem_magic = 0.0;
define lf_prem(height_m,state_x) {
   auto coec,coeb,coea,hght_i,hght_j,retvalu,mass_a,mass_b,mass_i\
            ,mass_ip,ii;
   if (! ismagic(lv_prem_magic)) {
      lv_prem_mtrx[0][cxlc_prem_xheight] = 0.0;
      lv_prem_mtrx[0][cxlc_prem_xcoea] = 0.0;
      lv_prem_mtrx[0][cxlc_prem_xcoeb] = 0.0;
      lv_prem_mtrx[0][cxlc_prem_xcoec] = 0.0;
      lv_prem_mtrx[1][cxlc_prem_xheight] = (1.2215 * 10^6);
      lv_prem_mtrx[1][cxlc_prem_xcoea] = (1.3088 * 10^4);
      lv_prem_mtrx[1][cxlc_prem_xcoeb] = (1.911 * 10^-8);
      lv_prem_mtrx[1][cxlc_prem_xcoec] = -(2.1773 * 10^-10);
      lv_prem_mtrx[2][cxlc_prem_xheight] = (3.480 * 10^6);
      lv_prem_mtrx[2][cxlc_prem_xcoea] = (1.2346 * 10^4);
      lv_prem_mtrx[2][cxlc_prem_xcoeb] = (1.3976 * 10^-4);
      lv_prem_mtrx[2][cxlc_prem_xcoec] = -(2.4123 * 10^-10);
      lv_prem_mtrx[3][cxlc_prem_xheight] = (3.630 * 10^6);
      lv_prem_mtrx[3][cxlc_prem_xcoea] = (7.3067 * 10^3);
      lv_prem_mtrx[3][cxlc_prem_xcoeb] = -(5.0007 * 10^-4);
      lv_prem_mtrx[3][cxlc_prem_xcoec] = 0.0;
      lv_prem_mtrx[4][cxlc_prem_xheight] = (5.701 * 10^6);
      lv_prem_mtrx[4][cxlc_prem_xcoea] = (6.7823 * 10^3);
      lv_prem_mtrx[4][cxlc_prem_xcoeb] = -(2.4441 * 10^-4);
      lv_prem_mtrx[4][cxlc_prem_xcoec] = -(3.0922 * 10^-11);
      lv_prem_mtrx[5][cxlc_prem_xheight] = (5.771 * 10^6);
      lv_prem_mtrx[5][cxlc_prem_xcoea] = (5.3197 * 10^3);
      lv_prem_mtrx[5][cxlc_prem_xcoeb] = -(2.3286 * 10^-4);
      lv_prem_mtrx[5][cxlc_prem_xcoec] = 0.0;
      lv_prem_mtrx[6][cxlc_prem_xheight] = (5.971 * 10^6);
      lv_prem_mtrx[6][cxlc_prem_xcoea] = (1.1249 * 10^4);
      lv_prem_mtrx[6][cxlc_prem_xcoeb] = -(1.2603 * 10^-3);
      lv_prem_mtrx[6][cxlc_prem_xcoec] = 0.0;
      lv_prem_mtrx[7][cxlc_prem_xheight] = (6.151 * 10^6);
      lv_prem_mtrx[7][cxlc_prem_xcoea] = (7.1083 * 10^3);
      lv_prem_mtrx[7][cxlc_prem_xcoeb] = -(5.9706 * 10^-4);
      lv_prem_mtrx[7][cxlc_prem_xcoec] = 0.0;
      lv_prem_mtrx[8][cxlc_prem_xheight] = (6.3466 * 10^6);
      lv_prem_mtrx[8][cxlc_prem_xcoea] = (2.691 * 10^3);
      lv_prem_mtrx[8][cxlc_prem_xcoeb] = (1.0869 * 10^-4);
      lv_prem_mtrx[8][cxlc_prem_xcoec] = 0.0;
      lv_prem_mtrx[9][cxlc_prem_xheight] = (6.356 * 10^6);
      lv_prem_mtrx[9][cxlc_prem_xcoea] = (2.9 * 10^3);
      lv_prem_mtrx[9][cxlc_prem_xcoeb] = 0.0;
      lv_prem_mtrx[9][cxlc_prem_xcoec] = 0.0;
      lv_prem_mtrx[10][cxlc_prem_xheight] = (6.368 * 10^6);
      lv_prem_mtrx[10][cxlc_prem_xcoea] = (2.6 * 10^3);
      lv_prem_mtrx[10][cxlc_prem_xcoeb] = 0.0;
      lv_prem_mtrx[10][cxlc_prem_xcoec] = 0.0;
      lv_prem_mtrx[11][cxlc_prem_xheight] = (6.371 * 10^6);
      lv_prem_mtrx[11][cxlc_prem_xcoea] = (1.02 * 10^3);
      lv_prem_mtrx[11][cxlc_prem_xcoeb] = 0.0;
      lv_prem_mtrx[11][cxlc_prem_xcoec] = 0.0;
      lv_prem_mtrx[0][cxlc_prem_xmassd] = 0.0;
      mass_i = 0.0;
      for (ii = 1; ii <= 11; ii += 1) {
         hght_i = lv_prem_mtrx[ii - 1][cxlc_prem_xheight];
         mass_b = 2.0 * cxtau * hght_i * hght_i * hght_i *\
                  ((lv_prem_mtrx[ii][cxlc_prem_xcoec] / 5.0 * hght_i +\
                  lv_prem_mtrx[ii][cxlc_prem_xcoeb] / 4.0) * hght_i +\
                  lv_prem_mtrx[ii][cxlc_prem_xcoea] / 3.0);
         hght_j = lv_prem_mtrx[ii][cxlc_prem_xheight];
         mass_a = 2.0 * cxtau * hght_j * hght_j * hght_j *\
                  ((lv_prem_mtrx[ii][cxlc_prem_xcoec] / 5.0 * hght_j +\
                  lv_prem_mtrx[ii][cxlc_prem_xcoeb] / 4.0) * hght_j +\
                  lv_prem_mtrx[ii][cxlc_prem_xcoea] / 3.0);
         mass_ip = mass_i;
         mass_i += (mass_a - mass_b);
         lv_prem_mtrx[ii][cxlc_prem_xmassd] = mass_ip - mass_b;
      }
      lv_prem_magic = magicset();
   }
   if (height_m <= 0.0) {
      retvalu = 0.0;
   } else if (cxearth_radius < height_m) {
      if (state_x == 0) {
         retvalu = 0.0;
      } else {
         retvalu = cxearth_mass;
      }
   } else {
      ii = 0;
      while (lv_prem_mtrx[ii][cxlc_prem_xheight] < height_m) {
         ii += 1;
      }
      coea = lv_prem_mtrx[ii][cxlc_prem_xcoea];
      coeb = lv_prem_mtrx[ii][cxlc_prem_xcoeb];
      coec = lv_prem_mtrx[ii][cxlc_prem_xcoec];
      if (state_x == 0) {
         retvalu = (coec * height_m + coeb) * height_m + coea;
      } else if (state_x == 1) {
         hght_i = lv_prem_mtrx[ii][cxlc_prem_xheight];
         coec /= 5.0;
         coeb /= 4.0;
         coea /= 3.0;
         mass_a = 2.0 * cxtau * height_m * height_m * height_m * ((coec *\
                  height_m + coeb) * height_m + coea);
         retvalu = mass_a + lv_prem_mtrx[ii][cxlc_prem_xmassd];
      }
   }
   return (retvalu);
}
define prem_density(height_m) {
   return (lf_prem(height_m,cxlc_prem_dens));
}
define prem_mass(height_m) {
   return (lf_prem(height_m,cxlc_prem_mass));
}
define prem_g(height_m) {
   auto retvalu;
   if (height_m <= 0.0) {
      retvalu = 0.0;
   } else {
      retvalu = cxgravitation * prem_mass(height_m) / (height_m * height_m);
   }
   return (retvalu);
}
#   DDDDDDDDDDescription ############################ kwplanets_description #
define kwplanets_description() {
   print "Usage: bcc [Expression]\n";
   print "   Kwplanets 0-ary Functions: pla plaphelion plargument plascendi";
   print "ng plb plc plday pldensity pleccentricanomaly pleccentricity ples";
   print "cape plflatness plgm plgravity plinclination pllongitude plmargot";
   print " plmass plmeananomaly plname plorbit plperiapsis plperihelion plr";
   print "adius plsternlevison plsurface plsynodic plvolume plyear";
   print "\n";
   print "   Kwplanets 1-ary Functions: earthgravity earthobliquity earthpr";
   print "ecession earthradius earthtropicalyear isa_dens isa_pres isa_temp";
   print " pl pl_a pl_aphelion pl_argument pl_ascending pl_b pl_c pl_day pl";
   print "_density pl_eccentricanomaly pl_eccentricity pl_escape pl_flatnes";
   print "s pl_gm pl_gravity pl_inclination pl_longitude pl_margot pl_mass ";
   print "pl_meananomaly pl_name pl_orbit pl_periapsis pl_perihelion pl_rad";
   print "ius pl_sternlevison pl_surface pl_synodic pl_volume pl_year plara";
   print "dius plgeo plhelio plsettime prem_density prem_g prem_mass";
   print "\n";
   print "   Kwplanets 2-ary Functions: earthgravity_height eccentric_anoma";
   print "ly margot orbit_v orbitgm_v pl_aradius pl_heliocentric sternlevis";
   print "on";
   print "\n";
   print "   Kwplanets 4-ary Functions: earthdistance";
   print "\n";
   print "   Kwplanets 5-ary Functions: vin_destination vin_distance";
   print "\n";
}
define kwplanets_desc() {
   print "Usage: bcc [Expression]\n";
   print "   Kwplanets 0-ary Functions: pla(phelion|rgument|scending)? plb ";
   print "plc pld(ay|ensity) ple(ccentric(anomaly|ity)|scape) plflatness pl";
   print "g(m|ravity) plinclination pllongitude plm(a(rgot|ss)|eananomaly) ";
   print "plname plorbit plperi(apsis|helion) plradius pls(ternlevison|urfa";
   print "ce|ynodic) plvolume plyear";
   print "\n";
   print "   Kwplanets 1-ary Functions: earth(gravity|obliquity|precession|";
   print "radius|tropicalyear) isa_(dens|pres|temp) pl pl_(a(phelion|rgumen";
   print "t|scending)?|b|c|d(ay|ensity)|e(ccentric(anomaly|ity)|scape)|flat";
   print "ness|g(m|ravity)|inclination|longitude|m(a(rgot|ss)|eananomaly)|n";
   print "ame|orbit|peri(apsis|helion)|radius|s(ternlevison|urface|ynodic)|";
   print "volume|year) plaradius plgeo plhelio plsettime prem_(density|g|ma";
   print "ss)";
   print "\n";
   print "   Kwplanets 2-ary Functions: earthgravity_height eccentric_anoma";
   print "ly margot orbit(_v|gm_v) pl_(aradius|heliocentric) sternlevison";
   print "\n";
   print "   Kwplanets 4-ary Functions: earthdistance";
   print "\n";
   print "   Kwplanets 5-ary Functions: vin_d(estination|istance)";
   print "\n";
}
