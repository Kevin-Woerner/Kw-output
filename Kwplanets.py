#    Copyright (C) 2021 by Kevin D. Woerner
##-# =KDW= ########## DO NOT EDIT -- AUTOGENERATED CODE #########
##-# =KDW= ############ BUILDER $KWROOT/0lib/vkkcp.sh ###########
##-# =KDW= ##### SRC $KWROOT/codekdw/kw-lib/Kwplanets.fwipp #####
# 2021-01-05 kdw  For Changelog, See File varylog
import sys
import math
import time
import Kw
import Kwelements
EARTHSIDEREALDAY = Kw.DAY / 1.002737909350795
EARTHSTELLARDAY = Kw.DAY / 1.00273781191135448
EARTHTROPICALYEAR = 365.242190402 * Kw.DAY
EARTHSIDEREALYEAR = 365.256363004 * Kw.DAY
EARTHANOMALISTICYEAR = 365.259636 * Kw.DAY
SIDEREALYEAR = EARTHSIDEREALYEAR
ANOMALISTICYEAR = EARTHANOMALISTICYEAR
TROPICALYEAR = EARTHTROPICALYEAR
STELLARDAY = EARTHSTELLARDAY
SIDEREALDAY = EARTHSIDEREALDAY
SUNGMNASA = 1.32712440018E+20 * Kw.UNITGM
SUNGMIERS = 1.32712442099E+20 * Kw.UNITGM
SUNGM = SUNGMNASA
SUNYEAR = 0.0 * Kw.DAY
SUNDAY = 24.47 * Kw.DAY
SUNFLATNESS = 9.0E-6
SUN_A = 6.957E+8 * Kw.METER
SUN_C = SUN_A
SUN_B = SUN_A * (1.0 - SUNFLATNESS)
SUNRADIUS = (SUN_A + SUN_B + SUN_C) / 3.0
SUNESCAPE = math.sqrt(2.0 * SUNGM / SUNRADIUS)
SUNOBLATENESS = math.sqrt(SUNFLATNESS * (2.0 - SUNFLATNESS))
SUNGRAVITY = SUNGM / (SUNRADIUS * SUNRADIUS)
SUNMASS = SUNGM / Kw.GRAVITATION
SUNVOLUME = 2.0 * Kw.TAU / 3.0 * SUNRADIUS * SUNRADIUS *\
      SUNRADIUS
SUNSURFACE = 2.0 * Kw.TAU * SUNRADIUS * SUNRADIUS
SUNDENSITY = SUNMASS / SUNVOLUME
MERCURYGM = 2.2032E+13 * Kw.UNITGM
MERCURYYEAR = 87.9691 * Kw.DAY
MERCURYDAY = 58.6462 * Kw.DAY
MERCURYFLATNESS = 0.0
MERCURY_A = 2.4397E+6 * Kw.METER
MERCURY_C = MERCURY_A
MERCURY_B = MERCURY_A * (1.0 - MERCURYFLATNESS)
MERCURYRADIUS = (MERCURY_A + MERCURY_B + MERCURY_C) / 3.0
MERCURYESCAPE = math.sqrt(2.0 * MERCURYGM / MERCURYRADIUS)
MERCURYOBLATENESS = math.sqrt(MERCURYFLATNESS * (2.0 -\
      MERCURYFLATNESS))
MERCURYGRAVITY = MERCURYGM / (MERCURYRADIUS * MERCURYRADIUS)
MERCURYMASS = MERCURYGM / Kw.GRAVITATION
MERCURYVOLUME = 2.0 * Kw.TAU / 3.0 * MERCURYRADIUS *\
      MERCURYRADIUS * MERCURYRADIUS
MERCURYSURFACE = 2.0 * Kw.TAU * MERCURYRADIUS * MERCURYRADIUS
MERCURYDENSITY = MERCURYMASS / MERCURYVOLUME
MERCURYSYNODIC = MERCURYYEAR * EARTHSIDEREALYEAR /\
      (MERCURYYEAR - EARTHSIDEREALYEAR)
VENUSGM = 3.24859E+14 * Kw.UNITGM
VENUSYEAR = 224.701 * Kw.DAY
VENUSDAY = -243.018 * Kw.DAY
VENUSFLATNESS = 0.0
VENUS_A = 6.0518E+6 * Kw.METER
VENUS_C = VENUS_A
VENUS_B = VENUS_A * (1.0 - VENUSFLATNESS)
VENUSRADIUS = (VENUS_A + VENUS_B + VENUS_C) / 3.0
VENUSESCAPE = math.sqrt(2.0 * VENUSGM / VENUSRADIUS)
VENUSOBLATENESS = math.sqrt(VENUSFLATNESS * (2.0 -\
      VENUSFLATNESS))
VENUSGRAVITY = VENUSGM / (VENUSRADIUS * VENUSRADIUS)
VENUSMASS = VENUSGM / Kw.GRAVITATION
VENUSVOLUME = 2.0 * Kw.TAU / 3.0 * VENUSRADIUS * VENUSRADIUS\
      * VENUSRADIUS
VENUSSURFACE = 2.0 * Kw.TAU * VENUSRADIUS * VENUSRADIUS
VENUSDENSITY = VENUSMASS / VENUSVOLUME
VENUSSYNODIC = VENUSYEAR * EARTHSIDEREALYEAR / (VENUSYEAR -\
      EARTHSIDEREALYEAR)
EARTHGM = 3.986004418E+14 * Kw.UNITGM
EARTHYEAR = EARTHSIDEREALYEAR
EARTHDAY = EARTHSTELLARDAY
EARTHFLATNESS = 1.0 / 298.257223563
EARTH_A = 6.378137E+6 * Kw.METER
EARTH_C = EARTH_A
EARTH_B = EARTH_A * (1.0 - EARTHFLATNESS)
EARTHRADIUS = (EARTH_A + EARTH_B + EARTH_C) / 3.0
EARTHESCAPE = math.sqrt(2.0 * EARTHGM / EARTHRADIUS)
EARTHOBLATENESS = math.sqrt(EARTHFLATNESS * (2.0 -\
      EARTHFLATNESS))
EARTHGRAVITY = EARTHGM / (EARTHRADIUS * EARTHRADIUS)
EARTHMASS = EARTHGM / Kw.GRAVITATION
EARTHVOLUME = 2.0 * Kw.TAU / 3.0 * EARTHRADIUS * EARTHRADIUS\
      * EARTHRADIUS
EARTHSURFACE = 2.0 * Kw.TAU * EARTHRADIUS * EARTHRADIUS
EARTHDENSITY = EARTHMASS / EARTHVOLUME
EARTHPRECESSION = 50.28792 * Kw.ARCSEC / Kw.JYEAR
EARTHTHETA_0 = 0.7790572732640 * Kw.TURN
MARSGM = 4.282837E+13 * Kw.UNITGM
MARSYEAR = 686.971 * Kw.DAY
MARSDAY = 1.02595676 * Kw.DAY
MARSFLATNESS = 1.0 / 169.81
MARS_A = 3.3962E+6 * Kw.METER
MARS_C = MARS_A
MARS_B = MARS_A * (1.0 - MARSFLATNESS)
MARSRADIUS = (MARS_A + MARS_B + MARS_C) / 3.0
MARSESCAPE = math.sqrt(2.0 * MARSGM / MARSRADIUS)
MARSOBLATENESS = math.sqrt(MARSFLATNESS * (2.0 - MARSFLATNESS))
MARSGRAVITY = MARSGM / (MARSRADIUS * MARSRADIUS)
MARSMASS = MARSGM / Kw.GRAVITATION
MARSVOLUME = 2.0 * Kw.TAU / 3.0 * MARSRADIUS * MARSRADIUS *\
      MARSRADIUS
MARSSURFACE = 2.0 * Kw.TAU * MARSRADIUS * MARSRADIUS
MARSDENSITY = MARSMASS / MARSVOLUME
MARSSYNODIC = MARSYEAR * EARTHSIDEREALYEAR / (MARSYEAR -\
      EARTHSIDEREALYEAR)
JUPITERGM = 1.26686534E+17 * Kw.UNITGM
JUPITERYEAR = 4332.59 * Kw.DAY
JUPITERDAY = 0.41354 * Kw.DAY
JUPITERFLATNESS = 1.0 / 15.4144028
JUPITER_A = 7.1492E+7 * Kw.METER
JUPITER_C = JUPITER_A
JUPITER_B = JUPITER_A * (1.0 - JUPITERFLATNESS)
JUPITERRADIUS = (JUPITER_A + JUPITER_B + JUPITER_C) / 3.0
JUPITERESCAPE = math.sqrt(2.0 * JUPITERGM / JUPITERRADIUS)
JUPITEROBLATENESS = math.sqrt(JUPITERFLATNESS * (2.0 -\
      JUPITERFLATNESS))
JUPITERGRAVITY = JUPITERGM / (JUPITERRADIUS * JUPITERRADIUS)
JUPITERMASS = JUPITERGM / Kw.GRAVITATION
JUPITERVOLUME = 2.0 * Kw.TAU / 3.0 * JUPITERRADIUS *\
      JUPITERRADIUS * JUPITERRADIUS
JUPITERSURFACE = 2.0 * Kw.TAU * JUPITERRADIUS * JUPITERRADIUS
JUPITERDENSITY = JUPITERMASS / JUPITERVOLUME
JUPITERSYNODIC = JUPITERYEAR * EARTHSIDEREALYEAR /\
      (JUPITERYEAR - EARTHSIDEREALYEAR)
SATURNGM = 3.7931187E+16 * Kw.UNITGM
SATURNYEAR = 10759.22 * Kw.DAY
SATURNDAY = 0.44401 * Kw.DAY
SATURNFLATNESS = 1.0 / 10.208
SATURN_A = 6.0268E+7 * Kw.METER
SATURN_C = SATURN_A
SATURN_B = SATURN_A * (1.0 - SATURNFLATNESS)
SATURNRADIUS = (SATURN_A + SATURN_B + SATURN_C) / 3.0
SATURNESCAPE = math.sqrt(2.0 * SATURNGM / SATURNRADIUS)
SATURNOBLATENESS = math.sqrt(SATURNFLATNESS * (2.0 -\
      SATURNFLATNESS))
SATURNGRAVITY = SATURNGM / (SATURNRADIUS * SATURNRADIUS)
SATURNMASS = SATURNGM / Kw.GRAVITATION
SATURNVOLUME = 2.0 * Kw.TAU / 3.0 * SATURNRADIUS *\
      SATURNRADIUS * SATURNRADIUS
SATURNSURFACE = 2.0 * Kw.TAU * SATURNRADIUS * SATURNRADIUS
SATURNDENSITY = SATURNMASS / SATURNVOLUME
SATURNSYNODIC = SATURNYEAR * EARTHSIDEREALYEAR / (SATURNYEAR\
      - EARTHSIDEREALYEAR)
URANUSGM = 5.793939E+15 * Kw.UNITGM
URANUSYEAR = 30688.5 * Kw.DAY
URANUSDAY = -0.71833 * Kw.DAY
URANUSFLATNESS = 1.0 / 43.61604
URANUS_A = 2.5559E+7 * Kw.METER
URANUS_C = URANUS_A
URANUS_B = URANUS_A * (1.0 - URANUSFLATNESS)
URANUSRADIUS = (URANUS_A + URANUS_B + URANUS_C) / 3.0
URANUSESCAPE = math.sqrt(2.0 * URANUSGM / URANUSRADIUS)
URANUSOBLATENESS = math.sqrt(URANUSFLATNESS * (2.0 -\
      URANUSFLATNESS))
URANUSGRAVITY = URANUSGM / (URANUSRADIUS * URANUSRADIUS)
URANUSMASS = URANUSGM / Kw.GRAVITATION
URANUSVOLUME = 2.0 * Kw.TAU / 3.0 * URANUSRADIUS *\
      URANUSRADIUS * URANUSRADIUS
URANUSSURFACE = 2.0 * Kw.TAU * URANUSRADIUS * URANUSRADIUS
URANUSDENSITY = URANUSMASS / URANUSVOLUME
URANUSSYNODIC = URANUSYEAR * EARTHSIDEREALYEAR / (URANUSYEAR\
      - EARTHSIDEREALYEAR)
NEPTUNEGM = 6.836529E+15 * Kw.UNITGM
NEPTUNEYEAR = 6.0182E+4 * Kw.DAY
NEPTUNEDAY = 0.67125 * Kw.DAY
NEPTUNEFLATNESS = 1.0 / 58.54373
NEPTUNE_A = 2.4764E+7 * Kw.METER
NEPTUNE_C = NEPTUNE_A
NEPTUNE_B = NEPTUNE_A * (1.0 - NEPTUNEFLATNESS)
NEPTUNERADIUS = (NEPTUNE_A + NEPTUNE_B + NEPTUNE_C) / 3.0
NEPTUNEESCAPE = math.sqrt(2.0 * NEPTUNEGM / NEPTUNERADIUS)
NEPTUNEOBLATENESS = math.sqrt(NEPTUNEFLATNESS * (2.0 -\
      NEPTUNEFLATNESS))
NEPTUNEGRAVITY = NEPTUNEGM / (NEPTUNERADIUS * NEPTUNERADIUS)
NEPTUNEMASS = NEPTUNEGM / Kw.GRAVITATION
NEPTUNEVOLUME = 2.0 * Kw.TAU / 3.0 * NEPTUNERADIUS *\
      NEPTUNERADIUS * NEPTUNERADIUS
NEPTUNESURFACE = 2.0 * Kw.TAU * NEPTUNERADIUS * NEPTUNERADIUS
NEPTUNEDENSITY = NEPTUNEMASS / NEPTUNEVOLUME
NEPTUNESYNODIC = NEPTUNEYEAR * EARTHSIDEREALYEAR /\
      (NEPTUNEYEAR - EARTHSIDEREALYEAR)
PLUTOGM = 8.71E+11 * Kw.UNITGM
PLUTOYEAR = 9.056E+4 * Kw.DAY
PLUTODAY = 6.38723 * Kw.DAY
PLUTOFLATNESS = 0.0
PLUTO_A = 1.1899E+6 * Kw.METER
PLUTO_C = PLUTO_A
PLUTO_B = PLUTO_A * (1.0 - PLUTOFLATNESS)
PLUTORADIUS = (PLUTO_A + PLUTO_B + PLUTO_C) / 3.0
PLUTOESCAPE = math.sqrt(2.0 * PLUTOGM / PLUTORADIUS)
PLUTOOBLATENESS = math.sqrt(PLUTOFLATNESS * (2.0 -\
      PLUTOFLATNESS))
PLUTOGRAVITY = PLUTOGM / (PLUTORADIUS * PLUTORADIUS)
PLUTOMASS = PLUTOGM / Kw.GRAVITATION
PLUTOVOLUME = 2.0 * Kw.TAU / 3.0 * PLUTORADIUS * PLUTORADIUS\
      * PLUTORADIUS
PLUTOSURFACE = 2.0 * Kw.TAU * PLUTORADIUS * PLUTORADIUS
PLUTODENSITY = PLUTOMASS / PLUTOVOLUME
PLUTOSYNODIC = PLUTOYEAR * EARTHSIDEREALYEAR / (PLUTOYEAR -\
      EARTHSIDEREALYEAR)
MOONGM = 4.9048695E+12 * Kw.UNITGM
MOONYEAR = 27.32166155 * Kw.DAY
MOONDAY = 27.321661 * Kw.DAY
MOONFLATNESS = 1.0 / 827.667
MOON_A = 1.7381E+6 * Kw.METER
MOON_C = MOON_A
MOON_B = MOON_A * (1.0 - MOONFLATNESS)
MOONRADIUS = (MOON_A + MOON_B + MOON_C) / 3.0
MOONESCAPE = math.sqrt(2.0 * MOONGM / MOONRADIUS)
MOONOBLATENESS = math.sqrt(MOONFLATNESS * (2.0 - MOONFLATNESS))
MOONGRAVITY = MOONGM / (MOONRADIUS * MOONRADIUS)
MOONMASS = MOONGM / Kw.GRAVITATION
MOONVOLUME = 2.0 * Kw.TAU / 3.0 * MOONRADIUS * MOONRADIUS *\
      MOONRADIUS
MOONSURFACE = 2.0 * Kw.TAU * MOONRADIUS * MOONRADIUS
MOONDENSITY = MOONMASS / MOONVOLUME
MOONSYNODIC = MOONYEAR * EARTHSIDEREALYEAR / (MOONYEAR -\
      EARTHSIDEREALYEAR)
MOONORBIT = 3.843999E+8 * Kw.METER
MOONECCENTRICITY = 0.0549
MOONINCLINATION = 5.415 * Kw.ARCDEG
CERESGM = 6.26325E+10 * Kw.UNITGM
CERESYEAR = 1681.63 * Kw.DAY
CERESDAY = 9.074170 * Kw.HOUR
CERESFLATNESS = 1.0 / 13.0432
CERES_A = 4.826E+5 * Kw.METER
CERES_C = 4.806E+5 * Kw.METER
CERES_B = CERES_A * (1.0 - CERESFLATNESS)
CERESRADIUS = (CERES_A + CERES_B + CERES_C) / 3.0
CERESESCAPE = math.sqrt(2.0 * CERESGM / CERESRADIUS)
CERESOBLATENESS = math.sqrt(CERESFLATNESS * (2.0 -\
      CERESFLATNESS))
CERESGRAVITY = CERESGM / (CERESRADIUS * CERESRADIUS)
CERESMASS = CERESGM / Kw.GRAVITATION
CERESVOLUME = 2.0 * Kw.TAU / 3.0 * CERESRADIUS * CERESRADIUS\
      * CERESRADIUS
CERESSURFACE = 2.0 * Kw.TAU * CERESRADIUS * CERESRADIUS
CERESDENSITY = CERESMASS / CERESVOLUME
CERESSYNODIC = CERESYEAR * EARTHSIDEREALYEAR / (CERESYEAR -\
      EARTHSIDEREALYEAR)
ERISGM = 1.108E+12 * Kw.UNITGM
ERISYEAR = 2.0383E+5 * Kw.DAY
ERISDAY = 25.9 * Kw.HOUR
ERISFLATNESS = 0.0
ERIS_A = 1.163E+6 * Kw.METER
ERIS_C = ERIS_A
ERIS_B = ERIS_A * (1.0 - ERISFLATNESS)
ERISRADIUS = (ERIS_A + ERIS_B + ERIS_C) / 3.0
ERISESCAPE = math.sqrt(2.0 * ERISGM / ERISRADIUS)
ERISOBLATENESS = math.sqrt(ERISFLATNESS * (2.0 - ERISFLATNESS))
ERISGRAVITY = ERISGM / (ERISRADIUS * ERISRADIUS)
ERISMASS = ERISGM / Kw.GRAVITATION
ERISVOLUME = 2.0 * Kw.TAU / 3.0 * ERISRADIUS * ERISRADIUS *\
      ERISRADIUS
ERISSURFACE = 2.0 * Kw.TAU * ERISRADIUS * ERISRADIUS
ERISDENSITY = ERISMASS / ERISVOLUME
ERISSYNODIC = ERISYEAR * EARTHSIDEREALYEAR / (ERISYEAR -\
      EARTHSIDEREALYEAR)
MAKEMAKEGM = 2.9366E+11 * Kw.UNITGM
MAKEMAKEYEAR = 1.12897E+5 * Kw.DAY
MAKEMAKEDAY = 7.771 * Kw.HOUR
MAKEMAKEFLATNESS = 1.0 / 30.7917
MAKEMAKE_A = 7.39E+5 * Kw.METER
MAKEMAKE_C = MAKEMAKE_A
MAKEMAKE_B = MAKEMAKE_A * (1.0 - MAKEMAKEFLATNESS)
MAKEMAKERADIUS = (MAKEMAKE_A + MAKEMAKE_B + MAKEMAKE_C) / 3.0
MAKEMAKEESCAPE = math.sqrt(2.0 * MAKEMAKEGM / MAKEMAKERADIUS)
MAKEMAKEOBLATENESS = math.sqrt(MAKEMAKEFLATNESS * (2.0 -\
      MAKEMAKEFLATNESS))
MAKEMAKEGRAVITY = MAKEMAKEGM / (MAKEMAKERADIUS * MAKEMAKERADIUS)
MAKEMAKEMASS = MAKEMAKEGM / Kw.GRAVITATION
MAKEMAKEVOLUME = 2.0 * Kw.TAU / 3.0 * MAKEMAKERADIUS *\
      MAKEMAKERADIUS * MAKEMAKERADIUS
MAKEMAKESURFACE = 2.0 * Kw.TAU * MAKEMAKERADIUS * MAKEMAKERADIUS
MAKEMAKEDENSITY = MAKEMAKEMASS / MAKEMAKEVOLUME
MAKEMAKESYNODIC = MAKEMAKEYEAR * EARTHSIDEREALYEAR /\
      (MAKEMAKEYEAR - EARTHSIDEREALYEAR)
HAUMEAGM = 2.674E+11 * Kw.UNITGM
HAUMEAYEAR = 1.03774E+5 * Kw.DAY
HAUMEADAY = 3.9155 * Kw.HOUR
HAUMEAFLATNESS = 1.0 / 1.96115
HAUMEA_A = 1.161E+6 * Kw.METER
HAUMEA_C = 8.52E+5 * Kw.METER
HAUMEA_B = HAUMEA_A * (1.0 - HAUMEAFLATNESS)
HAUMEARADIUS = (HAUMEA_A + HAUMEA_B + HAUMEA_C) / 3.0
HAUMEAESCAPE = math.sqrt(2.0 * HAUMEAGM / HAUMEARADIUS)
HAUMEAOBLATENESS = math.sqrt(HAUMEAFLATNESS * (2.0 -\
      HAUMEAFLATNESS))
HAUMEAGRAVITY = HAUMEAGM / (HAUMEARADIUS * HAUMEARADIUS)
HAUMEAMASS = HAUMEAGM / Kw.GRAVITATION
HAUMEAVOLUME = 2.0 * Kw.TAU / 3.0 * HAUMEARADIUS *\
      HAUMEARADIUS * HAUMEARADIUS
HAUMEASURFACE = 2.0 * Kw.TAU * HAUMEARADIUS * HAUMEARADIUS
HAUMEADENSITY = HAUMEAMASS / HAUMEAVOLUME
HAUMEASYNODIC = HAUMEAYEAR * EARTHSIDEREALYEAR / (HAUMEAYEAR\
      - EARTHSIDEREALYEAR)
SUNORBIT = 0.0 * Kw.AU
SUNECCENTRICITY = 0.0
SUNINCLINATION = 0.0 * Kw.ARCDEG
SUNLONGITUDE = 0.0 * Kw.ARCDEG
SUNPERIAPSIS = 0.0 * Kw.ARCDEG
SUNASCENDING = 0.0 * Kw.ARCDEG
SUNORBIT_DT = 0.0 * Kw.AU / Kw.JC
SUNECCENTRICITY_DT = 0.0 / Kw.JC
SUNINCLINATION_DT = 0.0 * Kw.ARCDEG / Kw.JC
SUNLONGITUDE_DT = 0.0 * Kw.ARCDEG / Kw.JC
SUNPERIAPSIS_DT = 0.0 * Kw.ARCDEG / Kw.JC
SUNASCENDING_DT = 0.0 * Kw.ARCDEG / Kw.JC
EARTHORBIT = 1.00000261 * Kw.AU
EARTHECCENTRICITY = 0.01671123
EARTHINCLINATION = 359.99998469 * Kw.ARCDEG
EARTHLONGITUDE = 100.46457166 * Kw.ARCDEG
EARTHPERIAPSIS = 102.93768193 * Kw.ARCDEG
EARTHASCENDING = 0.0 * Kw.ARCDEG
EARTHORBIT_DT = 0.00000562 * Kw.AU / Kw.JC
EARTHECCENTRICITY_DT = -0.00004392 / Kw.JC
EARTHINCLINATION_DT = -0.01294668 * Kw.ARCDEG / Kw.JC
EARTHLONGITUDE_DT = 35999.37244981 * Kw.ARCDEG / Kw.JC
EARTHPERIAPSIS_DT = 0.32327364 * Kw.ARCDEG / Kw.JC
EARTHASCENDING_DT = 0.0 * Kw.ARCDEG / Kw.JC
MERCURYORBIT = 0.38709927 * Kw.AU
MERCURYECCENTRICITY = 0.20563593
MERCURYINCLINATION = 7.00497902 * Kw.ARCDEG
MERCURYLONGITUDE = 252.25032350 * Kw.ARCDEG
MERCURYPERIAPSIS = 77.45779628 * Kw.ARCDEG
MERCURYASCENDING = 48.33076593 * Kw.ARCDEG
MERCURYORBIT_DT = 0.00000037 * Kw.AU / Kw.JC
MERCURYECCENTRICITY_DT = 0.00001906 / Kw.JC
MERCURYINCLINATION_DT = -0.00594749 * Kw.ARCDEG / Kw.JC
MERCURYLONGITUDE_DT = 149472.67411175 * Kw.ARCDEG / Kw.JC
MERCURYPERIAPSIS_DT = 0.16047689 * Kw.ARCDEG / Kw.JC
MERCURYASCENDING_DT = -0.12534081 * Kw.ARCDEG / Kw.JC
VENUSORBIT = 0.72333566 * Kw.AU
VENUSECCENTRICITY = 0.00677672
VENUSINCLINATION = 3.39467605 * Kw.ARCDEG
VENUSLONGITUDE = 181.97909950 * Kw.ARCDEG
VENUSPERIAPSIS = 131.60246718 * Kw.ARCDEG
VENUSASCENDING = 76.67984255 * Kw.ARCDEG
VENUSORBIT_DT = 0.00000390 * Kw.AU / Kw.JC
VENUSECCENTRICITY_DT = -0.00004107 / Kw.JC
VENUSINCLINATION_DT = -0.00078890 * Kw.ARCDEG / Kw.JC
VENUSLONGITUDE_DT = 58517.81538729 * Kw.ARCDEG / Kw.JC
VENUSPERIAPSIS_DT = 0.00268329 * Kw.ARCDEG / Kw.JC
VENUSASCENDING_DT = -0.27769418 * Kw.ARCDEG / Kw.JC
MARSORBIT = 1.52371034 * Kw.AU
MARSECCENTRICITY = 0.09339410
MARSINCLINATION = 1.84969142 * Kw.ARCDEG
MARSLONGITUDE = 355.44656795 * Kw.ARCDEG
MARSPERIAPSIS = 336.05637041 * Kw.ARCDEG
MARSASCENDING = 49.55953891 * Kw.ARCDEG
MARSORBIT_DT = 0.00001847 * Kw.AU / Kw.JC
MARSECCENTRICITY_DT = 0.00007882 / Kw.JC
MARSINCLINATION_DT = -0.00813131 * Kw.ARCDEG / Kw.JC
MARSLONGITUDE_DT = 19140.30268499 * Kw.ARCDEG / Kw.JC
MARSPERIAPSIS_DT = 0.44441088 * Kw.ARCDEG / Kw.JC
MARSASCENDING_DT = -0.29257343 * Kw.ARCDEG / Kw.JC
JUPITERORBIT = 5.20288700 * Kw.AU
JUPITERECCENTRICITY = 0.04838624
JUPITERINCLINATION = 1.30439695 * Kw.ARCDEG
JUPITERLONGITUDE = 34.39644051 * Kw.ARCDEG
JUPITERPERIAPSIS = 14.72847983 * Kw.ARCDEG
JUPITERASCENDING = 100.47390909 * Kw.ARCDEG
JUPITERORBIT_DT = -0.00011607 * Kw.AU / Kw.JC
JUPITERECCENTRICITY_DT = -0.00013253 / Kw.JC
JUPITERINCLINATION_DT = -0.00183714 * Kw.ARCDEG / Kw.JC
JUPITERLONGITUDE_DT = 3034.74612775 * Kw.ARCDEG / Kw.JC
JUPITERPERIAPSIS_DT = 0.21252668 * Kw.ARCDEG / Kw.JC
JUPITERASCENDING_DT = 0.20469106 * Kw.ARCDEG / Kw.JC
SATURNORBIT = 9.53667594 * Kw.AU
SATURNECCENTRICITY = 0.05386179
SATURNINCLINATION = 2.48599187 * Kw.ARCDEG
SATURNLONGITUDE = 49.95424423 * Kw.ARCDEG
SATURNPERIAPSIS = 92.59887831 * Kw.ARCDEG
SATURNASCENDING = 113.66242448 * Kw.ARCDEG
SATURNORBIT_DT = -0.00125060 * Kw.AU / Kw.JC
SATURNECCENTRICITY_DT = -0.00050991 / Kw.JC
SATURNINCLINATION_DT = 0.00193609 * Kw.ARCDEG / Kw.JC
SATURNLONGITUDE_DT = 1222.49362201 * Kw.ARCDEG / Kw.JC
SATURNPERIAPSIS_DT = -0.41897216 * Kw.ARCDEG / Kw.JC
SATURNASCENDING_DT = -0.28867794 * Kw.ARCDEG / Kw.JC
URANUSORBIT = 19.18916464 * Kw.AU
URANUSECCENTRICITY = 0.04725744
URANUSINCLINATION = 0.77263783 * Kw.ARCDEG
URANUSLONGITUDE = 313.23810451 * Kw.ARCDEG
URANUSPERIAPSIS = 170.95427630 * Kw.ARCDEG
URANUSASCENDING = 74.01692503 * Kw.ARCDEG
URANUSORBIT_DT = -0.00196176 * Kw.AU / Kw.JC
URANUSECCENTRICITY_DT = -0.00004397 / Kw.JC
URANUSINCLINATION_DT = -0.00242939 * Kw.ARCDEG / Kw.JC
URANUSLONGITUDE_DT = 428.48202785 * Kw.ARCDEG / Kw.JC
URANUSPERIAPSIS_DT = 0.40805281 * Kw.ARCDEG / Kw.JC
URANUSASCENDING_DT = 0.04240589 * Kw.ARCDEG / Kw.JC
NEPTUNEORBIT = 30.06992276 * Kw.AU
NEPTUNEECCENTRICITY = 0.00859048
NEPTUNEINCLINATION = 1.77004347 * Kw.ARCDEG
NEPTUNELONGITUDE = 304.87997031 * Kw.ARCDEG
NEPTUNEPERIAPSIS = 44.96476227 * Kw.ARCDEG
NEPTUNEASCENDING = 131.78422574 * Kw.ARCDEG
NEPTUNEORBIT_DT = 0.00026291 * Kw.AU / Kw.JC
NEPTUNEECCENTRICITY_DT = 0.00005105 / Kw.JC
NEPTUNEINCLINATION_DT = 0.00035372 * Kw.ARCDEG / Kw.JC
NEPTUNELONGITUDE_DT = 218.45945325 * Kw.ARCDEG / Kw.JC
NEPTUNEPERIAPSIS_DT = -0.32241464 * Kw.ARCDEG / Kw.JC
NEPTUNEASCENDING_DT = -0.00508664 * Kw.ARCDEG / Kw.JC
PLUTOORBIT = 39.48211675 * Kw.AU
PLUTOECCENTRICITY = 0.24882730
PLUTOINCLINATION = 17.14001206 * Kw.ARCDEG
PLUTOLONGITUDE = 238.92903833 * Kw.ARCDEG
PLUTOPERIAPSIS = 224.06891629 * Kw.ARCDEG
PLUTOASCENDING = 110.30393684 * Kw.ARCDEG
PLUTOORBIT_DT = -0.00031596 * Kw.AU / Kw.JC
PLUTOECCENTRICITY_DT = 0.00005170 / Kw.JC
PLUTOINCLINATION_DT = 0.00004818 * Kw.ARCDEG / Kw.JC
PLUTOLONGITUDE_DT = 145.20780515 * Kw.ARCDEG / Kw.JC
PLUTOPERIAPSIS_DT = -0.04062942 * Kw.ARCDEG / Kw.JC
PLUTOASCENDING_DT = -0.01183482 * Kw.ARCDEG / Kw.JC
CERESORBIT = 2.76740933 * Kw.AU
CERESECCENTRICITY = 0.07560729
CERESINCLINATION = 10.59321706 * Kw.ARCDEG
CERESLONGITUDE = 102.82668 * Kw.ARCDEG
CERESPERIAPSIS = 73.023742647 * Kw.ARCDEG
CERESASCENDING = 80.308882612359 * Kw.ARCDEG
CERESORBIT_DT = 0.0 * Kw.AU / Kw.JC
CERESECCENTRICITY_DT = 0.0 / Kw.JC
CERESINCLINATION_DT = 0.0 * Kw.ARCDEG / Kw.JC
CERESLONGITUDE_DT = 0.0 * Kw.ARCDEG / Kw.JC
CERESPERIAPSIS_DT = 0.0 * Kw.ARCDEG / Kw.JC
CERESASCENDING_DT = 0.0 * Kw.ARCDEG / Kw.JC
ERISORBIT = 67.781 * Kw.AU
ERISECCENTRICITY = 0.44068
ERISINCLINATION = 44.0445 * Kw.ARCDEG
ERISLONGITUDE = 32.4926663 * Kw.ARCDEG
ERISPERIAPSIS = 151.60371236817 * Kw.ARCDEG
ERISASCENDING = 35.87992471211 * Kw.ARCDEG
ERISORBIT_DT = 0.0 * Kw.AU / Kw.JC
ERISECCENTRICITY_DT = 0.0 / Kw.JC
ERISINCLINATION_DT = 0.0 * Kw.ARCDEG / Kw.JC
ERISLONGITUDE_DT = 0.0 * Kw.ARCDEG / Kw.JC
ERISPERIAPSIS_DT = 0.0 * Kw.ARCDEG / Kw.JC
ERISASCENDING_DT = 0.0 * Kw.ARCDEG / Kw.JC
MAKEMAKEORBIT = 45.715 * Kw.AU
MAKEMAKEECCENTRICITY = 0.15586
MAKEMAKEINCLINATION = 29.00685 * Kw.ARCDEG
MAKEMAKELONGITUDE = 177.2966805 * Kw.ARCDEG
MAKEMAKEPERIAPSIS = 295.642772002 * Kw.ARCDEG
MAKEMAKEASCENDING = 79.616805978978 * Kw.ARCDEG
MAKEMAKEORBIT_DT = 0.0 * Kw.AU / Kw.JC
MAKEMAKEECCENTRICITY_DT = 0.0 / Kw.JC
MAKEMAKEINCLINATION_DT = 0.0 * Kw.ARCDEG / Kw.JC
MAKEMAKELONGITUDE_DT = 0.0 * Kw.ARCDEG / Kw.JC
MAKEMAKEPERIAPSIS_DT = 0.0 * Kw.ARCDEG / Kw.JC
MAKEMAKEASCENDING_DT = 0.0 * Kw.ARCDEG / Kw.JC
HAUMEAORBIT = 43.218 * Kw.AU
HAUMEAECCENTRICITY = 0.19126
HAUMEAINCLINATION = 28.19 * Kw.ARCDEG
HAUMEALONGITUDE = 215.687315 * Kw.ARCDEG
HAUMEAPERIAPSIS = 238.69440821915 * Kw.ARCDEG
HAUMEAASCENDING = 122.01840302632 * Kw.ARCDEG
HAUMEAORBIT_DT = 0.0 * Kw.AU / Kw.JC
HAUMEAECCENTRICITY_DT = 0.0 / Kw.JC
HAUMEAINCLINATION_DT = 0.0 * Kw.ARCDEG / Kw.JC
HAUMEALONGITUDE_DT = 0.0 * Kw.ARCDEG / Kw.JC
HAUMEAPERIAPSIS_DT = 0.0 * Kw.ARCDEG / Kw.JC
HAUMEAASCENDING_DT = 0.0 * Kw.ARCDEG / Kw.JC
cxearthsiderealday = (EARTHSIDEREALDAY)
cxearthstellarday = (EARTHSTELLARDAY)
cxearthtropicalyear = (EARTHTROPICALYEAR)
cxearthsiderealyear = (EARTHSIDEREALYEAR)
cxearthanomalisticyear = (EARTHANOMALISTICYEAR)
cxsiderealyear = (SIDEREALYEAR)
cxanomalisticyear = (ANOMALISTICYEAR)
cxtropicalyear = (TROPICALYEAR)
cxstellarday = (STELLARDAY)
cxsiderealday = (SIDEREALDAY)
cxsungmnasa = (SUNGMNASA)
cxsungmiers = (SUNGMIERS)
cxsungm = (SUNGM)
cxsunyear = (SUNYEAR)
cxsunday = (SUNDAY)
cxsunflatness = (SUNFLATNESS)
cxsun_a = (SUN_A)
cxsun_c = (SUN_C)
cxsun_b = (SUN_B)
cxsunradius = (SUNRADIUS)
cxsunescape = (SUNESCAPE)
cxsunoblateness = (SUNOBLATENESS)
cxsungravity = (SUNGRAVITY)
cxsunmass = (SUNMASS)
cxsunvolume = (SUNVOLUME)
cxsunsurface = (SUNSURFACE)
cxsundensity = (SUNDENSITY)
cxmercurygm = (MERCURYGM)
cxmercuryyear = (MERCURYYEAR)
cxmercuryday = (MERCURYDAY)
cxmercuryflatness = (MERCURYFLATNESS)
cxmercury_a = (MERCURY_A)
cxmercury_c = (MERCURY_C)
cxmercury_b = (MERCURY_B)
cxmercuryradius = (MERCURYRADIUS)
cxmercuryescape = (MERCURYESCAPE)
cxmercuryoblateness = (MERCURYOBLATENESS)
cxmercurygravity = (MERCURYGRAVITY)
cxmercurymass = (MERCURYMASS)
cxmercuryvolume = (MERCURYVOLUME)
cxmercurysurface = (MERCURYSURFACE)
cxmercurydensity = (MERCURYDENSITY)
cxmercurysynodic = (MERCURYSYNODIC)
cxvenusgm = (VENUSGM)
cxvenusyear = (VENUSYEAR)
cxvenusday = (VENUSDAY)
cxvenusflatness = (VENUSFLATNESS)
cxvenus_a = (VENUS_A)
cxvenus_c = (VENUS_C)
cxvenus_b = (VENUS_B)
cxvenusradius = (VENUSRADIUS)
cxvenusescape = (VENUSESCAPE)
cxvenusoblateness = (VENUSOBLATENESS)
cxvenusgravity = (VENUSGRAVITY)
cxvenusmass = (VENUSMASS)
cxvenusvolume = (VENUSVOLUME)
cxvenussurface = (VENUSSURFACE)
cxvenusdensity = (VENUSDENSITY)
cxvenussynodic = (VENUSSYNODIC)
cxearthgm = (EARTHGM)
cxearthyear = (EARTHYEAR)
cxearthday = (EARTHDAY)
cxearthflatness = (EARTHFLATNESS)
cxearth_a = (EARTH_A)
cxearth_c = (EARTH_C)
cxearth_b = (EARTH_B)
cxearthradius = (EARTHRADIUS)
cxearthescape = (EARTHESCAPE)
cxearthoblateness = (EARTHOBLATENESS)
cxearthgravity = (EARTHGRAVITY)
cxearthmass = (EARTHMASS)
cxearthvolume = (EARTHVOLUME)
cxearthsurface = (EARTHSURFACE)
cxearthdensity = (EARTHDENSITY)
cxearthprecession = (EARTHPRECESSION)
cxearththeta_0 = (EARTHTHETA_0)
cxmarsgm = (MARSGM)
cxmarsyear = (MARSYEAR)
cxmarsday = (MARSDAY)
cxmarsflatness = (MARSFLATNESS)
cxmars_a = (MARS_A)
cxmars_c = (MARS_C)
cxmars_b = (MARS_B)
cxmarsradius = (MARSRADIUS)
cxmarsescape = (MARSESCAPE)
cxmarsoblateness = (MARSOBLATENESS)
cxmarsgravity = (MARSGRAVITY)
cxmarsmass = (MARSMASS)
cxmarsvolume = (MARSVOLUME)
cxmarssurface = (MARSSURFACE)
cxmarsdensity = (MARSDENSITY)
cxmarssynodic = (MARSSYNODIC)
cxjupitergm = (JUPITERGM)
cxjupiteryear = (JUPITERYEAR)
cxjupiterday = (JUPITERDAY)
cxjupiterflatness = (JUPITERFLATNESS)
cxjupiter_a = (JUPITER_A)
cxjupiter_c = (JUPITER_C)
cxjupiter_b = (JUPITER_B)
cxjupiterradius = (JUPITERRADIUS)
cxjupiterescape = (JUPITERESCAPE)
cxjupiteroblateness = (JUPITEROBLATENESS)
cxjupitergravity = (JUPITERGRAVITY)
cxjupitermass = (JUPITERMASS)
cxjupitervolume = (JUPITERVOLUME)
cxjupitersurface = (JUPITERSURFACE)
cxjupiterdensity = (JUPITERDENSITY)
cxjupitersynodic = (JUPITERSYNODIC)
cxsaturngm = (SATURNGM)
cxsaturnyear = (SATURNYEAR)
cxsaturnday = (SATURNDAY)
cxsaturnflatness = (SATURNFLATNESS)
cxsaturn_a = (SATURN_A)
cxsaturn_c = (SATURN_C)
cxsaturn_b = (SATURN_B)
cxsaturnradius = (SATURNRADIUS)
cxsaturnescape = (SATURNESCAPE)
cxsaturnoblateness = (SATURNOBLATENESS)
cxsaturngravity = (SATURNGRAVITY)
cxsaturnmass = (SATURNMASS)
cxsaturnvolume = (SATURNVOLUME)
cxsaturnsurface = (SATURNSURFACE)
cxsaturndensity = (SATURNDENSITY)
cxsaturnsynodic = (SATURNSYNODIC)
cxuranusgm = (URANUSGM)
cxuranusyear = (URANUSYEAR)
cxuranusday = (URANUSDAY)
cxuranusflatness = (URANUSFLATNESS)
cxuranus_a = (URANUS_A)
cxuranus_c = (URANUS_C)
cxuranus_b = (URANUS_B)
cxuranusradius = (URANUSRADIUS)
cxuranusescape = (URANUSESCAPE)
cxuranusoblateness = (URANUSOBLATENESS)
cxuranusgravity = (URANUSGRAVITY)
cxuranusmass = (URANUSMASS)
cxuranusvolume = (URANUSVOLUME)
cxuranussurface = (URANUSSURFACE)
cxuranusdensity = (URANUSDENSITY)
cxuranussynodic = (URANUSSYNODIC)
cxneptunegm = (NEPTUNEGM)
cxneptuneyear = (NEPTUNEYEAR)
cxneptuneday = (NEPTUNEDAY)
cxneptuneflatness = (NEPTUNEFLATNESS)
cxneptune_a = (NEPTUNE_A)
cxneptune_c = (NEPTUNE_C)
cxneptune_b = (NEPTUNE_B)
cxneptuneradius = (NEPTUNERADIUS)
cxneptuneescape = (NEPTUNEESCAPE)
cxneptuneoblateness = (NEPTUNEOBLATENESS)
cxneptunegravity = (NEPTUNEGRAVITY)
cxneptunemass = (NEPTUNEMASS)
cxneptunevolume = (NEPTUNEVOLUME)
cxneptunesurface = (NEPTUNESURFACE)
cxneptunedensity = (NEPTUNEDENSITY)
cxneptunesynodic = (NEPTUNESYNODIC)
cxplutogm = (PLUTOGM)
cxplutoyear = (PLUTOYEAR)
cxplutoday = (PLUTODAY)
cxplutoflatness = (PLUTOFLATNESS)
cxpluto_a = (PLUTO_A)
cxpluto_c = (PLUTO_C)
cxpluto_b = (PLUTO_B)
cxplutoradius = (PLUTORADIUS)
cxplutoescape = (PLUTOESCAPE)
cxplutooblateness = (PLUTOOBLATENESS)
cxplutogravity = (PLUTOGRAVITY)
cxplutomass = (PLUTOMASS)
cxplutovolume = (PLUTOVOLUME)
cxplutosurface = (PLUTOSURFACE)
cxplutodensity = (PLUTODENSITY)
cxplutosynodic = (PLUTOSYNODIC)
cxmoongm = (MOONGM)
cxmoonyear = (MOONYEAR)
cxmoonday = (MOONDAY)
cxmoonflatness = (MOONFLATNESS)
cxmoon_a = (MOON_A)
cxmoon_c = (MOON_C)
cxmoon_b = (MOON_B)
cxmoonradius = (MOONRADIUS)
cxmoonescape = (MOONESCAPE)
cxmoonoblateness = (MOONOBLATENESS)
cxmoongravity = (MOONGRAVITY)
cxmoonmass = (MOONMASS)
cxmoonvolume = (MOONVOLUME)
cxmoonsurface = (MOONSURFACE)
cxmoondensity = (MOONDENSITY)
cxmoonsynodic = (MOONSYNODIC)
cxmoonorbit = (MOONORBIT)
cxmooneccentricity = (MOONECCENTRICITY)
cxmooninclination = (MOONINCLINATION)
cxceresgm = (CERESGM)
cxceresyear = (CERESYEAR)
cxceresday = (CERESDAY)
cxceresflatness = (CERESFLATNESS)
cxceres_a = (CERES_A)
cxceres_c = (CERES_C)
cxceres_b = (CERES_B)
cxceresradius = (CERESRADIUS)
cxceresescape = (CERESESCAPE)
cxceresoblateness = (CERESOBLATENESS)
cxceresgravity = (CERESGRAVITY)
cxceresmass = (CERESMASS)
cxceresvolume = (CERESVOLUME)
cxceressurface = (CERESSURFACE)
cxceresdensity = (CERESDENSITY)
cxceressynodic = (CERESSYNODIC)
cxerisgm = (ERISGM)
cxerisyear = (ERISYEAR)
cxerisday = (ERISDAY)
cxerisflatness = (ERISFLATNESS)
cxeris_a = (ERIS_A)
cxeris_c = (ERIS_C)
cxeris_b = (ERIS_B)
cxerisradius = (ERISRADIUS)
cxerisescape = (ERISESCAPE)
cxerisoblateness = (ERISOBLATENESS)
cxerisgravity = (ERISGRAVITY)
cxerismass = (ERISMASS)
cxerisvolume = (ERISVOLUME)
cxerissurface = (ERISSURFACE)
cxerisdensity = (ERISDENSITY)
cxerissynodic = (ERISSYNODIC)
cxmakemakegm = (MAKEMAKEGM)
cxmakemakeyear = (MAKEMAKEYEAR)
cxmakemakeday = (MAKEMAKEDAY)
cxmakemakeflatness = (MAKEMAKEFLATNESS)
cxmakemake_a = (MAKEMAKE_A)
cxmakemake_c = (MAKEMAKE_C)
cxmakemake_b = (MAKEMAKE_B)
cxmakemakeradius = (MAKEMAKERADIUS)
cxmakemakeescape = (MAKEMAKEESCAPE)
cxmakemakeoblateness = (MAKEMAKEOBLATENESS)
cxmakemakegravity = (MAKEMAKEGRAVITY)
cxmakemakemass = (MAKEMAKEMASS)
cxmakemakevolume = (MAKEMAKEVOLUME)
cxmakemakesurface = (MAKEMAKESURFACE)
cxmakemakedensity = (MAKEMAKEDENSITY)
cxmakemakesynodic = (MAKEMAKESYNODIC)
cxhaumeagm = (HAUMEAGM)
cxhaumeayear = (HAUMEAYEAR)
cxhaumeaday = (HAUMEADAY)
cxhaumeaflatness = (HAUMEAFLATNESS)
cxhaumea_a = (HAUMEA_A)
cxhaumea_c = (HAUMEA_C)
cxhaumea_b = (HAUMEA_B)
cxhaumearadius = (HAUMEARADIUS)
cxhaumeaescape = (HAUMEAESCAPE)
cxhaumeaoblateness = (HAUMEAOBLATENESS)
cxhaumeagravity = (HAUMEAGRAVITY)
cxhaumeamass = (HAUMEAMASS)
cxhaumeavolume = (HAUMEAVOLUME)
cxhaumeasurface = (HAUMEASURFACE)
cxhaumeadensity = (HAUMEADENSITY)
cxhaumeasynodic = (HAUMEASYNODIC)
cxsunorbit = (SUNORBIT)
cxsuneccentricity = (SUNECCENTRICITY)
cxsuninclination = (SUNINCLINATION)
cxsunlongitude = (SUNLONGITUDE)
cxsunperiapsis = (SUNPERIAPSIS)
cxsunascending = (SUNASCENDING)
cxsunorbit_dt = (SUNORBIT_DT)
cxsuneccentricity_dt = (SUNECCENTRICITY_DT)
cxsuninclination_dt = (SUNINCLINATION_DT)
cxsunlongitude_dt = (SUNLONGITUDE_DT)
cxsunperiapsis_dt = (SUNPERIAPSIS_DT)
cxsunascending_dt = (SUNASCENDING_DT)
cxearthorbit = (EARTHORBIT)
cxeartheccentricity = (EARTHECCENTRICITY)
cxearthinclination = (EARTHINCLINATION)
cxearthlongitude = (EARTHLONGITUDE)
cxearthperiapsis = (EARTHPERIAPSIS)
cxearthascending = (EARTHASCENDING)
cxearthorbit_dt = (EARTHORBIT_DT)
cxeartheccentricity_dt = (EARTHECCENTRICITY_DT)
cxearthinclination_dt = (EARTHINCLINATION_DT)
cxearthlongitude_dt = (EARTHLONGITUDE_DT)
cxearthperiapsis_dt = (EARTHPERIAPSIS_DT)
cxearthascending_dt = (EARTHASCENDING_DT)
cxmercuryorbit = (MERCURYORBIT)
cxmercuryeccentricity = (MERCURYECCENTRICITY)
cxmercuryinclination = (MERCURYINCLINATION)
cxmercurylongitude = (MERCURYLONGITUDE)
cxmercuryperiapsis = (MERCURYPERIAPSIS)
cxmercuryascending = (MERCURYASCENDING)
cxmercuryorbit_dt = (MERCURYORBIT_DT)
cxmercuryeccentricity_dt = (MERCURYECCENTRICITY_DT)
cxmercuryinclination_dt = (MERCURYINCLINATION_DT)
cxmercurylongitude_dt = (MERCURYLONGITUDE_DT)
cxmercuryperiapsis_dt = (MERCURYPERIAPSIS_DT)
cxmercuryascending_dt = (MERCURYASCENDING_DT)
cxvenusorbit = (VENUSORBIT)
cxvenuseccentricity = (VENUSECCENTRICITY)
cxvenusinclination = (VENUSINCLINATION)
cxvenuslongitude = (VENUSLONGITUDE)
cxvenusperiapsis = (VENUSPERIAPSIS)
cxvenusascending = (VENUSASCENDING)
cxvenusorbit_dt = (VENUSORBIT_DT)
cxvenuseccentricity_dt = (VENUSECCENTRICITY_DT)
cxvenusinclination_dt = (VENUSINCLINATION_DT)
cxvenuslongitude_dt = (VENUSLONGITUDE_DT)
cxvenusperiapsis_dt = (VENUSPERIAPSIS_DT)
cxvenusascending_dt = (VENUSASCENDING_DT)
cxmarsorbit = (MARSORBIT)
cxmarseccentricity = (MARSECCENTRICITY)
cxmarsinclination = (MARSINCLINATION)
cxmarslongitude = (MARSLONGITUDE)
cxmarsperiapsis = (MARSPERIAPSIS)
cxmarsascending = (MARSASCENDING)
cxmarsorbit_dt = (MARSORBIT_DT)
cxmarseccentricity_dt = (MARSECCENTRICITY_DT)
cxmarsinclination_dt = (MARSINCLINATION_DT)
cxmarslongitude_dt = (MARSLONGITUDE_DT)
cxmarsperiapsis_dt = (MARSPERIAPSIS_DT)
cxmarsascending_dt = (MARSASCENDING_DT)
cxjupiterorbit = (JUPITERORBIT)
cxjupitereccentricity = (JUPITERECCENTRICITY)
cxjupiterinclination = (JUPITERINCLINATION)
cxjupiterlongitude = (JUPITERLONGITUDE)
cxjupiterperiapsis = (JUPITERPERIAPSIS)
cxjupiterascending = (JUPITERASCENDING)
cxjupiterorbit_dt = (JUPITERORBIT_DT)
cxjupitereccentricity_dt = (JUPITERECCENTRICITY_DT)
cxjupiterinclination_dt = (JUPITERINCLINATION_DT)
cxjupiterlongitude_dt = (JUPITERLONGITUDE_DT)
cxjupiterperiapsis_dt = (JUPITERPERIAPSIS_DT)
cxjupiterascending_dt = (JUPITERASCENDING_DT)
cxsaturnorbit = (SATURNORBIT)
cxsaturneccentricity = (SATURNECCENTRICITY)
cxsaturninclination = (SATURNINCLINATION)
cxsaturnlongitude = (SATURNLONGITUDE)
cxsaturnperiapsis = (SATURNPERIAPSIS)
cxsaturnascending = (SATURNASCENDING)
cxsaturnorbit_dt = (SATURNORBIT_DT)
cxsaturneccentricity_dt = (SATURNECCENTRICITY_DT)
cxsaturninclination_dt = (SATURNINCLINATION_DT)
cxsaturnlongitude_dt = (SATURNLONGITUDE_DT)
cxsaturnperiapsis_dt = (SATURNPERIAPSIS_DT)
cxsaturnascending_dt = (SATURNASCENDING_DT)
cxuranusorbit = (URANUSORBIT)
cxuranuseccentricity = (URANUSECCENTRICITY)
cxuranusinclination = (URANUSINCLINATION)
cxuranuslongitude = (URANUSLONGITUDE)
cxuranusperiapsis = (URANUSPERIAPSIS)
cxuranusascending = (URANUSASCENDING)
cxuranusorbit_dt = (URANUSORBIT_DT)
cxuranuseccentricity_dt = (URANUSECCENTRICITY_DT)
cxuranusinclination_dt = (URANUSINCLINATION_DT)
cxuranuslongitude_dt = (URANUSLONGITUDE_DT)
cxuranusperiapsis_dt = (URANUSPERIAPSIS_DT)
cxuranusascending_dt = (URANUSASCENDING_DT)
cxneptuneorbit = (NEPTUNEORBIT)
cxneptuneeccentricity = (NEPTUNEECCENTRICITY)
cxneptuneinclination = (NEPTUNEINCLINATION)
cxneptunelongitude = (NEPTUNELONGITUDE)
cxneptuneperiapsis = (NEPTUNEPERIAPSIS)
cxneptuneascending = (NEPTUNEASCENDING)
cxneptuneorbit_dt = (NEPTUNEORBIT_DT)
cxneptuneeccentricity_dt = (NEPTUNEECCENTRICITY_DT)
cxneptuneinclination_dt = (NEPTUNEINCLINATION_DT)
cxneptunelongitude_dt = (NEPTUNELONGITUDE_DT)
cxneptuneperiapsis_dt = (NEPTUNEPERIAPSIS_DT)
cxneptuneascending_dt = (NEPTUNEASCENDING_DT)
cxplutoorbit = (PLUTOORBIT)
cxplutoeccentricity = (PLUTOECCENTRICITY)
cxplutoinclination = (PLUTOINCLINATION)
cxplutolongitude = (PLUTOLONGITUDE)
cxplutoperiapsis = (PLUTOPERIAPSIS)
cxplutoascending = (PLUTOASCENDING)
cxplutoorbit_dt = (PLUTOORBIT_DT)
cxplutoeccentricity_dt = (PLUTOECCENTRICITY_DT)
cxplutoinclination_dt = (PLUTOINCLINATION_DT)
cxplutolongitude_dt = (PLUTOLONGITUDE_DT)
cxplutoperiapsis_dt = (PLUTOPERIAPSIS_DT)
cxplutoascending_dt = (PLUTOASCENDING_DT)
cxceresorbit = (CERESORBIT)
cxcereseccentricity = (CERESECCENTRICITY)
cxceresinclination = (CERESINCLINATION)
cxcereslongitude = (CERESLONGITUDE)
cxceresperiapsis = (CERESPERIAPSIS)
cxceresascending = (CERESASCENDING)
cxceresorbit_dt = (CERESORBIT_DT)
cxcereseccentricity_dt = (CERESECCENTRICITY_DT)
cxceresinclination_dt = (CERESINCLINATION_DT)
cxcereslongitude_dt = (CERESLONGITUDE_DT)
cxceresperiapsis_dt = (CERESPERIAPSIS_DT)
cxceresascending_dt = (CERESASCENDING_DT)
cxerisorbit = (ERISORBIT)
cxeriseccentricity = (ERISECCENTRICITY)
cxerisinclination = (ERISINCLINATION)
cxerislongitude = (ERISLONGITUDE)
cxerisperiapsis = (ERISPERIAPSIS)
cxerisascending = (ERISASCENDING)
cxerisorbit_dt = (ERISORBIT_DT)
cxeriseccentricity_dt = (ERISECCENTRICITY_DT)
cxerisinclination_dt = (ERISINCLINATION_DT)
cxerislongitude_dt = (ERISLONGITUDE_DT)
cxerisperiapsis_dt = (ERISPERIAPSIS_DT)
cxerisascending_dt = (ERISASCENDING_DT)
cxmakemakeorbit = (MAKEMAKEORBIT)
cxmakemakeeccentricity = (MAKEMAKEECCENTRICITY)
cxmakemakeinclination = (MAKEMAKEINCLINATION)
cxmakemakelongitude = (MAKEMAKELONGITUDE)
cxmakemakeperiapsis = (MAKEMAKEPERIAPSIS)
cxmakemakeascending = (MAKEMAKEASCENDING)
cxmakemakeorbit_dt = (MAKEMAKEORBIT_DT)
cxmakemakeeccentricity_dt = (MAKEMAKEECCENTRICITY_DT)
cxmakemakeinclination_dt = (MAKEMAKEINCLINATION_DT)
cxmakemakelongitude_dt = (MAKEMAKELONGITUDE_DT)
cxmakemakeperiapsis_dt = (MAKEMAKEPERIAPSIS_DT)
cxmakemakeascending_dt = (MAKEMAKEASCENDING_DT)
cxhaumeaorbit = (HAUMEAORBIT)
cxhaumeaeccentricity = (HAUMEAECCENTRICITY)
cxhaumeainclination = (HAUMEAINCLINATION)
cxhaumealongitude = (HAUMEALONGITUDE)
cxhaumeaperiapsis = (HAUMEAPERIAPSIS)
cxhaumeaascending = (HAUMEAASCENDING)
cxhaumeaorbit_dt = (HAUMEAORBIT_DT)
cxhaumeaeccentricity_dt = (HAUMEAECCENTRICITY_DT)
cxhaumeainclination_dt = (HAUMEAINCLINATION_DT)
cxhaumealongitude_dt = (HAUMEALONGITUDE_DT)
cxhaumeaperiapsis_dt = (HAUMEAPERIAPSIS_DT)
cxhaumeaascending_dt = (HAUMEAASCENDING_DT)
def margot(pmass, porbit):
   if (pmass <= 0.0 or porbit <= 0.0):
      retvalu = 0.0
   else:
      retvalu = 5.0401742E-10 * pmass /\
            math.exp(math.log(porbit) * 1.125)
   return (retvalu)
def sternlevison(pmass, porbit):
   if (pmass <= 0.0 or porbit <= 0.0):
      retvalu = 0.0
   else:
      xx = 2.0 * math.log(pmass) - 1.5 * math.log(porbit)
      retvalu = 2.482E-28 * math.exp(xx)
   return (retvalu)
LC_P1_PREV_PL = -1
LC_P1_SUN = 0
LC_P1_MERCURY = 1
LC_P1_VENUS = 2
LC_P1_EARTH = 3
LC_P1_MARS = 4
LC_P1_JUPITER = 5
LC_P1_SATURN = 6
LC_P1_URANUS = 7
LC_P1_NEPTUNE = 8
LC_P1_PLUTO = 9
LC_P1_CERES = 10
LC_P1_ERIS = 11
LC_P1_MAKEMAKE = 12
LC_P1_HAUMEA = 13
LC_P1_COUNT = LC_P1_HAUMEA + 1
LC_P1_ERR = -1
LC_P2_GM = 0
LC_P2_DAY = 1
LC_P2_FLATNESS = 2
LC_P2_A = 3
LC_P2_C = 4
LC_P2_YEAR = 5
LC_P2_ORB = 6
LC_P2_ECC = 7
LC_P2_INC = 8
LC_P2_LON = 9
LC_P2_PER = 10
LC_P2_ASC = 11
LC_P2_ORB_DT = 12
LC_P2_ECC_DT = 13
LC_P2_INC_DT = 14
LC_P2_LON_DT = 15
LC_P2_PER_DT = 16
LC_P2_ASC_DT = 17
LC_P2_COUNT = 18
lv_pl_helio_arr = [0 for ii in range(3)]
lv_pl_geo_arr = [0 for ii in range(3)]
lv_pl_ind = LC_P1_PREV_PL
lv_pl_mtrx = [[0 for ii in range(LC_P2_COUNT)] for ii in\
      range(LC_P1_COUNT)]
lv_pl_earth_year = EARTHYEAR
lv_pl_jtwoktime = 1.0 / 64.0
def lf_pl_init(plnt):
   global lv_pl_ind
   global lv_pl_mtrx
   if (lv_pl_ind < 0):
      lv_pl_mtrx[LC_P1_SUN][LC_P2_GM] = SUNGM
      lv_pl_mtrx[LC_P1_SUN][LC_P2_DAY] = SUNDAY
      lv_pl_mtrx[LC_P1_SUN][LC_P2_FLATNESS] = SUNFLATNESS
      lv_pl_mtrx[LC_P1_SUN][LC_P2_A] = SUN_A
      lv_pl_mtrx[LC_P1_SUN][LC_P2_C] = SUN_C
      lv_pl_mtrx[LC_P1_SUN][LC_P2_YEAR] = SUNYEAR
      lv_pl_mtrx[LC_P1_SUN][LC_P2_ORB] = SUNORBIT
      lv_pl_mtrx[LC_P1_SUN][LC_P2_ECC] = SUNECCENTRICITY
      lv_pl_mtrx[LC_P1_SUN][LC_P2_INC] = SUNINCLINATION
      lv_pl_mtrx[LC_P1_SUN][LC_P2_LON] = SUNLONGITUDE
      lv_pl_mtrx[LC_P1_SUN][LC_P2_PER] = SUNPERIAPSIS
      lv_pl_mtrx[LC_P1_SUN][LC_P2_ASC] = SUNASCENDING
      lv_pl_mtrx[LC_P1_SUN][LC_P2_ORB_DT] = SUNORBIT_DT
      lv_pl_mtrx[LC_P1_SUN][LC_P2_ECC_DT] = SUNECCENTRICITY_DT
      lv_pl_mtrx[LC_P1_SUN][LC_P2_INC_DT] = SUNINCLINATION_DT
      lv_pl_mtrx[LC_P1_SUN][LC_P2_LON_DT] = SUNLONGITUDE_DT
      lv_pl_mtrx[LC_P1_SUN][LC_P2_PER_DT] = SUNPERIAPSIS_DT
      lv_pl_mtrx[LC_P1_SUN][LC_P2_ASC_DT] = SUNASCENDING_DT
      lv_pl_mtrx[LC_P1_MERCURY][LC_P2_GM] = MERCURYGM
      lv_pl_mtrx[LC_P1_MERCURY][LC_P2_DAY] = MERCURYDAY
      lv_pl_mtrx[LC_P1_MERCURY][LC_P2_FLATNESS] = MERCURYFLATNESS
      lv_pl_mtrx[LC_P1_MERCURY][LC_P2_A] = MERCURY_A
      lv_pl_mtrx[LC_P1_MERCURY][LC_P2_C] = MERCURY_C
      lv_pl_mtrx[LC_P1_MERCURY][LC_P2_YEAR] = MERCURYYEAR
      lv_pl_mtrx[LC_P1_MERCURY][LC_P2_ORB] = MERCURYORBIT
      lv_pl_mtrx[LC_P1_MERCURY][LC_P2_ECC] = MERCURYECCENTRICITY
      lv_pl_mtrx[LC_P1_MERCURY][LC_P2_INC] = MERCURYINCLINATION
      lv_pl_mtrx[LC_P1_MERCURY][LC_P2_LON] = MERCURYLONGITUDE
      lv_pl_mtrx[LC_P1_MERCURY][LC_P2_PER] = MERCURYPERIAPSIS
      lv_pl_mtrx[LC_P1_MERCURY][LC_P2_ASC] = MERCURYASCENDING
      lv_pl_mtrx[LC_P1_MERCURY][LC_P2_ORB_DT] = MERCURYORBIT_DT
      lv_pl_mtrx[LC_P1_MERCURY][LC_P2_ECC_DT] =\
            MERCURYECCENTRICITY_DT
      lv_pl_mtrx[LC_P1_MERCURY][LC_P2_INC_DT] =\
            MERCURYINCLINATION_DT
      lv_pl_mtrx[LC_P1_MERCURY][LC_P2_LON_DT] =\
            MERCURYLONGITUDE_DT
      lv_pl_mtrx[LC_P1_MERCURY][LC_P2_PER_DT] =\
            MERCURYPERIAPSIS_DT
      lv_pl_mtrx[LC_P1_MERCURY][LC_P2_ASC_DT] =\
            MERCURYASCENDING_DT
      lv_pl_mtrx[LC_P1_VENUS][LC_P2_GM] = VENUSGM
      lv_pl_mtrx[LC_P1_VENUS][LC_P2_DAY] = VENUSDAY
      lv_pl_mtrx[LC_P1_VENUS][LC_P2_FLATNESS] = VENUSFLATNESS
      lv_pl_mtrx[LC_P1_VENUS][LC_P2_A] = VENUS_A
      lv_pl_mtrx[LC_P1_VENUS][LC_P2_C] = VENUS_C
      lv_pl_mtrx[LC_P1_VENUS][LC_P2_YEAR] = VENUSYEAR
      lv_pl_mtrx[LC_P1_VENUS][LC_P2_ORB] = VENUSORBIT
      lv_pl_mtrx[LC_P1_VENUS][LC_P2_ECC] = VENUSECCENTRICITY
      lv_pl_mtrx[LC_P1_VENUS][LC_P2_INC] = VENUSINCLINATION
      lv_pl_mtrx[LC_P1_VENUS][LC_P2_LON] = VENUSLONGITUDE
      lv_pl_mtrx[LC_P1_VENUS][LC_P2_PER] = VENUSPERIAPSIS
      lv_pl_mtrx[LC_P1_VENUS][LC_P2_ASC] = VENUSASCENDING
      lv_pl_mtrx[LC_P1_VENUS][LC_P2_ORB_DT] = VENUSORBIT_DT
      lv_pl_mtrx[LC_P1_VENUS][LC_P2_ECC_DT] =\
            VENUSECCENTRICITY_DT
      lv_pl_mtrx[LC_P1_VENUS][LC_P2_INC_DT] = VENUSINCLINATION_DT
      lv_pl_mtrx[LC_P1_VENUS][LC_P2_LON_DT] = VENUSLONGITUDE_DT
      lv_pl_mtrx[LC_P1_VENUS][LC_P2_PER_DT] = VENUSPERIAPSIS_DT
      lv_pl_mtrx[LC_P1_VENUS][LC_P2_ASC_DT] = VENUSASCENDING_DT
      lv_pl_mtrx[LC_P1_EARTH][LC_P2_GM] = EARTHGM
      lv_pl_mtrx[LC_P1_EARTH][LC_P2_DAY] = EARTHDAY
      lv_pl_mtrx[LC_P1_EARTH][LC_P2_FLATNESS] = EARTHFLATNESS
      lv_pl_mtrx[LC_P1_EARTH][LC_P2_A] = EARTH_A
      lv_pl_mtrx[LC_P1_EARTH][LC_P2_C] = EARTH_C
      lv_pl_mtrx[LC_P1_EARTH][LC_P2_YEAR] = EARTHYEAR
      lv_pl_mtrx[LC_P1_EARTH][LC_P2_ORB] = EARTHORBIT
      lv_pl_mtrx[LC_P1_EARTH][LC_P2_ECC] = EARTHECCENTRICITY
      lv_pl_mtrx[LC_P1_EARTH][LC_P2_INC] = EARTHINCLINATION
      lv_pl_mtrx[LC_P1_EARTH][LC_P2_LON] = EARTHLONGITUDE
      lv_pl_mtrx[LC_P1_EARTH][LC_P2_PER] = EARTHPERIAPSIS
      lv_pl_mtrx[LC_P1_EARTH][LC_P2_ASC] = EARTHASCENDING
      lv_pl_mtrx[LC_P1_EARTH][LC_P2_ORB_DT] = EARTHORBIT_DT
      lv_pl_mtrx[LC_P1_EARTH][LC_P2_ECC_DT] =\
            EARTHECCENTRICITY_DT
      lv_pl_mtrx[LC_P1_EARTH][LC_P2_INC_DT] = EARTHINCLINATION_DT
      lv_pl_mtrx[LC_P1_EARTH][LC_P2_LON_DT] = EARTHLONGITUDE_DT
      lv_pl_mtrx[LC_P1_EARTH][LC_P2_PER_DT] = EARTHPERIAPSIS_DT
      lv_pl_mtrx[LC_P1_EARTH][LC_P2_ASC_DT] = EARTHASCENDING_DT
      lv_pl_mtrx[LC_P1_MARS][LC_P2_GM] = MARSGM
      lv_pl_mtrx[LC_P1_MARS][LC_P2_DAY] = MARSDAY
      lv_pl_mtrx[LC_P1_MARS][LC_P2_FLATNESS] = MARSFLATNESS
      lv_pl_mtrx[LC_P1_MARS][LC_P2_A] = MARS_A
      lv_pl_mtrx[LC_P1_MARS][LC_P2_C] = MARS_C
      lv_pl_mtrx[LC_P1_MARS][LC_P2_YEAR] = MARSYEAR
      lv_pl_mtrx[LC_P1_MARS][LC_P2_ORB] = MARSORBIT
      lv_pl_mtrx[LC_P1_MARS][LC_P2_ECC] = MARSECCENTRICITY
      lv_pl_mtrx[LC_P1_MARS][LC_P2_INC] = MARSINCLINATION
      lv_pl_mtrx[LC_P1_MARS][LC_P2_LON] = MARSLONGITUDE
      lv_pl_mtrx[LC_P1_MARS][LC_P2_PER] = MARSPERIAPSIS
      lv_pl_mtrx[LC_P1_MARS][LC_P2_ASC] = MARSASCENDING
      lv_pl_mtrx[LC_P1_MARS][LC_P2_ORB_DT] = MARSORBIT_DT
      lv_pl_mtrx[LC_P1_MARS][LC_P2_ECC_DT] = MARSECCENTRICITY_DT
      lv_pl_mtrx[LC_P1_MARS][LC_P2_INC_DT] = MARSINCLINATION_DT
      lv_pl_mtrx[LC_P1_MARS][LC_P2_LON_DT] = MARSLONGITUDE_DT
      lv_pl_mtrx[LC_P1_MARS][LC_P2_PER_DT] = MARSPERIAPSIS_DT
      lv_pl_mtrx[LC_P1_MARS][LC_P2_ASC_DT] = MARSASCENDING_DT
      lv_pl_mtrx[LC_P1_JUPITER][LC_P2_GM] = JUPITERGM
      lv_pl_mtrx[LC_P1_JUPITER][LC_P2_DAY] = JUPITERDAY
      lv_pl_mtrx[LC_P1_JUPITER][LC_P2_FLATNESS] = JUPITERFLATNESS
      lv_pl_mtrx[LC_P1_JUPITER][LC_P2_A] = JUPITER_A
      lv_pl_mtrx[LC_P1_JUPITER][LC_P2_C] = JUPITER_C
      lv_pl_mtrx[LC_P1_JUPITER][LC_P2_YEAR] = JUPITERYEAR
      lv_pl_mtrx[LC_P1_JUPITER][LC_P2_ORB] = JUPITERORBIT
      lv_pl_mtrx[LC_P1_JUPITER][LC_P2_ECC] = JUPITERECCENTRICITY
      lv_pl_mtrx[LC_P1_JUPITER][LC_P2_INC] = JUPITERINCLINATION
      lv_pl_mtrx[LC_P1_JUPITER][LC_P2_LON] = JUPITERLONGITUDE
      lv_pl_mtrx[LC_P1_JUPITER][LC_P2_PER] = JUPITERPERIAPSIS
      lv_pl_mtrx[LC_P1_JUPITER][LC_P2_ASC] = JUPITERASCENDING
      lv_pl_mtrx[LC_P1_JUPITER][LC_P2_ORB_DT] = JUPITERORBIT_DT
      lv_pl_mtrx[LC_P1_JUPITER][LC_P2_ECC_DT] =\
            JUPITERECCENTRICITY_DT
      lv_pl_mtrx[LC_P1_JUPITER][LC_P2_INC_DT] =\
            JUPITERINCLINATION_DT
      lv_pl_mtrx[LC_P1_JUPITER][LC_P2_LON_DT] =\
            JUPITERLONGITUDE_DT
      lv_pl_mtrx[LC_P1_JUPITER][LC_P2_PER_DT] =\
            JUPITERPERIAPSIS_DT
      lv_pl_mtrx[LC_P1_JUPITER][LC_P2_ASC_DT] =\
            JUPITERASCENDING_DT
      lv_pl_mtrx[LC_P1_SATURN][LC_P2_GM] = SATURNGM
      lv_pl_mtrx[LC_P1_SATURN][LC_P2_DAY] = SATURNDAY
      lv_pl_mtrx[LC_P1_SATURN][LC_P2_FLATNESS] = SATURNFLATNESS
      lv_pl_mtrx[LC_P1_SATURN][LC_P2_A] = SATURN_A
      lv_pl_mtrx[LC_P1_SATURN][LC_P2_C] = SATURN_C
      lv_pl_mtrx[LC_P1_SATURN][LC_P2_YEAR] = SATURNYEAR
      lv_pl_mtrx[LC_P1_SATURN][LC_P2_ORB] = SATURNORBIT
      lv_pl_mtrx[LC_P1_SATURN][LC_P2_ECC] = SATURNECCENTRICITY
      lv_pl_mtrx[LC_P1_SATURN][LC_P2_INC] = SATURNINCLINATION
      lv_pl_mtrx[LC_P1_SATURN][LC_P2_LON] = SATURNLONGITUDE
      lv_pl_mtrx[LC_P1_SATURN][LC_P2_PER] = SATURNPERIAPSIS
      lv_pl_mtrx[LC_P1_SATURN][LC_P2_ASC] = SATURNASCENDING
      lv_pl_mtrx[LC_P1_SATURN][LC_P2_ORB_DT] = SATURNORBIT_DT
      lv_pl_mtrx[LC_P1_SATURN][LC_P2_ECC_DT] =\
            SATURNECCENTRICITY_DT
      lv_pl_mtrx[LC_P1_SATURN][LC_P2_INC_DT] =\
            SATURNINCLINATION_DT
      lv_pl_mtrx[LC_P1_SATURN][LC_P2_LON_DT] = SATURNLONGITUDE_DT
      lv_pl_mtrx[LC_P1_SATURN][LC_P2_PER_DT] = SATURNPERIAPSIS_DT
      lv_pl_mtrx[LC_P1_SATURN][LC_P2_ASC_DT] = SATURNASCENDING_DT
      lv_pl_mtrx[LC_P1_URANUS][LC_P2_GM] = URANUSGM
      lv_pl_mtrx[LC_P1_URANUS][LC_P2_DAY] = URANUSDAY
      lv_pl_mtrx[LC_P1_URANUS][LC_P2_FLATNESS] = URANUSFLATNESS
      lv_pl_mtrx[LC_P1_URANUS][LC_P2_A] = URANUS_A
      lv_pl_mtrx[LC_P1_URANUS][LC_P2_C] = URANUS_C
      lv_pl_mtrx[LC_P1_URANUS][LC_P2_YEAR] = URANUSYEAR
      lv_pl_mtrx[LC_P1_URANUS][LC_P2_ORB] = URANUSORBIT
      lv_pl_mtrx[LC_P1_URANUS][LC_P2_ECC] = URANUSECCENTRICITY
      lv_pl_mtrx[LC_P1_URANUS][LC_P2_INC] = URANUSINCLINATION
      lv_pl_mtrx[LC_P1_URANUS][LC_P2_LON] = URANUSLONGITUDE
      lv_pl_mtrx[LC_P1_URANUS][LC_P2_PER] = URANUSPERIAPSIS
      lv_pl_mtrx[LC_P1_URANUS][LC_P2_ASC] = URANUSASCENDING
      lv_pl_mtrx[LC_P1_URANUS][LC_P2_ORB_DT] = URANUSORBIT_DT
      lv_pl_mtrx[LC_P1_URANUS][LC_P2_ECC_DT] =\
            URANUSECCENTRICITY_DT
      lv_pl_mtrx[LC_P1_URANUS][LC_P2_INC_DT] =\
            URANUSINCLINATION_DT
      lv_pl_mtrx[LC_P1_URANUS][LC_P2_LON_DT] = URANUSLONGITUDE_DT
      lv_pl_mtrx[LC_P1_URANUS][LC_P2_PER_DT] = URANUSPERIAPSIS_DT
      lv_pl_mtrx[LC_P1_URANUS][LC_P2_ASC_DT] = URANUSASCENDING_DT
      lv_pl_mtrx[LC_P1_NEPTUNE][LC_P2_GM] = NEPTUNEGM
      lv_pl_mtrx[LC_P1_NEPTUNE][LC_P2_DAY] = NEPTUNEDAY
      lv_pl_mtrx[LC_P1_NEPTUNE][LC_P2_FLATNESS] = NEPTUNEFLATNESS
      lv_pl_mtrx[LC_P1_NEPTUNE][LC_P2_A] = NEPTUNE_A
      lv_pl_mtrx[LC_P1_NEPTUNE][LC_P2_C] = NEPTUNE_C
      lv_pl_mtrx[LC_P1_NEPTUNE][LC_P2_YEAR] = NEPTUNEYEAR
      lv_pl_mtrx[LC_P1_NEPTUNE][LC_P2_ORB] = NEPTUNEORBIT
      lv_pl_mtrx[LC_P1_NEPTUNE][LC_P2_ECC] = NEPTUNEECCENTRICITY
      lv_pl_mtrx[LC_P1_NEPTUNE][LC_P2_INC] = NEPTUNEINCLINATION
      lv_pl_mtrx[LC_P1_NEPTUNE][LC_P2_LON] = NEPTUNELONGITUDE
      lv_pl_mtrx[LC_P1_NEPTUNE][LC_P2_PER] = NEPTUNEPERIAPSIS
      lv_pl_mtrx[LC_P1_NEPTUNE][LC_P2_ASC] = NEPTUNEASCENDING
      lv_pl_mtrx[LC_P1_NEPTUNE][LC_P2_ORB_DT] = NEPTUNEORBIT_DT
      lv_pl_mtrx[LC_P1_NEPTUNE][LC_P2_ECC_DT] =\
            NEPTUNEECCENTRICITY_DT
      lv_pl_mtrx[LC_P1_NEPTUNE][LC_P2_INC_DT] =\
            NEPTUNEINCLINATION_DT
      lv_pl_mtrx[LC_P1_NEPTUNE][LC_P2_LON_DT] =\
            NEPTUNELONGITUDE_DT
      lv_pl_mtrx[LC_P1_NEPTUNE][LC_P2_PER_DT] =\
            NEPTUNEPERIAPSIS_DT
      lv_pl_mtrx[LC_P1_NEPTUNE][LC_P2_ASC_DT] =\
            NEPTUNEASCENDING_DT
      lv_pl_mtrx[LC_P1_PLUTO][LC_P2_GM] = PLUTOGM
      lv_pl_mtrx[LC_P1_PLUTO][LC_P2_DAY] = PLUTODAY
      lv_pl_mtrx[LC_P1_PLUTO][LC_P2_FLATNESS] = PLUTOFLATNESS
      lv_pl_mtrx[LC_P1_PLUTO][LC_P2_A] = PLUTO_A
      lv_pl_mtrx[LC_P1_PLUTO][LC_P2_C] = PLUTO_C
      lv_pl_mtrx[LC_P1_PLUTO][LC_P2_YEAR] = PLUTOYEAR
      lv_pl_mtrx[LC_P1_PLUTO][LC_P2_ORB] = PLUTOORBIT
      lv_pl_mtrx[LC_P1_PLUTO][LC_P2_ECC] = PLUTOECCENTRICITY
      lv_pl_mtrx[LC_P1_PLUTO][LC_P2_INC] = PLUTOINCLINATION
      lv_pl_mtrx[LC_P1_PLUTO][LC_P2_LON] = PLUTOLONGITUDE
      lv_pl_mtrx[LC_P1_PLUTO][LC_P2_PER] = PLUTOPERIAPSIS
      lv_pl_mtrx[LC_P1_PLUTO][LC_P2_ASC] = PLUTOASCENDING
      lv_pl_mtrx[LC_P1_PLUTO][LC_P2_ORB_DT] = PLUTOORBIT_DT
      lv_pl_mtrx[LC_P1_PLUTO][LC_P2_ECC_DT] =\
            PLUTOECCENTRICITY_DT
      lv_pl_mtrx[LC_P1_PLUTO][LC_P2_INC_DT] = PLUTOINCLINATION_DT
      lv_pl_mtrx[LC_P1_PLUTO][LC_P2_LON_DT] = PLUTOLONGITUDE_DT
      lv_pl_mtrx[LC_P1_PLUTO][LC_P2_PER_DT] = PLUTOPERIAPSIS_DT
      lv_pl_mtrx[LC_P1_PLUTO][LC_P2_ASC_DT] = PLUTOASCENDING_DT
      lv_pl_mtrx[LC_P1_CERES][LC_P2_GM] = CERESGM
      lv_pl_mtrx[LC_P1_CERES][LC_P2_DAY] = CERESDAY
      lv_pl_mtrx[LC_P1_CERES][LC_P2_FLATNESS] = CERESFLATNESS
      lv_pl_mtrx[LC_P1_CERES][LC_P2_A] = CERES_A
      lv_pl_mtrx[LC_P1_CERES][LC_P2_C] = CERES_C
      lv_pl_mtrx[LC_P1_CERES][LC_P2_YEAR] = CERESYEAR
      lv_pl_mtrx[LC_P1_CERES][LC_P2_ORB] = CERESORBIT
      lv_pl_mtrx[LC_P1_CERES][LC_P2_ECC] = CERESECCENTRICITY
      lv_pl_mtrx[LC_P1_CERES][LC_P2_INC] = CERESINCLINATION
      lv_pl_mtrx[LC_P1_CERES][LC_P2_LON] = CERESLONGITUDE
      lv_pl_mtrx[LC_P1_CERES][LC_P2_PER] = CERESPERIAPSIS
      lv_pl_mtrx[LC_P1_CERES][LC_P2_ASC] = CERESASCENDING
      lv_pl_mtrx[LC_P1_CERES][LC_P2_ORB_DT] = CERESORBIT_DT
      lv_pl_mtrx[LC_P1_CERES][LC_P2_ECC_DT] =\
            CERESECCENTRICITY_DT
      lv_pl_mtrx[LC_P1_CERES][LC_P2_INC_DT] = CERESINCLINATION_DT
      lv_pl_mtrx[LC_P1_CERES][LC_P2_LON_DT] = CERESLONGITUDE_DT
      lv_pl_mtrx[LC_P1_CERES][LC_P2_PER_DT] = CERESPERIAPSIS_DT
      lv_pl_mtrx[LC_P1_CERES][LC_P2_ASC_DT] = CERESASCENDING_DT
      lv_pl_mtrx[LC_P1_ERIS][LC_P2_GM] = ERISGM
      lv_pl_mtrx[LC_P1_ERIS][LC_P2_DAY] = ERISDAY
      lv_pl_mtrx[LC_P1_ERIS][LC_P2_FLATNESS] = ERISFLATNESS
      lv_pl_mtrx[LC_P1_ERIS][LC_P2_A] = ERIS_A
      lv_pl_mtrx[LC_P1_ERIS][LC_P2_C] = ERIS_C
      lv_pl_mtrx[LC_P1_ERIS][LC_P2_YEAR] = ERISYEAR
      lv_pl_mtrx[LC_P1_ERIS][LC_P2_ORB] = ERISORBIT
      lv_pl_mtrx[LC_P1_ERIS][LC_P2_ECC] = ERISECCENTRICITY
      lv_pl_mtrx[LC_P1_ERIS][LC_P2_INC] = ERISINCLINATION
      lv_pl_mtrx[LC_P1_ERIS][LC_P2_LON] = ERISLONGITUDE
      lv_pl_mtrx[LC_P1_ERIS][LC_P2_PER] = ERISPERIAPSIS
      lv_pl_mtrx[LC_P1_ERIS][LC_P2_ASC] = ERISASCENDING
      lv_pl_mtrx[LC_P1_ERIS][LC_P2_ORB_DT] = ERISORBIT_DT
      lv_pl_mtrx[LC_P1_ERIS][LC_P2_ECC_DT] = ERISECCENTRICITY_DT
      lv_pl_mtrx[LC_P1_ERIS][LC_P2_INC_DT] = ERISINCLINATION_DT
      lv_pl_mtrx[LC_P1_ERIS][LC_P2_LON_DT] = ERISLONGITUDE_DT
      lv_pl_mtrx[LC_P1_ERIS][LC_P2_PER_DT] = ERISPERIAPSIS_DT
      lv_pl_mtrx[LC_P1_ERIS][LC_P2_ASC_DT] = ERISASCENDING_DT
      lv_pl_mtrx[LC_P1_MAKEMAKE][LC_P2_GM] = MAKEMAKEGM
      lv_pl_mtrx[LC_P1_MAKEMAKE][LC_P2_DAY] = MAKEMAKEDAY
      lv_pl_mtrx[LC_P1_MAKEMAKE][LC_P2_FLATNESS] =\
            MAKEMAKEFLATNESS
      lv_pl_mtrx[LC_P1_MAKEMAKE][LC_P2_A] = MAKEMAKE_A
      lv_pl_mtrx[LC_P1_MAKEMAKE][LC_P2_C] = MAKEMAKE_C
      lv_pl_mtrx[LC_P1_MAKEMAKE][LC_P2_YEAR] = MAKEMAKEYEAR
      lv_pl_mtrx[LC_P1_MAKEMAKE][LC_P2_ORB] = MAKEMAKEORBIT
      lv_pl_mtrx[LC_P1_MAKEMAKE][LC_P2_ECC] =\
            MAKEMAKEECCENTRICITY
      lv_pl_mtrx[LC_P1_MAKEMAKE][LC_P2_INC] = MAKEMAKEINCLINATION
      lv_pl_mtrx[LC_P1_MAKEMAKE][LC_P2_LON] = MAKEMAKELONGITUDE
      lv_pl_mtrx[LC_P1_MAKEMAKE][LC_P2_PER] = MAKEMAKEPERIAPSIS
      lv_pl_mtrx[LC_P1_MAKEMAKE][LC_P2_ASC] = MAKEMAKEASCENDING
      lv_pl_mtrx[LC_P1_MAKEMAKE][LC_P2_ORB_DT] = MAKEMAKEORBIT_DT
      lv_pl_mtrx[LC_P1_MAKEMAKE][LC_P2_ECC_DT] =\
            MAKEMAKEECCENTRICITY_DT
      lv_pl_mtrx[LC_P1_MAKEMAKE][LC_P2_INC_DT] =\
            MAKEMAKEINCLINATION_DT
      lv_pl_mtrx[LC_P1_MAKEMAKE][LC_P2_LON_DT] =\
            MAKEMAKELONGITUDE_DT
      lv_pl_mtrx[LC_P1_MAKEMAKE][LC_P2_PER_DT] =\
            MAKEMAKEPERIAPSIS_DT
      lv_pl_mtrx[LC_P1_MAKEMAKE][LC_P2_ASC_DT] =\
            MAKEMAKEASCENDING_DT
      lv_pl_mtrx[LC_P1_HAUMEA][LC_P2_GM] = HAUMEAGM
      lv_pl_mtrx[LC_P1_HAUMEA][LC_P2_DAY] = HAUMEADAY
      lv_pl_mtrx[LC_P1_HAUMEA][LC_P2_FLATNESS] = HAUMEAFLATNESS
      lv_pl_mtrx[LC_P1_HAUMEA][LC_P2_A] = HAUMEA_A
      lv_pl_mtrx[LC_P1_HAUMEA][LC_P2_C] = HAUMEA_C
      lv_pl_mtrx[LC_P1_HAUMEA][LC_P2_YEAR] = HAUMEAYEAR
      lv_pl_mtrx[LC_P1_HAUMEA][LC_P2_ORB] = HAUMEAORBIT
      lv_pl_mtrx[LC_P1_HAUMEA][LC_P2_ECC] = HAUMEAECCENTRICITY
      lv_pl_mtrx[LC_P1_HAUMEA][LC_P2_INC] = HAUMEAINCLINATION
      lv_pl_mtrx[LC_P1_HAUMEA][LC_P2_LON] = HAUMEALONGITUDE
      lv_pl_mtrx[LC_P1_HAUMEA][LC_P2_PER] = HAUMEAPERIAPSIS
      lv_pl_mtrx[LC_P1_HAUMEA][LC_P2_ASC] = HAUMEAASCENDING
      lv_pl_mtrx[LC_P1_HAUMEA][LC_P2_ORB_DT] = HAUMEAORBIT_DT
      lv_pl_mtrx[LC_P1_HAUMEA][LC_P2_ECC_DT] =\
            HAUMEAECCENTRICITY_DT
      lv_pl_mtrx[LC_P1_HAUMEA][LC_P2_INC_DT] =\
            HAUMEAINCLINATION_DT
      lv_pl_mtrx[LC_P1_HAUMEA][LC_P2_LON_DT] = HAUMEALONGITUDE_DT
      lv_pl_mtrx[LC_P1_HAUMEA][LC_P2_PER_DT] = HAUMEAPERIAPSIS_DT
      lv_pl_mtrx[LC_P1_HAUMEA][LC_P2_ASC_DT] = HAUMEAASCENDING_DT
      if (0 < lv_pl_jtwoktime and lv_pl_jtwoktime < 1.0 / 32.0):
         plsettime(Kw.uet2j2k(Kw.timee()))
      lv_pl_earth_year = EARTHYEAR
   if (LC_P1_SUN <= plnt and plnt < LC_P1_COUNT):
      lv_pl_ind = plnt
   elif (plnt == LC_P1_PREV_PL):
      if (lv_pl_ind < 0):
         lv_pl_ind = LC_P1_EARTH
   else:
      lv_pl_ind = LC_P1_PREV_PL
   return int(lv_pl_ind)
def lf_val(pa_ind, pb_bb, pb_bbd):
   if (pa_ind < LC_P1_PREV_PL or LC_P1_COUNT <= pa_ind):
      retvalu = LC_P1_ERR
   else:
      pl_ind = pl(pa_ind)
      retvalu = (lv_pl_mtrx[pl_ind][pb_bb] + lv_pl_jtwoktime\
            * lv_pl_mtrx[pl_ind][pb_bbd])
   return (retvalu)
def pl(plnt):
   return int((lf_pl_init(plnt)))
def plsettime(jtwokdate):
   lv_pl_jtwoktime = jtwokdate * Kw.JD
   return (lv_pl_jtwoktime)
def pl_gm(plnt):
   global lv_pl_mtrx
   global lv_pl_ind
   lf_pl_init(plnt)
   if (LC_P1_SUN <= plnt and plnt < LC_P1_COUNT):
      retvalu = lv_pl_mtrx[plnt][LC_P2_GM]
   elif (plnt == LC_P1_PREV_PL):
      retvalu = lv_pl_mtrx[lv_pl_ind][LC_P2_GM]
   else:
      retvalu = LC_P1_ERR
   return (retvalu)
def plgm():
   global lv_pl_ind
   return (pl_gm(LC_P1_PREV_PL))
def pl_year(plnt):
   global lv_pl_mtrx
   global lv_pl_ind
   lf_pl_init(plnt)
   if (LC_P1_SUN <= plnt and plnt < LC_P1_COUNT):
      retvalu = lv_pl_mtrx[plnt][LC_P2_YEAR]
   elif (plnt == LC_P1_PREV_PL):
      retvalu = lv_pl_mtrx[lv_pl_ind][LC_P2_YEAR]
   else:
      retvalu = LC_P1_ERR
   return (retvalu)
def plyear():
   global lv_pl_ind
   return (pl_year(LC_P1_PREV_PL))
def pl_day(plnt):
   global lv_pl_mtrx
   global lv_pl_ind
   lf_pl_init(plnt)
   if (LC_P1_SUN <= plnt and plnt < LC_P1_COUNT):
      retvalu = lv_pl_mtrx[plnt][LC_P2_DAY]
   elif (plnt == LC_P1_PREV_PL):
      retvalu = lv_pl_mtrx[lv_pl_ind][LC_P2_DAY]
   else:
      retvalu = LC_P1_ERR
   return (retvalu)
def plday():
   global lv_pl_ind
   return (pl_day(LC_P1_PREV_PL))
def pl_flatness(plnt):
   global lv_pl_mtrx
   global lv_pl_ind
   lf_pl_init(plnt)
   if (LC_P1_SUN <= plnt and plnt < LC_P1_COUNT):
      retvalu = lv_pl_mtrx[plnt][LC_P2_FLATNESS]
   elif (plnt == LC_P1_PREV_PL):
      retvalu = lv_pl_mtrx[lv_pl_ind][LC_P2_FLATNESS]
   else:
      retvalu = LC_P1_ERR
   return (retvalu)
def plflatness():
   global lv_pl_ind
   return (pl_flatness(LC_P1_PREV_PL))
def pl_a(plnt):
   global lv_pl_mtrx
   global lv_pl_ind
   lf_pl_init(plnt)
   if (LC_P1_SUN <= plnt and plnt < LC_P1_COUNT):
      retvalu = lv_pl_mtrx[plnt][LC_P2_A]
   elif (plnt == LC_P1_PREV_PL):
      retvalu = lv_pl_mtrx[lv_pl_ind][LC_P2_A]
   else:
      retvalu = LC_P1_ERR
   return (retvalu)
def pla():
   global lv_pl_ind
   return (pl_a(LC_P1_PREV_PL))
def pl_c(plnt):
   global lv_pl_mtrx
   global lv_pl_ind
   lf_pl_init(plnt)
   if (LC_P1_SUN <= plnt and plnt < LC_P1_COUNT):
      retvalu = lv_pl_mtrx[plnt][LC_P2_C]
   elif (plnt == LC_P1_PREV_PL):
      retvalu = lv_pl_mtrx[lv_pl_ind][LC_P2_C]
   else:
      retvalu = LC_P1_ERR
   return (retvalu)
def plc():
   global lv_pl_ind
   return (pl_c(LC_P1_PREV_PL))
def pl_orbit(plnt):
   return (lf_val(plnt, LC_P2_ORB, LC_P2_ORB_DT))
def plorbit():
   global lv_pl_ind
   return (pl_orbit(LC_P1_PREV_PL))
def pl_eccentricity(plnt):
   return (lf_val(plnt, LC_P2_ECC, LC_P2_ECC_DT))
def pleccentricity():
   global lv_pl_ind
   return (pl_eccentricity(LC_P1_PREV_PL))
def pl_inclination(plnt):
   return (lf_val(plnt, LC_P2_INC, LC_P2_INC_DT))
def plinclination():
   global lv_pl_ind
   return (pl_inclination(LC_P1_PREV_PL))
def pl_longitude(plnt):
   return (lf_val(plnt, LC_P2_LON, LC_P2_LON_DT))
def pllongitude():
   global lv_pl_ind
   return (pl_longitude(LC_P1_PREV_PL))
def pl_periapsis(plnt):
   return (lf_val(plnt, LC_P2_PER, LC_P2_PER_DT))
def plperiapsis():
   global lv_pl_ind
   return (pl_periapsis(LC_P1_PREV_PL))
def pl_ascending(plnt):
   return (lf_val(plnt, LC_P2_ASC, LC_P2_ASC_DT))
def plascending():
   global lv_pl_ind
   return (pl_ascending(LC_P1_PREV_PL))
def pl_mass(plnt):
   if (plnt < LC_P1_PREV_PL or LC_P1_COUNT <= plnt):
      retvalu = LC_P1_ERR
   else:
      retvalu = pl_gm(plnt) / Kw.GRAVITATION
   return (retvalu)
def plmass():
   global lv_pl_ind
   return (pl_mass(LC_P1_PREV_PL))
def pl_b(plnt):
   if (plnt < LC_P1_PREV_PL or LC_P1_COUNT <= plnt):
      retvalu = LC_P1_ERR
   else:
      retvalu = (1.0 - pl_flatness(plnt)) * pl_a(plnt)
   return (retvalu)
def plb():
   global lv_pl_ind
   return (pl_b(LC_P1_PREV_PL))
def pl_radius(plnt):
   if (plnt < LC_P1_PREV_PL or LC_P1_COUNT <= plnt):
      retvalu = LC_P1_ERR
   else:
      retvalu = (pl_a(plnt) + pl_b(plnt) + pl_c(plnt)) / 3.0
   return (retvalu)
def plradius():
   global lv_pl_ind
   return (pl_radius(LC_P1_PREV_PL))
def pl_gravity(plnt):
   if (plnt < LC_P1_PREV_PL or LC_P1_COUNT <= plnt):
      retvalu = LC_P1_ERR
   else:
      retvalu = pl_gm(plnt) / Kw.square(pl_radius(plnt))
   return (retvalu)
def plgravity():
   global lv_pl_ind
   return (pl_gravity(LC_P1_PREV_PL))
def pl_meananomaly(plnt):
   if (plnt < LC_P1_PREV_PL or LC_P1_COUNT <= plnt):
      retvalu = LC_P1_ERR
   else:
      retvalu = Kw.fmodu(pl_longitude(plnt) -\
            pl_periapsis(plnt), Kw.TAU)
   return (retvalu)
def plmeananomaly():
   global lv_pl_ind
   return (pl_meananomaly(LC_P1_PREV_PL))
def pl_escape(plnt):
   if (plnt < LC_P1_PREV_PL or LC_P1_COUNT <= plnt):
      retvalu = LC_P1_ERR
   else:
      retvalu = math.sqrt(2.0 * pl_gm(plnt) / pl_radius(plnt))
   return (retvalu)
def plescape():
   global lv_pl_ind
   return (pl_escape(LC_P1_PREV_PL))
def pl_synodic(plnt):
   global lv_pl_earth_year
   if (plnt < LC_P1_PREV_PL or LC_P1_COUNT <= plnt):
      retvalu = LC_P1_ERR
   else:
      yra = pl_year(plnt)
      retvalu = Kw.divi(yra * lv_pl_earth_year, math.fabs(yra\
            - lv_pl_earth_year), 0.0)
   return (retvalu)
def plsynodic():
   global lv_pl_ind
   return (pl_synodic(LC_P1_PREV_PL))
def pl_volume(plnt):
   if (plnt < LC_P1_PREV_PL or LC_P1_COUNT <= plnt):
      retvalu = LC_P1_ERR
   else:
      retvalu = 2.0 * Kw.TAU * pl_a(plnt) * pl_b(plnt) *\
            pl_c(plnt) / 3.0
   return (retvalu)
def plvolume():
   global lv_pl_ind
   return (pl_volume(LC_P1_PREV_PL))
def pl_surface(plnt):
   if (plnt < LC_P1_PREV_PL or LC_P1_COUNT <= plnt):
      retvalu = LC_P1_ERR
   else:
      retvalu = Kw.ellipsoid_surface(pl_a(plnt), pl_b(plnt),\
            pl_c(plnt))
   return (retvalu)
def plsurface():
   global lv_pl_ind
   return (pl_surface(LC_P1_PREV_PL))
def pl_density(plnt):
   if (plnt < LC_P1_PREV_PL or LC_P1_COUNT <= plnt):
      retvalu = LC_P1_ERR
   else:
      retvalu = pl_mass(plnt) / pl_volume(plnt)
   return (retvalu)
def pldensity():
   global lv_pl_ind
   return (pl_density(LC_P1_PREV_PL))
def pl_argument(plnt):
   if (plnt < LC_P1_PREV_PL or LC_P1_COUNT <= plnt):
      retvalu = LC_P1_ERR
   else:
      retvalu = pl_periapsis(plnt) - pl_ascending(plnt)
   return (retvalu)
def plargument():
   global lv_pl_ind
   return (pl_argument(LC_P1_PREV_PL))
def pl_margot(plnt):
   if (plnt < LC_P1_PREV_PL or LC_P1_COUNT <= plnt):
      retvalu = LC_P1_ERR
   else:
      retvalu = margot(pl_mass(plnt), pl_orbit(plnt))
   return (retvalu)
def plmargot():
   global lv_pl_ind
   return (pl_margot(LC_P1_PREV_PL))
def pl_sternlevison(plnt):
   if (plnt < LC_P1_PREV_PL or LC_P1_COUNT <= plnt):
      retvalu = LC_P1_ERR
   else:
      retvalu = sternlevison(pl_mass(plnt), pl_orbit(plnt))
   return (retvalu)
def plsternlevison():
   global lv_pl_ind
   return (pl_sternlevison(LC_P1_PREV_PL))
def pl_perihelion(plnt):
   if (plnt < LC_P1_PREV_PL or LC_P1_COUNT <= plnt):
      retvalu = LC_P1_ERR
   else:
      retvalu = pl_orbit(plnt) * (1.0 - pl_eccentricity(plnt))
   return (retvalu)
def plperihelion():
   global lv_pl_ind
   return (pl_perihelion(LC_P1_PREV_PL))
def pl_aphelion(plnt):
   if (plnt < LC_P1_PREV_PL or LC_P1_COUNT <= plnt):
      retvalu = LC_P1_ERR
   else:
      retvalu = pl_orbit(plnt) * (1.0 + pl_eccentricity(plnt))
   return (retvalu)
def plaphelion():
   global lv_pl_ind
   return (pl_aphelion(LC_P1_PREV_PL))
def eccentric_anomaly(mean_ano_rad, eccen):
   mrad = Kw.fmodu(mean_ano_rad, Kw.tur2rad(1.0))
   xrad = mrad + eccen * math.sin(mrad)
   nrvx_xx = xrad
   for nrvx_ii in range(0, 21, 1):
      nrvx_xp = nrvx_xx
      nrvx_dy = 1.0 - eccen * math.cos(nrvx_xx)
      if (Kw.iszero(nrvx_dy)):
         break
      nrvx_yy = nrvx_xx - eccen * math.sin(nrvx_xx) -\
            mean_ano_rad
      nrvx_xx -= nrvx_yy / nrvx_dy
      if (Kw.iseq(nrvx_xp, nrvx_xx)):
         break
   return (nrvx_xx)
def pl_eccentricanomaly(plnt):
   if (plnt < LC_P1_PREV_PL or LC_P1_COUNT <= plnt):
      retvalu = LC_P1_ERR
   else:
      retvalu = eccentric_anomaly(pl_meananomaly(plnt),\
            pl_eccentricity(plnt))
   return (retvalu)
def pleccentricanomaly():
   global lv_pl_ind
   return (pl_eccentricanomaly(LC_P1_PREV_PL))
def pl_heliocentric(plnt, jtwok):
   global lv_pl_helio_arr
   global lv_pl_geo_arr
   if (lf_pl_init(plnt) < 0.0):
      retvalu = LC_P1_ERR
   else:
      plsettime(jtwok)
      orb_m = plorbit()
      eccen = pleccentricity()
      inc_rad = plinclination()
      lon_rad = pllongitude()
      per_rad = plperiapsis()
      asc_rad = plascending()
      arg_rad = per_rad - asc_rad
      mean_anomaly_rad = Kw.fmod(lon_rad - per_rad,\
            Kw.tur2rad(1.0))
      eano_rad = eccentric_anomaly(mean_anomaly_rad, eccen)
      dxx_m = orb_m * (math.cos(eano_rad) - eccen)
      dyy_m = orb_m * Kw.topyh1(eccen) * math.sin(eano_rad)
      cw = math.cos(arg_rad)
      sw = math.sin(arg_rad)
      co = math.cos(asc_rad)
      so = math.sin(asc_rad)
      ci = math.cos(inc_rad)
      si = math.sin(inc_rad)
      swci = sw * ci
      cwci = cw * ci
      lv_pl_helio_arr[0] = (dxx_m * (cw * co - swci * so) -\
            dyy_m * (sw * co + cwci * so))
      lv_pl_helio_arr[1] = (dxx_m * (cw * so + swci * co) -\
            dyy_m * (sw * so - cwci * co))
      lv_pl_helio_arr[2] = (dxx_m * (sw * si) + dyy_m * (cw *\
            si))
      obl_rad = earth_obliquity(jtwok)
      co = math.cos(obl_rad)
      so = math.sin(obl_rad)
      lv_pl_geo_arr[0] = lv_pl_helio_arr[0]
      lv_pl_geo_arr[1] = co * lv_pl_helio_arr[1] - so *\
            lv_pl_helio_arr[2]
      lv_pl_geo_arr[2] = so * lv_pl_helio_arr[1] + co *\
            lv_pl_helio_arr[2]
      retvalu = Kw.hypot3(lv_pl_helio_arr[0],\
            lv_pl_helio_arr[1], lv_pl_helio_arr[2])
   return (retvalu)
def plhelio(indd):
   global lv_pl_helio_arr
   if (0 <= indd and indd < 3):
      retvalu = lv_pl_helio_arr[indd]
   else:
      retvalu = 0.0
   return (retvalu)
def plgeo(indd):
   global lv_pl_geo_arr
   if (0 <= indd and indd < 3):
      retvalu = lv_pl_geo_arr[indd]
   else:
      retvalu = 0.0
   return (retvalu)
def pl_name(plnt):
   plnt_ind = lf_pl_init(plnt)
   if (plnt_ind == LC_P1_SUN):
      print("SUN      ", end='')
   elif (plnt_ind == LC_P1_MERCURY):
      print("MERCURY  ", end='')
   elif (plnt_ind == LC_P1_VENUS):
      print("VENUS    ", end='')
   elif (plnt_ind == LC_P1_EARTH):
      print("EARTH    ", end='')
   elif (plnt_ind == LC_P1_MARS):
      print("MARS     ", end='')
   elif (plnt_ind == LC_P1_JUPITER):
      print("JUPITER  ", end='')
   elif (plnt_ind == LC_P1_SATURN):
      print("SATURN   ", end='')
   elif (plnt_ind == LC_P1_URANUS):
      print("URANUS   ", end='')
   elif (plnt_ind == LC_P1_NEPTUNE):
      print("NEPTUNE  ", end='')
   elif (plnt_ind == LC_P1_PLUTO):
      print("PLUTO    ", end='')
   elif (plnt_ind == LC_P1_CERES):
      print("CERES    ", end='')
   elif (plnt_ind == LC_P1_ERIS):
      print("ERIS     ", end='')
   elif (plnt_ind == LC_P1_MAKEMAKE):
      print("MAKEMAKE ", end='')
   elif (plnt_ind == LC_P1_HAUMEA):
      print("HAUMEA   ", end='')
   else:
      print("UNKNOWN", end='')
      print(str(plnt_ind), end='')
   return int(plnt_ind)
def plname():
   global lv_pl_ind
   return (pl_name(LC_P1_PREV_PL))
def earth_radius(lat_deg):
   return (pl_aradius(LC_P1_EARTH, lat_deg))
def earth_tropicalyear(jtwokdate):
   jy = jtwokdate * Kw.DAY / Kw.JYEAR
   return (((((2.64E-16) * jy - 7.29E-14) * jy - 6.15359E-8)\
         * jy + 365.2421896698))
def earth_distance(lata_deg, lona_deg, latb_deg, lonb_deg):
   return ((Kw.great_circle_distance(Kw.deg2rad(lata_deg),\
         Kw.deg2rad(lona_deg), Kw.deg2rad(latb_deg),\
         Kw.deg2rad(lonb_deg)) * EARTH_A))
def plaradius(lat_deg):
   aa = Kw.square(pla())
   bb = Kw.square(plb())
   calat = Kw.square(pla() * Kw.cosd(lat_deg))
   sblat = Kw.square(plb() * Kw.sind(lat_deg))
   return (math.sqrt((aa * calat + bb * sblat) / (calat +\
         sblat)))
def pl_aradius(plnt, lat_deg):
   pl(plnt)
   return (plaradius(lat_deg))
def earth_obliquity(jtwok):
   obl_rad = (((-1.24828E-16) * jtwok - 3.56226633E-7) *\
         jtwok + 23.4392889)
   return (Kw.deg2rad(obl_rad))
def earth_gravity(lat_deg):
   slatsq = Kw.square(Kw.sind(lat_deg))
   obltsq = EARTHFLATNESS * (2.0 - EARTHFLATNESS)
   kk = (((1.0 - EARTHFLATNESS) * Kw.EARTHGRAVITYB) -\
         Kw.EARTHGRAVITYA)
   return ((Kw.EARTHGRAVITYA + kk * slatsq) / math.sqrt(1.0 -\
         obltsq * slatsq))
def earth_gravity_height(lat_deg, height_m):
   return ((earth_gravity(lat_deg) - height_m * 2.0 * EARTHGM\
         / Kw.cube(EARTH_A)))
LC_ISA_TEMPERATURE = 0
LC_ISA_PRESSURE = 1
LC_ISA_DENSITY = 2
LC_ISA_XHEIGHT = 0
LC_ISA_XTEMPERATURE = 1
LC_ISA_XLAPSERATE = 2
LC_ISA_XPRESSURE = 3
LC_ISA_XDENSITY = 4
lv_isa_mtrx = [[0 for ii in range(5)] for ii in range(7)]
lv_isa_magic = 0.0
def lf_isa_calc(height_m, state_x):
   global lv_isa_mtrx
   global lv_isa_magic
   if (not Kw.ismagic(lv_isa_magic)):
      lv_isa_mtrx[0][LC_ISA_XHEIGHT] = 0.0
      lv_isa_mtrx[0][LC_ISA_XTEMPERATURE] = 288.15
      lv_isa_mtrx[0][LC_ISA_XLAPSERATE] = -0.0065
      lv_isa_mtrx[0][LC_ISA_XPRESSURE] = Kw.ATM
      lv_isa_mtrx[0][LC_ISA_XDENSITY] = 1.2250
      lv_isa_mtrx[1][LC_ISA_XHEIGHT] = 1.1E+4
      lv_isa_mtrx[1][LC_ISA_XTEMPERATURE] = 216.65
      lv_isa_mtrx[1][LC_ISA_XLAPSERATE] = +0.0
      lv_isa_mtrx[1][LC_ISA_XPRESSURE] = 22632.10
      lv_isa_mtrx[1][LC_ISA_XDENSITY] = 0.36391
      lv_isa_mtrx[2][LC_ISA_XHEIGHT] = 2.0E+4
      lv_isa_mtrx[2][LC_ISA_XTEMPERATURE] = 216.65
      lv_isa_mtrx[2][LC_ISA_XLAPSERATE] = +0.001
      lv_isa_mtrx[2][LC_ISA_XPRESSURE] = 5474.89
      lv_isa_mtrx[2][LC_ISA_XDENSITY] = 0.08803
      lv_isa_mtrx[3][LC_ISA_XHEIGHT] = 3.2E+4
      lv_isa_mtrx[3][LC_ISA_XTEMPERATURE] = 228.65
      lv_isa_mtrx[3][LC_ISA_XLAPSERATE] = +0.0028
      lv_isa_mtrx[3][LC_ISA_XPRESSURE] = 868.02
      lv_isa_mtrx[3][LC_ISA_XDENSITY] = 0.01322
      lv_isa_mtrx[4][LC_ISA_XHEIGHT] = 4.7E+4
      lv_isa_mtrx[4][LC_ISA_XTEMPERATURE] = 270.65
      lv_isa_mtrx[4][LC_ISA_XLAPSERATE] = +0.0
      lv_isa_mtrx[4][LC_ISA_XPRESSURE] = 110.91
      lv_isa_mtrx[4][LC_ISA_XDENSITY] = 0.00143
      lv_isa_mtrx[5][LC_ISA_XHEIGHT] = 5.1E+4
      lv_isa_mtrx[5][LC_ISA_XTEMPERATURE] = 270.65
      lv_isa_mtrx[5][LC_ISA_XLAPSERATE] = -0.0028
      lv_isa_mtrx[5][LC_ISA_XPRESSURE] = 66.94
      lv_isa_mtrx[5][LC_ISA_XDENSITY] = 8.6E-4
      lv_isa_mtrx[6][LC_ISA_XHEIGHT] = 7.1E+4
      lv_isa_mtrx[6][LC_ISA_XTEMPERATURE] = 214.65
      lv_isa_mtrx[6][LC_ISA_XLAPSERATE] = -0.002
      lv_isa_mtrx[6][LC_ISA_XPRESSURE] = 3.96
      lv_isa_mtrx[6][LC_ISA_XDENSITY] = 6.4E-5
      lv_isa_magic = Kw.magicset()
   h_ind = 6
   while (height_m < lv_isa_mtrx[h_ind][0] and 0 < h_ind):
      h_ind -= 1
   delta_h = height_m - lv_isa_mtrx[h_ind][LC_ISA_XHEIGHT]
   this_temp = lv_isa_mtrx[h_ind][LC_ISA_XTEMPERATURE] +\
         lv_isa_mtrx[h_ind][LC_ISA_XLAPSERATE] * delta_h
   if (state_x == LC_ISA_TEMPERATURE):
      retvalu = this_temp
   else:
      air_k_per_m = Kw.GRAVITY * Kwelements.AIR_MASS / Kw.GAS
      if (Kw.iszero(lv_isa_mtrx[h_ind][LC_ISA_XLAPSERATE])):
         retvalu = math.exp(-air_k_per_m * delta_h /\
               lv_isa_mtrx[h_ind][LC_ISA_XTEMPERATURE])
      else:
         expon = air_k_per_m /\
               lv_isa_mtrx[h_ind][LC_ISA_XLAPSERATE]
         if (state_x == LC_ISA_DENSITY):
            expon += 1
         retvalu =\
               math.pow(\
               lv_isa_mtrx[h_ind][LC_ISA_XTEMPERATURE] /\
               this_temp, expon)
      if (state_x == LC_ISA_PRESSURE):
         retvalu *= lv_isa_mtrx[h_ind][LC_ISA_XPRESSURE]
      else:
         retvalu *= lv_isa_mtrx[h_ind][LC_ISA_XDENSITY]
   return (retvalu)
def isa_temp(height_m):
   return (lf_isa_calc(height_m, LC_ISA_TEMPERATURE))
def isa_pres(height_m):
   return (lf_isa_calc(height_m, LC_ISA_PRESSURE))
def isa_dens(height_m):
   return (lf_isa_calc(height_m, LC_ISA_DENSITY))
def vin_distance(lata_deg, lona_deg, latb_deg, lonb_deg,\
      ret_bearings_arr_p):
   rad_arr = [0 for ii in range(2)]
   retvalu = EARTH_A * Kw.ellipsoid_distance(EARTHFLATNESS,\
         Kw.deg2rad(lata_deg), Kw.deg2rad(lona_deg),\
         Kw.deg2rad(latb_deg), Kw.deg2rad(lonb_deg), rad_arr)\
         / Kw.METER
   ret_bearings_arr_p[0] = Kw.rad2deg(rad_arr[0])
   ret_bearings_arr_p[1] = Kw.rad2deg(rad_arr[1])
   return (retvalu)
def vin_destination(lata_deg, lona_deg, heading_deg, dist_m,\
      ret_dest_arr_p):
   rad_arr = [0 for ii in range(2)]
   fltnss = EARTHFLATNESS
   retvalu = Kw.rad2deg(Kw.ellipsoid_destination(fltnss,\
         Kw.deg2rad(lata_deg), Kw.deg2rad(lona_deg),\
         Kw.deg2rad(heading_deg), dist_m * Kw.METER / EARTH_A\
         , rad_arr))
   ret_dest_arr_p[0] = Kw.rad2deg(rad_arr[0])
   ret_dest_arr_p[1] = Kw.rad2deg(rad_arr[1])
   return (retvalu)
LC_PREM_DENSITY = 0
LC_PREM_MASS = 1
LC_PREM_XHEIGHT = 0
LC_PREM_XCOEA = 1
LC_PREM_XCOEB = 2
LC_PREM_XCOEC = 3
LC_PREM_XMASSD = 4
lv_prem_mtrx = [[0 for ii in range(6)] for ii in range(12)]
lv_prem_magic = 0.0
def lf_prem(height_m, state_x):
   if (not Kw.ismagic(lv_prem_magic)):
      lv_prem_mtrx[0][LC_PREM_XHEIGHT] = 0.0
      lv_prem_mtrx[0][LC_PREM_XCOEA] = 0.0
      lv_prem_mtrx[0][LC_PREM_XCOEB] = 0.0
      lv_prem_mtrx[0][LC_PREM_XCOEC] = 0.0
      lv_prem_mtrx[1][LC_PREM_XHEIGHT] = 1.2215E+6
      lv_prem_mtrx[1][LC_PREM_XCOEA] = 1.3088E+4
      lv_prem_mtrx[1][LC_PREM_XCOEB] = 1.911E-8
      lv_prem_mtrx[1][LC_PREM_XCOEC] = -2.1773E-10
      lv_prem_mtrx[2][LC_PREM_XHEIGHT] = 3.480E+6
      lv_prem_mtrx[2][LC_PREM_XCOEA] = 1.2346E+4
      lv_prem_mtrx[2][LC_PREM_XCOEB] = 1.3976E-4
      lv_prem_mtrx[2][LC_PREM_XCOEC] = -2.4123E-10
      lv_prem_mtrx[3][LC_PREM_XHEIGHT] = 3.630E+6
      lv_prem_mtrx[3][LC_PREM_XCOEA] = 7.3067E+3
      lv_prem_mtrx[3][LC_PREM_XCOEB] = -5.0007E-4
      lv_prem_mtrx[3][LC_PREM_XCOEC] = 0.0
      lv_prem_mtrx[4][LC_PREM_XHEIGHT] = 5.701E+6
      lv_prem_mtrx[4][LC_PREM_XCOEA] = 6.7823E+3
      lv_prem_mtrx[4][LC_PREM_XCOEB] = -2.4441E-4
      lv_prem_mtrx[4][LC_PREM_XCOEC] = -3.0922E-11
      lv_prem_mtrx[5][LC_PREM_XHEIGHT] = 5.771E+6
      lv_prem_mtrx[5][LC_PREM_XCOEA] = 5.3197E+3
      lv_prem_mtrx[5][LC_PREM_XCOEB] = -2.3286E-4
      lv_prem_mtrx[5][LC_PREM_XCOEC] = 0.0
      lv_prem_mtrx[6][LC_PREM_XHEIGHT] = 5.971E+6
      lv_prem_mtrx[6][LC_PREM_XCOEA] = 1.1249E+4
      lv_prem_mtrx[6][LC_PREM_XCOEB] = -1.2603E-3
      lv_prem_mtrx[6][LC_PREM_XCOEC] = 0.0
      lv_prem_mtrx[7][LC_PREM_XHEIGHT] = 6.151E+6
      lv_prem_mtrx[7][LC_PREM_XCOEA] = 7.1083E+3
      lv_prem_mtrx[7][LC_PREM_XCOEB] = -5.9706E-4
      lv_prem_mtrx[7][LC_PREM_XCOEC] = 0.0
      lv_prem_mtrx[8][LC_PREM_XHEIGHT] = 6.3466E+6
      lv_prem_mtrx[8][LC_PREM_XCOEA] = 2.691E+3
      lv_prem_mtrx[8][LC_PREM_XCOEB] = 1.0869E-4
      lv_prem_mtrx[8][LC_PREM_XCOEC] = 0.0
      lv_prem_mtrx[9][LC_PREM_XHEIGHT] = 6.356E+6
      lv_prem_mtrx[9][LC_PREM_XCOEA] = 2.9E+3
      lv_prem_mtrx[9][LC_PREM_XCOEB] = 0.0
      lv_prem_mtrx[9][LC_PREM_XCOEC] = 0.0
      lv_prem_mtrx[10][LC_PREM_XHEIGHT] = 6.368E+6
      lv_prem_mtrx[10][LC_PREM_XCOEA] = 2.6E+3
      lv_prem_mtrx[10][LC_PREM_XCOEB] = 0.0
      lv_prem_mtrx[10][LC_PREM_XCOEC] = 0.0
      lv_prem_mtrx[11][LC_PREM_XHEIGHT] = 6.371E+6
      lv_prem_mtrx[11][LC_PREM_XCOEA] = 1.02E+3
      lv_prem_mtrx[11][LC_PREM_XCOEB] = 0.0
      lv_prem_mtrx[11][LC_PREM_XCOEC] = 0.0
      lv_prem_mtrx[0][LC_PREM_XMASSD] = 0.0
      mass_i = 0.0
      for ii in range(1, 12, 1):
         hght_i = lv_prem_mtrx[ii - 1][LC_PREM_XHEIGHT]
         mass_b = 2.0 * Kw.TAU * hght_i * hght_i * hght_i *\
               ((lv_prem_mtrx[ii][LC_PREM_XCOEC] / 5.0 *\
               hght_i + lv_prem_mtrx[ii][LC_PREM_XCOEB] /\
               4.0) * hght_i +\
               lv_prem_mtrx[ii][LC_PREM_XCOEA] / 3.0)
         hght_j = lv_prem_mtrx[ii][LC_PREM_XHEIGHT]
         mass_a = 2.0 * Kw.TAU * hght_j * hght_j * hght_j *\
               ((lv_prem_mtrx[ii][LC_PREM_XCOEC] / 5.0 *\
               hght_j + lv_prem_mtrx[ii][LC_PREM_XCOEB] /\
               4.0) * hght_j +\
               lv_prem_mtrx[ii][LC_PREM_XCOEA] / 3.0)
         mass_ip = mass_i
         mass_i += (mass_a - mass_b)
         lv_prem_mtrx[ii][LC_PREM_XMASSD] = mass_ip - mass_b
      lv_prem_magic = Kw.magicset()
   if (height_m <= 0.0):
      retvalu = 0.0
   elif (EARTHRADIUS < height_m):
      if (state_x == 0):
         retvalu = 0.0
      else:
         retvalu = EARTHMASS
   else:
      ii = 0
      while (lv_prem_mtrx[ii][LC_PREM_XHEIGHT] < height_m):
         ii += 1
      coea = lv_prem_mtrx[ii][LC_PREM_XCOEA]
      coeb = lv_prem_mtrx[ii][LC_PREM_XCOEB]
      coec = lv_prem_mtrx[ii][LC_PREM_XCOEC]
      if (state_x == 0):
         retvalu = (coec * height_m + coeb) * height_m + coea
      elif (state_x == 1):
         hght_i = lv_prem_mtrx[ii][LC_PREM_XHEIGHT]
         mass_a = 2.0 * Kw.TAU * height_m * height_m *\
               height_m * ((coec / 5.0 * height_m + coeb /\
               4.0) * height_m + coea / 3.0)
         retvalu = mass_a + lv_prem_mtrx[ii][LC_PREM_XMASSD]
   return (retvalu)
def prem_density(height_m):
   return (lf_prem(height_m, LC_PREM_DENSITY))
def prem_mass(height_m):
   return (lf_prem(height_m, LC_PREM_MASS))
def prem_g(height_m):
   if (height_m <= 0.0):
      retvalu = 0.0
   else:
      retvalu = Kw.GRAVITATION * prem_mass(height_m) /\
            (height_m * height_m)
   return (retvalu)
#   DDDDDDDDDDescription ---------------- kwplanets_description #
def kwplanets_description():
   return( \
   "   Kwplanets Constants: ANOMALISTICYEAR CERES_A CERES_B " + \
   "CERES_C CERESASCENDING CERESASCENDING_DT CERESDAY CERESD" + \
   "ENSITY CERESECCENTRICITY CERESECCENTRICITY_DT CERESESCAP" + \
   "E CERESFLATNESS CERESGM CERESGRAVITY CERESINCLINATION CE" + \
   "RESINCLINATION_DT CERESLONGITUDE CERESLONGITUDE_DT CERES" + \
   "MASS CERESOBLATENESS CERESORBIT CERESORBIT_DT CERESPERIA" + \
   "PSIS CERESPERIAPSIS_DT CERESRADIUS CERESSURFACE CERESSYN" + \
   "ODIC CERESVOLUME CERESYEAR EARTH_A EARTH_B EARTH_C EARTH" + \
   "ANOMALISTICYEAR EARTHASCENDING EARTHASCENDING_DT EARTHDA" + \
   "Y EARTHDENSITY EARTHECCENTRICITY EARTHECCENTRICITY_DT EA" + \
   "RTHESCAPE EARTHFLATNESS EARTHGM EARTHGRAVITY EARTHINCLIN" + \
   "ATION EARTHINCLINATION_DT EARTHLONGITUDE EARTHLONGITUDE_" + \
   "DT EARTHMASS EARTHOBLATENESS EARTHORBIT EARTHORBIT_DT EA" + \
   "RTHPERIAPSIS EARTHPERIAPSIS_DT EARTHPRECESSION EARTHRADI" + \
   "US EARTHSIDEREALDAY EARTHSIDEREALYEAR EARTHSTELLARDAY EA" + \
   "RTHSURFACE EARTHTHETA_0 EARTHTROPICALYEAR EARTHVOLUME EA" + \
   "RTHYEAR ERIS_A ERIS_B ERIS_C ERISASCENDING ERISASCENDING" + \
   "_DT ERISDAY ERISDENSITY ERISECCENTRICITY ERISECCENTRICIT" + \
   "Y_DT ERISESCAPE ERISFLATNESS ERISGM ERISGRAVITY ERISINCL" + \
   "INATION ERISINCLINATION_DT ERISLONGITUDE ERISLONGITUDE_D" + \
   "T ERISMASS ERISOBLATENESS ERISORBIT ERISORBIT_DT ERISPER" + \
   "IAPSIS ERISPERIAPSIS_DT ERISRADIUS ERISSURFACE ERISSYNOD" + \
   "IC ERISVOLUME ERISYEAR HAUMEA_A HAUMEA_B HAUMEA_C HAUMEA" + \
   "ASCENDING HAUMEAASCENDING_DT HAUMEADAY HAUMEADENSITY HAU" + \
   "MEAECCENTRICITY HAUMEAECCENTRICITY_DT HAUMEAESCAPE HAUME" + \
   "AFLATNESS HAUMEAGM HAUMEAGRAVITY HAUMEAINCLINATION HAUME" + \
   "AINCLINATION_DT HAUMEALONGITUDE HAUMEALONGITUDE_DT HAUME" + \
   "AMASS HAUMEAOBLATENESS HAUMEAORBIT HAUMEAORBIT_DT HAUMEA" + \
   "PERIAPSIS HAUMEAPERIAPSIS_DT HAUMEARADIUS HAUMEASURFACE " + \
   "HAUMEASYNODIC HAUMEAVOLUME HAUMEAYEAR JUPITER_A JUPITER_" + \
   "B JUPITER_C JUPITERASCENDING JUPITERASCENDING_DT JUPITER" + \
   "DAY JUPITERDENSITY JUPITERECCENTRICITY JUPITERECCENTRICI" + \
   "TY_DT JUPITERESCAPE JUPITERFLATNESS JUPITERGM JUPITERGRA" + \
   "VITY JUPITERINCLINATION JUPITERINCLINATION_DT JUPITERLON" + \
   "GITUDE JUPITERLONGITUDE_DT JUPITERMASS JUPITEROBLATENESS" + \
   " JUPITERORBIT JUPITERORBIT_DT JUPITERPERIAPSIS JUPITERPE" + \
   "RIAPSIS_DT JUPITERRADIUS JUPITERSURFACE JUPITERSYNODIC J" + \
   "UPITERVOLUME JUPITERYEAR LC_ISA_DENSITY LC_ISA_PRESSURE " + \
   "LC_ISA_TEMPERATURE LC_ISA_XDENSITY LC_ISA_XHEIGHT LC_ISA" + \
   "_XLAPSERATE LC_ISA_XPRESSURE LC_ISA_XTEMPERATURE LC_P1_C" + \
   "ERES LC_P1_COUNT LC_P1_EARTH LC_P1_ERIS LC_P1_ERR LC_P1_" + \
   "HAUMEA LC_P1_JUPITER LC_P1_MAKEMAKE LC_P1_MARS LC_P1_MER" + \
   "CURY LC_P1_NEPTUNE LC_P1_PLUTO LC_P1_PREV_PL LC_P1_SATUR" + \
   "N LC_P1_SUN LC_P1_URANUS LC_P1_VENUS LC_P2_A LC_P2_ASC L" + \
   "C_P2_ASC_DT LC_P2_C LC_P2_COUNT LC_P2_DAY LC_P2_ECC LC_P" + \
   "2_ECC_DT LC_P2_FLATNESS LC_P2_GM LC_P2_INC LC_P2_INC_DT " + \
   "LC_P2_LON LC_P2_LON_DT LC_P2_ORB LC_P2_ORB_DT LC_P2_PER " + \
   "LC_P2_PER_DT LC_P2_YEAR LC_PREM_DENSITY LC_PREM_MASS LC_" + \
   "PREM_XCOEA LC_PREM_XCOEB LC_PREM_XCOEC LC_PREM_XHEIGHT L" + \
   "C_PREM_XMASSD MAKEMAKE_A MAKEMAKE_B MAKEMAKE_C MAKEMAKEA" + \
   "SCENDING MAKEMAKEASCENDING_DT MAKEMAKEDAY MAKEMAKEDENSIT" + \
   "Y MAKEMAKEECCENTRICITY MAKEMAKEECCENTRICITY_DT MAKEMAKEE" + \
   "SCAPE MAKEMAKEFLATNESS MAKEMAKEGM MAKEMAKEGRAVITY MAKEMA" + \
   "KEINCLINATION MAKEMAKEINCLINATION_DT MAKEMAKELONGITUDE M" + \
   "AKEMAKELONGITUDE_DT MAKEMAKEMASS MAKEMAKEOBLATENESS MAKE" + \
   "MAKEORBIT MAKEMAKEORBIT_DT MAKEMAKEPERIAPSIS MAKEMAKEPER" + \
   "IAPSIS_DT MAKEMAKERADIUS MAKEMAKESURFACE MAKEMAKESYNODIC" + \
   " MAKEMAKEVOLUME MAKEMAKEYEAR MARS_A MARS_B MARS_C MARSAS" + \
   "CENDING MARSASCENDING_DT MARSDAY MARSDENSITY MARSECCENTR" + \
   "ICITY MARSECCENTRICITY_DT MARSESCAPE MARSFLATNESS MARSGM" + \
   " MARSGRAVITY MARSINCLINATION MARSINCLINATION_DT MARSLONG" + \
   "ITUDE MARSLONGITUDE_DT MARSMASS MARSOBLATENESS MARSORBIT" + \
   " MARSORBIT_DT MARSPERIAPSIS MARSPERIAPSIS_DT MARSRADIUS " + \
   "MARSSURFACE MARSSYNODIC MARSVOLUME MARSYEAR MERCURY_A ME" + \
   "RCURY_B MERCURY_C MERCURYASCENDING MERCURYASCENDING_DT M" + \
   "ERCURYDAY MERCURYDENSITY MERCURYECCENTRICITY MERCURYECCE" + \
   "NTRICITY_DT MERCURYESCAPE MERCURYFLATNESS MERCURYGM MERC" + \
   "URYGRAVITY MERCURYINCLINATION MERCURYINCLINATION_DT MERC" + \
   "URYLONGITUDE MERCURYLONGITUDE_DT MERCURYMASS MERCURYOBLA" + \
   "TENESS MERCURYORBIT MERCURYORBIT_DT MERCURYPERIAPSIS MER" + \
   "CURYPERIAPSIS_DT MERCURYRADIUS MERCURYSURFACE MERCURYSYN" + \
   "ODIC MERCURYVOLUME MERCURYYEAR MOON_A MOON_B MOON_C MOON" + \
   "DAY MOONDENSITY MOONECCENTRICITY MOONESCAPE MOONFLATNESS" + \
   " MOONGM MOONGRAVITY MOONINCLINATION MOONMASS MOONOBLATEN" + \
   "ESS MOONORBIT MOONRADIUS MOONSURFACE MOONSYNODIC MOONVOL" + \
   "UME MOONYEAR NEPTUNE_A NEPTUNE_B NEPTUNE_C NEPTUNEASCEND" + \
   "ING NEPTUNEASCENDING_DT NEPTUNEDAY NEPTUNEDENSITY NEPTUN" + \
   "EECCENTRICITY NEPTUNEECCENTRICITY_DT NEPTUNEESCAPE NEPTU" + \
   "NEFLATNESS NEPTUNEGM NEPTUNEGRAVITY NEPTUNEINCLINATION N" + \
   "EPTUNEINCLINATION_DT NEPTUNELONGITUDE NEPTUNELONGITUDE_D" + \
   "T NEPTUNEMASS NEPTUNEOBLATENESS NEPTUNEORBIT NEPTUNEORBI" + \
   "T_DT NEPTUNEPERIAPSIS NEPTUNEPERIAPSIS_DT NEPTUNERADIUS " + \
   "NEPTUNESURFACE NEPTUNESYNODIC NEPTUNEVOLUME NEPTUNEYEAR " + \
   "PLUTO_A PLUTO_B PLUTO_C PLUTOASCENDING PLUTOASCENDING_DT" + \
   " PLUTODAY PLUTODENSITY PLUTOECCENTRICITY PLUTOECCENTRICI" + \
   "TY_DT PLUTOESCAPE PLUTOFLATNESS PLUTOGM PLUTOGRAVITY PLU" + \
   "TOINCLINATION PLUTOINCLINATION_DT PLUTOLONGITUDE PLUTOLO" + \
   "NGITUDE_DT PLUTOMASS PLUTOOBLATENESS PLUTOORBIT PLUTOORB" + \
   "IT_DT PLUTOPERIAPSIS PLUTOPERIAPSIS_DT PLUTORADIUS PLUTO" + \
   "SURFACE PLUTOSYNODIC PLUTOVOLUME PLUTOYEAR SATURN_A SATU" + \
   "RN_B SATURN_C SATURNASCENDING SATURNASCENDING_DT SATURND" + \
   "AY SATURNDENSITY SATURNECCENTRICITY SATURNECCENTRICITY_D" + \
   "T SATURNESCAPE SATURNFLATNESS SATURNGM SATURNGRAVITY SAT" + \
   "URNINCLINATION SATURNINCLINATION_DT SATURNLONGITUDE SATU" + \
   "RNLONGITUDE_DT SATURNMASS SATURNOBLATENESS SATURNORBIT S" + \
   "ATURNORBIT_DT SATURNPERIAPSIS SATURNPERIAPSIS_DT SATURNR" + \
   "ADIUS SATURNSURFACE SATURNSYNODIC SATURNVOLUME SATURNYEA" + \
   "R SIDEREALDAY SIDEREALYEAR STELLARDAY SUN_A SUN_B SUN_C " + \
   "SUNASCENDING SUNASCENDING_DT SUNDAY SUNDENSITY SUNECCENT" + \
   "RICITY SUNECCENTRICITY_DT SUNESCAPE SUNFLATNESS SUNGM SU" + \
   "NGMIERS SUNGMNASA SUNGRAVITY SUNINCLINATION SUNINCLINATI" + \
   "ON_DT SUNLONGITUDE SUNLONGITUDE_DT SUNMASS SUNOBLATENESS" + \
   " SUNORBIT SUNORBIT_DT SUNPERIAPSIS SUNPERIAPSIS_DT SUNRA" + \
   "DIUS SUNSURFACE SUNVOLUME SUNYEAR TROPICALYEAR URANUS_A " + \
   "URANUS_B URANUS_C URANUSASCENDING URANUSASCENDING_DT URA" + \
   "NUSDAY URANUSDENSITY URANUSECCENTRICITY URANUSECCENTRICI" + \
   "TY_DT URANUSESCAPE URANUSFLATNESS URANUSGM URANUSGRAVITY" + \
   " URANUSINCLINATION URANUSINCLINATION_DT URANUSLONGITUDE " + \
   "URANUSLONGITUDE_DT URANUSMASS URANUSOBLATENESS URANUSORB" + \
   "IT URANUSORBIT_DT URANUSPERIAPSIS URANUSPERIAPSIS_DT URA" + \
   "NUSRADIUS URANUSSURFACE URANUSSYNODIC URANUSVOLUME URANU" + \
   "SYEAR VENUS_A VENUS_B VENUS_C VENUSASCENDING VENUSASCEND" + \
   "ING_DT VENUSDAY VENUSDENSITY VENUSECCENTRICITY VENUSECCE" + \
   "NTRICITY_DT VENUSESCAPE VENUSFLATNESS VENUSGM VENUSGRAVI" + \
   "TY VENUSINCLINATION VENUSINCLINATION_DT VENUSLONGITUDE V" + \
   "ENUSLONGITUDE_DT VENUSMASS VENUSOBLATENESS VENUSORBIT VE" + \
   "NUSORBIT_DT VENUSPERIAPSIS VENUSPERIAPSIS_DT VENUSRADIUS" + \
   " VENUSSURFACE VENUSSYNODIC VENUSVOLUME VENUSYEAR" + \
   "\n" + \
   "   Kwplanets 0-ary Functions: pla plaphelion plargument " + \
   "plascending plb plc plday pldensity pleccentricanomaly p" + \
   "leccentricity plescape plflatness plgm plgravity plincli" + \
   "nation pllongitude plmargot plmass plmeananomaly plname " + \
   "plorbit plperiapsis plperihelion plradius plsternlevison" + \
   " plsurface plsynodic plvolume plyear" + \
   "\n" + \
   "   Kwplanets 1-ary Functions: earth_gravity earth_obliqu" + \
   "ity earth_radius earth_tropicalyear isa_dens isa_pres is" + \
   "a_temp pl pl_a pl_aphelion pl_argument pl_ascending pl_b" + \
   " pl_c pl_day pl_density pl_eccentricanomaly pl_eccentric" + \
   "ity pl_escape pl_flatness pl_gm pl_gravity pl_inclinatio" + \
   "n pl_longitude pl_margot pl_mass pl_meananomaly pl_name " + \
   "pl_orbit pl_periapsis pl_perihelion pl_radius pl_sternle" + \
   "vison pl_surface pl_synodic pl_volume pl_year plaradius " + \
   "plgeo plhelio plsettime prem_density prem_g prem_mass" + \
   "\n" + \
   "   Kwplanets 2-ary Functions: earth_gravity_height eccen" + \
   "tric_anomaly margot pl_aradius pl_heliocentric sternlevi" + \
   "son" + \
   "\n" + \
   "   Kwplanets 4-ary Functions: earth_distance" + \
   "\n" + \
   "   Kwplanets 5-ary Functions: vin_destination vin_distan" + \
   "ce" + \
   "\n"
)
def kwplanets_desc():
   return( \
   "   Kwplanets Constants: ANOMALISTICYEAR CERES(_[ABC]|ASC" + \
   "ENDING(_DT)?|D(AY|ENSITY)|E(CCENTRICITY(_DT)?|SCAPE)|FLA" + \
   "TNESS|G(M|RAVITY)|INCLINATION(_DT)?|LONGITUDE(_DT)?|MASS" + \
   "|O(BLATENESS|RBIT(_DT)?)|PERIAPSIS(_DT)?|RADIUS|S(URFACE" + \
   "|YNODIC)|VOLUME|YEAR) EARTH(_[ABC]|A(NOMALISTICYEAR|SCEN" + \
   "DING(_DT)?)|D(AY|ENSITY)|E(CCENTRICITY(_DT)?|SCAPE)|FLAT" + \
   "NESS|G(M|RAVITY)|INCLINATION(_DT)?|LONGITUDE(_DT)?|MASS|" + \
   "O(BLATENESS|RBIT(_DT)?)|P(ERIAPSIS(_DT)?|RECESSION)|RADI" + \
   "US|S(IDEREAL(DAY|YEAR)|TELLARDAY|URFACE)|T(HETA_0|ROPICA" + \
   "LYEAR)|VOLUME|YEAR) ERIS(_[ABC]|ASCENDING(_DT)?|D(AY|ENS" + \
   "ITY)|E(CCENTRICITY(_DT)?|SCAPE)|FLATNESS|G(M|RAVITY)|INC" + \
   "LINATION(_DT)?|LONGITUDE(_DT)?|MASS|O(BLATENESS|RBIT(_DT" + \
   ")?)|PERIAPSIS(_DT)?|RADIUS|S(URFACE|YNODIC)|VOLUME|YEAR)" + \
   " HAUMEA(_[ABC]|ASCENDING(_DT)?|D(AY|ENSITY)|E(CCENTRICIT" + \
   "Y(_DT)?|SCAPE)|FLATNESS|G(M|RAVITY)|INCLINATION(_DT)?|LO" + \
   "NGITUDE(_DT)?|MASS|O(BLATENESS|RBIT(_DT)?)|PERIAPSIS(_DT" + \
   ")?|RADIUS|S(URFACE|YNODIC)|VOLUME|YEAR) JUPITER(_[ABC]|A" + \
   "SCENDING(_DT)?|D(AY|ENSITY)|E(CCENTRICITY(_DT)?|SCAPE)|F" + \
   "LATNESS|G(M|RAVITY)|INCLINATION(_DT)?|LONGITUDE(_DT)?|MA" + \
   "SS|O(BLATENESS|RBIT(_DT)?)|PERIAPSIS(_DT)?|RADIUS|S(URFA" + \
   "CE|YNODIC)|VOLUME|YEAR) LC_(ISA_(DENSITY|PRESSURE|TEMPER" + \
   "ATURE|X(DENSITY|HEIGHT|LAPSERATE|PRESSURE|TEMPERATURE))|" + \
   "P(1_(C(ERES|OUNT)|E(ARTH|R(IS|R))|HAUMEA|JUPITER|M(A(KEM" + \
   "AKE|RS)|ERCURY)|NEPTUNE|P(LUTO|REV_PL)|S(ATURN|UN)|URANU" + \
   "S|VENUS)|2_(A(SC(_DT)?)?|C(OUNT)?|DAY|ECC(_DT)?|FLATNESS" + \
   "|GM|INC(_DT)?|LON(_DT)?|ORB(_DT)?|PER(_DT)?|YEAR)|REM_(D" + \
   "ENSITY|MASS|X(COE[ABC]|HEIGHT|MASSD)))) MAKEMAKE(_[ABC]|" + \
   "ASCENDING(_DT)?|D(AY|ENSITY)|E(CCENTRICITY(_DT)?|SCAPE)|" + \
   "FLATNESS|G(M|RAVITY)|INCLINATION(_DT)?|LONGITUDE(_DT)?|M" + \
   "ASS|O(BLATENESS|RBIT(_DT)?)|PERIAPSIS(_DT)?|RADIUS|S(URF" + \
   "ACE|YNODIC)|VOLUME|YEAR) MARS(_[ABC]|ASCENDING(_DT)?|D(A" + \
   "Y|ENSITY)|E(CCENTRICITY(_DT)?|SCAPE)|FLATNESS|G(M|RAVITY" + \
   ")|INCLINATION(_DT)?|LONGITUDE(_DT)?|MASS|O(BLATENESS|RBI" + \
   "T(_DT)?)|PERIAPSIS(_DT)?|RADIUS|S(URFACE|YNODIC)|VOLUME|" + \
   "YEAR) MERCURY(_[ABC]|ASCENDING(_DT)?|D(AY|ENSITY)|E(CCEN" + \
   "TRICITY(_DT)?|SCAPE)|FLATNESS|G(M|RAVITY)|INCLINATION(_D" + \
   "T)?|LONGITUDE(_DT)?|MASS|O(BLATENESS|RBIT(_DT)?)|PERIAPS" + \
   "IS(_DT)?|RADIUS|S(URFACE|YNODIC)|VOLUME|YEAR) MOON(_[ABC" + \
   "]|D(AY|ENSITY)|E(CCENTRICITY|SCAPE)|FLATNESS|G(M|RAVITY)" + \
   "|INCLINATION|MASS|O(BLATENESS|RBIT)|RADIUS|S(URFACE|YNOD" + \
   "IC)|VOLUME|YEAR) NEPTUNE(_[ABC]|ASCENDING(_DT)?|D(AY|ENS" + \
   "ITY)|E(CCENTRICITY(_DT)?|SCAPE)|FLATNESS|G(M|RAVITY)|INC" + \
   "LINATION(_DT)?|LONGITUDE(_DT)?|MASS|O(BLATENESS|RBIT(_DT" + \
   ")?)|PERIAPSIS(_DT)?|RADIUS|S(URFACE|YNODIC)|VOLUME|YEAR)" + \
   " PLUTO(_[ABC]|ASCENDING(_DT)?|D(AY|ENSITY)|E(CCENTRICITY" + \
   "(_DT)?|SCAPE)|FLATNESS|G(M|RAVITY)|INCLINATION(_DT)?|LON" + \
   "GITUDE(_DT)?|MASS|O(BLATENESS|RBIT(_DT)?)|PERIAPSIS(_DT)" + \
   "?|RADIUS|S(URFACE|YNODIC)|VOLUME|YEAR) SATURN(_[ABC]|ASC" + \
   "ENDING(_DT)?|D(AY|ENSITY)|E(CCENTRICITY(_DT)?|SCAPE)|FLA" + \
   "TNESS|G(M|RAVITY)|INCLINATION(_DT)?|LONGITUDE(_DT)?|MASS" + \
   "|O(BLATENESS|RBIT(_DT)?)|PERIAPSIS(_DT)?|RADIUS|S(URFACE" + \
   "|YNODIC)|VOLUME|YEAR) SIDEREAL(DAY|YEAR) STELLARDAY SUN(" + \
   "_[ABC]|ASCENDING(_DT)?|D(AY|ENSITY)|E(CCENTRICITY(_DT)?|" + \
   "SCAPE)|FLATNESS|G(M(IERS|NASA)?|RAVITY)|INCLINATION(_DT)" + \
   "?|LONGITUDE(_DT)?|MASS|O(BLATENESS|RBIT(_DT)?)|PERIAPSIS" + \
   "(_DT)?|RADIUS|SURFACE|VOLUME|YEAR) TROPICALYEAR URANUS(_" + \
   "[ABC]|ASCENDING(_DT)?|D(AY|ENSITY)|E(CCENTRICITY(_DT)?|S" + \
   "CAPE)|FLATNESS|G(M|RAVITY)|INCLINATION(_DT)?|LONGITUDE(_" + \
   "DT)?|MASS|O(BLATENESS|RBIT(_DT)?)|PERIAPSIS(_DT)?|RADIUS" + \
   "|S(URFACE|YNODIC)|VOLUME|YEAR) VENUS(_[ABC]|ASCENDING(_D" + \
   "T)?|D(AY|ENSITY)|E(CCENTRICITY(_DT)?|SCAPE)|FLATNESS|G(M" + \
   "|RAVITY)|INCLINATION(_DT)?|LONGITUDE(_DT)?|MASS|O(BLATEN" + \
   "ESS|RBIT(_DT)?)|PERIAPSIS(_DT)?|RADIUS|S(URFACE|YNODIC)|" + \
   "VOLUME|YEAR)" + \
   "\n" + \
   "   Kwplanets 0-ary Functions: pla(phelion|rgument|scendi" + \
   "ng)? plb plc pld(ay|ensity) ple(ccentric(anomaly|ity)|sc" + \
   "ape) plflatness plg(m|ravity) plinclination pllongitude " + \
   "plm(a(rgot|ss)|eananomaly) plname plorbit plperi(apsis|h" + \
   "elion) plradius pls(ternlevison|urface|ynodic) plvolume " + \
   "plyear" + \
   "\n" + \
   "   Kwplanets 1-ary Functions: earth_(gravity|obliquity|r" + \
   "adius|tropicalyear) isa_(dens|pres|temp) pl pl_(a(phelio" + \
   "n|rgument|scending)?|b|c|d(ay|ensity)|e(ccentric(anomaly" + \
   "|ity)|scape)|flatness|g(m|ravity)|inclination|longitude|" + \
   "m(a(rgot|ss)|eananomaly)|name|orbit|peri(apsis|helion)|r" + \
   "adius|s(ternlevison|urface|ynodic)|volume|year) plaradiu" + \
   "s plgeo plhelio plsettime prem_(density|g|mass)" + \
   "\n" + \
   "   Kwplanets 2-ary Functions: earth_gravity_height eccen" + \
   "tric_anomaly margot pl_(aradius|heliocentric) sternlevis" + \
   "on" + \
   "\n" + \
   "   Kwplanets 4-ary Functions: earth_distance" + \
   "\n" + \
   "   Kwplanets 5-ary Functions: vin_d(estination|istance)" + \
   "\n"
)
