#    Copyright (C) 2021 by Kevin D. Woerner
##-# =KDW= ################# BUILDER $KWROOT/0lib/vkkcp.sh ##################
##-# =KDW= ########## SOURCE $KWROOT/codekdw/kw-lib/Tm_Const.fwipp ##########
##-# =KDW= #### THIS FILE CAN BE OVERWRITTEN BY KEVIN D. WOERNER OR HIS #####
##-# =KDW= ############ MINIONS AT *ANY* TIME. Caveat utilitor. #############
# 2021-05-14 kdw  For Changelog, See File varylog
import sys
import math
import time
import Kw
A2DCNT = Kw.BIT
P0CNT = Kw.BIT
ENGCNT = Kw.BIT
DACCNT = Kw.BIT
TM_LIST_SEPARATOR = ","
TM_PDTM_MIN_VERSION = "1.5.4"
TM_REG_KEY = "TM_INFO"
TM_BLT_REGKEY = "BLT"
TM_CDTM_REGKEY = "CDTM"
TM_DPT_REGKEY = "DPT"
TM_NGRTM_REGKEY = "NGRTM"
TM_NGT_REGKEY = "NGT"
TM_PDTM_REGKEY = "PDTM"
TM_S700_REGKEY = "700"
TM_S700P_REGKEY = "700+"
TM_BLT_REGEX = "(MCRT)?(80001|86108|86109|86110" + "|8[14-7]00[24789]" +\
         "|8[14-7]01[01]" + "|8[1458]70[24789]" + "|8[1458]71[01]" +\
         "|8300[247])VS?"
TM_CDTM_REGEX = "(MCRT)?(4820[1-4])VS?"
TM_NGRTM_REGEX = "(CF28(56|82|84)" +\
         "|22(7[1-5]|8[1-7]|9[1-4]|90[89]|910)" + "|23(0[24789]|10)D)" +\
         "V[NCJ]?S?"
TM_NGT_REGEX = "(MCRT)?" +\
         "(4[89]600VH?|(488|[457]98)(0[1234678]|[56]1|[5-8]0)V)S?"
TM_PDTM_REGEX = "(MCRT)?(278[234]0D|27835D" + "|4[89]00[1-4678]P" +\
         "|4[89]0[67]0P" + "|4[89]70[1-8]VH?" + "|4[89]7[678]0VH?" +\
         "|4[89]761VH?" + "|[57]970[1-4678]V" + "|[57]97[67][01]V)S?"
TM_S700_REGEX = "(Model 7)" + "(541|[0-478][0-478]) " + "v[1-7]\\.[0-9] "
TM_S700P_REGEX = "(Model 7|......7)" + "(541\\+|[0-478][0-478]\\+" +\
         ")v1\\.[0-9][0-9]?"
TM_TEST_TIME_SEC = 3 * Kw.SECOND
TM_DAOV_CAP = 0x10000 * DACCNT
TM_DAOV_VREF = 2.5 * Kw.VOLT
LX_DAOV_RPRE = 4.99 * Kw.KILO * Kw.OHM
LX_DAOV_2R = 30.9 * Kw.KILO * Kw.OHM
LX_DAOV_RGND = 6.04 * Kw.KILO * Kw.OHM
TM_DAOV_GAIN = LX_DAOV_2R * (1.0 / LX_DAOV_RPRE + 1.0 / LX_DAOV_RGND) + 1.0
TM_DAOV_DAC_PER_V = TM_DAOV_CAP / (TM_DAOV_GAIN * TM_DAOV_VREF)
TM_DAOV_V_IF_DACMIN = - TM_DAOV_VREF * LX_DAOV_2R / LX_DAOV_RPRE
TM_DAOV_DAC_IF_0V = - TM_DAOV_V_IF_DACMIN * TM_DAOV_DAC_PER_V
TM_DAOV_DAC_MAX = TM_DAOV_CAP - TM_DAOV_DAC_IF_0V
TM_DAOV_DAC_MIN = - TM_DAOV_DAC_IF_0V
TM_DAOV_V_IF_DACMAX = TM_DAOV_DAC_MAX / TM_DAOV_DAC_PER_V
TM_DAOV_DAC_IF_P10V = TM_DAOV_DAC_IF_0V + 10.0 * Kw.VOLT * TM_DAOV_DAC_PER_V
TM_DAOV_DAC_IF_M10V = TM_DAOV_DAC_IF_0V - 10.0 * Kw.VOLT * TM_DAOV_DAC_PER_V
TM_DAOI_GZ_MAGIC = 10.0 * Kw.AMP / Kw.VOLT
LX_DAOI_1R = 45.3 * Kw.KILO * Kw.OHM
LX_DAOI_2R = 191.0 * Kw.KILO * Kw.OHM
LX_DAOI_3R = 18.2 * Kw.KILO * Kw.OHM
LX_DAOI_4R = 100.0 * Kw.OHM
TM_DAOI_mA_AT_0V = (LX_DAOI_3R * TM_DAOV_VREF * TM_DAOI_GZ_MAGIC) /\
         LX_DAOI_1R
TM_DAOI_mA_PER_V = LX_DAOI_3R / (LX_DAOI_2R * LX_DAOI_4R * Kw.MILLI)
TM_DAOI_mA_GAIN = (LX_DAOI_3R * TM_DAOI_mA_PER_V) / LX_DAOI_2R
TM_DAOI_mA_IF_0V = (LX_DAOI_3R * TM_DAOI_mA_PER_V * TM_DAOV_VREF) /\
         LX_DAOI_1R
TM_DAOI_DAC_PER_mA = TM_DAOV_DAC_PER_V / TM_DAOI_mA_PER_V
TM_DAOI_DAC_IF_00mA = TM_DAOV_DAC_IF_0V - TM_DAOI_DAC_PER_mA *\
         TM_DAOI_mA_AT_0V
TM_DAOI_DAC_IF_04mA = TM_DAOI_DAC_IF_00mA + TM_DAOI_DAC_PER_mA * (4.0 *\
         Kw.AMP)
TM_DAOI_DAC_IF_12mA = TM_DAOI_DAC_IF_00mA + TM_DAOI_DAC_PER_mA * (12.0 *\
         Kw.AMP)
TM_DAOI_DAC_IF_20mA = TM_DAOI_DAC_IF_00mA + TM_DAOI_DAC_PER_mA * (20.0 *\
         Kw.AMP)
TM_DAOI_mA_IF_DACMIN = - TM_DAOI_DAC_IF_00mA / TM_DAOI_DAC_PER_mA
TM_DAOI_mA_IF_DACMAX = TM_DAOI_mA_IF_DACMIN + TM_DAOV_CAP /\
         TM_DAOI_DAC_PER_mA
TM_NGT_COUNT_AT_FS = 20000.0 * ENGCNT
TM_NGT_P0_PER_COUNT = 0x8000 * P0CNT / ENGCNT
TM_NGT_P0_AT_FS = TM_NGT_P0_PER_COUNT * TM_NGT_COUNT_AT_FS
TM_NGT_P0_MAX = TM_NGT_P0_AT_FS * 1.5
TM_NGT_AO_MULT = 8192.0
TM_NGT_AO_SHFT = 256.0
TM_NGT_A2D_CAP = 0x40000 * A2DCNT
TM_NGT_IA_INPUT_MAX = 16
TM_NGT_CLOCK_Hz = 60.0 * Kw.MEGA * Kw.Hz
TM_NGT_ROTOR_CLOCK_Hz = 16.0 * Kw.MEGA * Kw.Hz
TM_NGT_NOISE_MAX = (1.0)
TM_NGT_NOISE_MIN = 0.3
LX_NGT_3R = 10.0 * Kw.KILO * Kw.OHM
LX_NGT_7R = 130.0 * Kw.OHM
TM_NGT_GAIN = 2.0 * LX_NGT_3R / LX_NGT_7R + 1.0
TM_NGT_A2D_PER_UVPV = TM_NGT_A2D_CAP * TM_NGT_GAIN * Kw.UVPV
LX_NGT_ROTOR_BRIDGE = 1.0 * Kw.KILO * Kw.OHM
LX_NGT_SHUNT_OHMS = 100.0 * Kw.KILO * Kw.OHM
TM_NGT_SHUNT_UVPV = 0.5 * LX_NGT_ROTOR_BRIDGE / (Kw.UVPV * (2.0 *\
         LX_NGT_SHUNT_OHMS + LX_NGT_ROTOR_BRIDGE))
TM_NGT_SHUNT_A2D = TM_NGT_SHUNT_UVPV * TM_NGT_A2D_PER_UVPV
LX_NGT00_ROTOR_BRIDGE = 5.0 * Kw.KILO * Kw.OHM
LX_NGT00_SHUNT_OHMS = 270.0 * Kw.KILO * Kw.OHM
TM_NGT00_SHUNT_UVPV = 0.5 * LX_NGT00_ROTOR_BRIDGE / (Kw.UVPV * (2.0 *\
         LX_NGT00_SHUNT_OHMS + LX_NGT00_ROTOR_BRIDGE))
TM_NGT00_SHUNT_A2D = TM_NGT00_SHUNT_UVPV * TM_NGT_A2D_PER_UVPV
TM_NGT_MSP430_URV_A2D_FS_COUNT = 0x8000
LX_NGT_MSP430_URV_A2D_FS_V = 3.3 * Kw.VOLT
LX_NGT_MSP430_URV_A2D_0_V = 0.0 * Kw.VOLT
TM_NGT_MSP430_URV_A2D_PER_V = TM_NGT_MSP430_URV_A2D_FS_COUNT /\
         (LX_NGT_MSP430_URV_A2D_FS_V - LX_NGT_MSP430_URV_A2D_0_V)
LX_NGT_URV_ROTOR_R_PLUS = 30100.0 * Kw.OHM
LX_NGT_URV_ROTOR_R_GND = 10000.0 * Kw.OHM
LX_NGT_URV_GAIN = LX_NGT_URV_ROTOR_R_GND / (LX_NGT_URV_ROTOR_R_PLUS +\
         LX_NGT_URV_ROTOR_R_GND)
TM_NGT_URV_A2D_PER_V = (LX_NGT_URV_GAIN * TM_NGT_MSP430_URV_A2D_PER_V)
TM_BLT_A2D_CAP = 0x20000 * A2DCNT
TM_BLTDC_NOISE_MIN = 0.3
TM_BLTDC_NOISE_MAX = 0.7
TM_BLT_COUNT_AT_FS = 20000 * ENGCNT
TM_BLT_P0_PER_COUNT = 0x8000 * P0CNT / ENGCNT
TM_BLT_P0_AT_FS = TM_BLT_COUNT_AT_FS * TM_BLT_P0_PER_COUNT
TM_BLT_DIODE_VOLTAGE_DROP = 0.7 * Kw.VOLT
LX_BLTDC_ROTOR_24R = 100.0 * Kw.OHM
LX_BLTDC_ROTOR_25R = 499.0 * Kw.OHM
LX_BLTDC_ROTOR_26R = 200.0 * Kw.OHM
LX_BLTDC_ROTOR_27R = 2210.0 * Kw.OHM
TM_BLTDC_GAIN = (2.0 * LX_BLTDC_ROTOR_25R / LX_BLTDC_ROTOR_24R + 1.0) *\
         (2.0 * LX_BLTDC_ROTOR_27R / LX_BLTDC_ROTOR_26R + 1.0)
TM_BLTDC_A2D_PER_UVPV = (TM_BLT_A2D_CAP * TM_BLTDC_GAIN) * Kw.UVPV
LX_BLTAC_ROTOR_14R = 118.0 * Kw.OHM
LX_BLTAC_ROTOR_13R = 15000.0 * Kw.OHM
TM_BLTAC_GAIN = 1.0 + 2.0 * LX_BLTAC_ROTOR_13R / LX_BLTAC_ROTOR_14R
TM_BLTAC_A2D_PER_UVPV = TM_BLT_A2D_CAP * TM_BLTAC_GAIN * Kw.UVPV
TM_BLTAC_NOISE_MIN = 0.1
TM_BLTAC_NOISE_MAX = 0.4
TM_BLT_CLOCK_Hz = 60.0 * Kw.MEGA * Kw.Hz
TM_BLT_ROTOR_CLOCK_Hz = 20.0 * Kw.MEGA * Kw.Hz
TM_BLT_SHUNT_OHMS = 100.0 * Kw.KILO * Kw.OHM
TM_BLT_ACDC_RATIO = 0.9929
TM_BLT_MF_NO_TARE_SHUNT_BIT = 0x01
TM_BLT_MF_NO_LS_BITS_BIT = 0x02
TM_BLT_MF_LOP_3_BITS_BIT = 0x04
TM_BLT_MF_20KHZ_FILTER_BIT = 0x08
TM_BLT_MF_DISABLE_BUTTON_BIT = 0x10
TM_BLT_MF_RF_FILTER_BIT = 0x20
TM_BLT_MF_OLD_RF_HW_BIT = 0x40
TM_BLT_ROTOR_BRIDGE = 1000 * Kw.OHM
TM_BLTAC_SHUNT_UVPV = TM_BLT_ROTOR_BRIDGE / (Kw.UVPV * (4.0 *\
         TM_BLT_SHUNT_OHMS + 2.0 * TM_BLT_ROTOR_BRIDGE))
TM_BLTAC_SHUNT_A2D = TM_BLTAC_SHUNT_UVPV * TM_BLTAC_A2D_PER_UVPV
TM_BLTDC_SHUNT_UVPV = TM_BLT_ROTOR_BRIDGE / (Kw.UVPV * (4.0 *\
         TM_BLT_SHUNT_OHMS + 2.0 * TM_BLT_ROTOR_BRIDGE))
TM_BLTDC_SHUNT_A2D = TM_BLTDC_SHUNT_UVPV * TM_BLTDC_A2D_PER_UVPV
TM_CDTM_CLOCK_Hz = 60.0 * Kw.MEGA * Kw.Hz
TM_CDTM_COUNT_AT_FS = 15000.0 * ENGCNT
TM_CDTM_P0_PER_COUNT = 0x10000 * P0CNT / ENGCNT
TM_CDTM_NOMINAL_Hz_AT_ZERO = 8.3 * Kw.KILO * Kw.Hz
TM_CDTM_NOMINAL_FS_SPAN_Hz = 3.5 * Kw.KILO * Kw.Hz
TM_CDTM_MIN_Hz = 2.0 * Kw.KILO * Kw.Hz
LX_CDTM_2R = 10.0 * Kw.KILO * Kw.OHM
LX_CDTM_5R = 10.0 * Kw.KILO * Kw.OHM
LX_CDTM_8R = 100.0 * Kw.KILO * Kw.OHM
LX_CDTM_7R = 499.0 * Kw.OHM
LX_CDTM_7C = 1.5 * Kw.NANO * Kw.FARAD
LX_CDTM_8C = 1.5 * Kw.NANO * Kw.FARAD
LX_CDTM_2V = 2.5 * Kw.VOLT
LX_CDTM_GAINA = LX_CDTM_8R / LX_CDTM_7R
LX_CDTM_GAINB = LX_CDTM_2R / (LX_CDTM_2R + LX_CDTM_5R)
LX_CDTM_CT = LX_CDTM_7C + LX_CDTM_8C
LX_CDTM_RZ = 1.0 / (1.0 / LX_CDTM_2R + 1.0 / LX_CDTM_5R)
LX_CDTM_FOUT_PER_VIN = 0.1 / (LX_CDTM_2R * LX_CDTM_CT)
LX_CDTM_FOUT_PER_VINZ = 0.1 / (LX_CDTM_RZ * LX_CDTM_CT)
LX_CDTM_V_OFFSET = LX_CDTM_2V * LX_CDTM_GAINB
TM_CDTM_GAIN = LX_CDTM_GAINA * LX_CDTM_GAINB
TM_CDTM_X = TM_CDTM_GAIN * LX_CDTM_FOUT_PER_VINZ
TM_CDTM_Hz_PER_UVPV = LX_CDTM_2V * TM_CDTM_X * Kw.UVPV
TM_CDTM_NOMINAL_Hz_AT_0X = LX_CDTM_V_OFFSET * LX_CDTM_FOUT_PER_VINZ
TM_CDTM_P0_AT_FS = TM_CDTM_COUNT_AT_FS * TM_CDTM_P0_PER_COUNT
TM_CDTM_FS_UVPV = TM_CDTM_NOMINAL_FS_SPAN_Hz / TM_CDTM_Hz_PER_UVPV
TM_CDTM_NOISE_MIN_OLD = 0.2
TM_CDTM_NOISE_MAX_OLD = 2.0
TM_CDTM_NOISE_MIN = 0.2
TM_CDTM_NOISE_MAX = 2.0
TM_CDTM_SP_DELIM = "\t"
TM_PDTM_ANAOUT_NUMBER = 3
TM_PDTM_CHANNEL_NUMBER = 4
TM_PDTM_FILTER_MAX = 10
TM_PDTM_NOISE_MIN = 7
TM_PDTM_NOISE_MAX = 25
TM_PDTM_A2D_FS = 5000
TM_PDTM_A2D_CAP = 0x2000 * A2DCNT
TM_PDTM_MULT = 2
TM_PDTM_COUNT_PER_A2D = 4
TM_PDTM_COUNT_AT_FS = TM_PDTM_A2D_FS * TM_PDTM_COUNT_PER_A2D
TM_PDTM_TC_PER_DEGC = 16 / Kw.DEGC
TM_PDTM_GAIN_VALUES = 0x1000
TM_PDTM_CLOCK_Hz = 8.0 * Kw.MEGA * Kw.Hz
TM_PDTM_SEC_PER_ZRVALUE = 0x8000 / TM_PDTM_CLOCK_Hz
LX_PDTM_22R = 6.65 * Kw.KILO * Kw.OHM
LX_PDTM_23R = 30.1 * Kw.KILO * Kw.OHM
LX_PDTM_18R = 49.9 * Kw.KILO * Kw.OHM
LX_PDTM_19R = 10.0 * Kw.KILO * Kw.OHM
LX_PDTM_10R = 49.9 * Kw.KILO * Kw.OHM
LX_PDTM_11R = 30.1 * Kw.KILO * Kw.OHM
LX_PDTM_GAIN_HWA = LX_PDTM_23R / LX_PDTM_22R
LX_PDTM_GAIN_HWB = LX_PDTM_18R / LX_PDTM_19R + 1.0
LX_PDTM_GAIN_HWC = 2.0 * Kw.TWOSQRT / Kw.PI
LX_PDTM_GAIN_HWD = LX_PDTM_10R / LX_PDTM_11R + 1.0
TM_PDTM_GAIN_HW = LX_PDTM_GAIN_HWA * LX_PDTM_GAIN_HWB * LX_PDTM_GAIN_HWC\
         * LX_PDTM_GAIN_HWD
TM_PDTM_GAIN_PER_GAIN = TM_PDTM_GAIN_HW / TM_PDTM_GAIN_VALUES
TM_PDTM_COUNT_PER_GAIN_UVPV = Kw.UVPV * TM_PDTM_A2D_CAP *\
         TM_PDTM_COUNT_PER_A2D * TM_PDTM_GAIN_PER_GAIN
TM_PDTM_P0_AT_FS = TM_PDTM_A2D_CAP * TM_PDTM_COUNT_PER_A2D *\
         TM_PDTM_COUNT_AT_FS
TM_PDTM_GAIN_MVPVATFS = 35340.0
TM_S700_NUMBER_CHANNELS = 3
TM_S700_FILTER_MAX = 10
TM_S700_COUNT_AT_FS = 10000.0 * ENGCNT
TM_S700_P0_PER_COUNT = 0x10000 * P0CNT / ENGCNT
TM_S700_P0_AT_FS = TM_S700_P0_PER_COUNT * TM_S700_COUNT_AT_FS
TM_S700P_FILTER_MAX = 10
TM_S700P_A2D_CAP = 0x800000 * A2DCNT
TM_S700P_A2D_AT_FS = 4.0 * Kw.MEGA * A2DCNT
TM_S700P_COUNT_AT_FS = 655360000.0 * ENGCNT
TM_S700P_P0_PER_COUNT = 1.0 * P0CNT / ENGCNT
TM_S700P_P0_AT_FS = TM_S700P_P0_PER_COUNT * TM_S700P_COUNT_AT_FS
TM_NGRTM_CLOCK_Hz = 16.0 * Kw.MEGA * Kw.Hz
TM_NGRTM_A2D_CAP = 0x800000 * A2DCNT
TM_NGRTM_P0_AT_FS = 163840000.0 * P0CNT
TM_NGRTM_CAMELD = 0x4000
TM_NGRTM_CAMELA = 1.0 * 0x4000 * 0x100000 * P0CNT / DACCNT
TM_NGRTM_DACFS_PER_CDE = TM_NGRTM_P0_AT_FS / TM_NGRTM_CAMELA
TM_NGRTM_FSV_PER_CDE = TM_NGRTM_DACFS_PER_CDE / TM_DAOV_DAC_PER_V
TM_NGRTM_SCALE = TM_NGRTM_DACFS_PER_CDE * TM_NGRTM_CAMELD
TM_NGRTM_A2DFS_AT_1GAIN = TM_NGRTM_P0_AT_FS * 0x10000
LX_NGRTM_30R = 10.0 * Kw.KILO * Kw.OHM
LX_NGRTM_28R = 130.0 * Kw.OHM
TM_NGRTM_GAIN = 2.0 * LX_NGRTM_30R / LX_NGRTM_28R + 1.0
TM_NGRTM_A2D_PER_UVPV = TM_NGRTM_A2D_CAP * TM_NGRTM_GAIN * Kw.UVPV
TM_NGRTM_NOISE_MIN = 0.5
TM_NGRTM_NOISE_MAX = (1.0)
TM_AD22103_VREF = 3.3 * Kw.VOLT
TM_AD22103_V_PER_DEGC = 0.028 * Kw.VOLT / Kw.DEGC
TM_AD22103_V_AT_0DEGC = 0.25 * Kw.VOLT
TM_NGRTM_TEMPA2D_CAP = 0x8000 * A2DCNT
TM_NGRTM_TEMPP0_PER_A2D = 0x10000 * P0CNT / A2DCNT
TM_NGRTM_DEGC_OFFSET = TM_AD22103_V_AT_0DEGC / TM_AD22103_V_PER_DEGC
TM_NGRTM_TEMPP0_PER_DEGC = TM_NGRTM_TEMPA2D_CAP * TM_AD22103_V_PER_DEGC *\
         TM_NGRTM_TEMPP0_PER_A2D / TM_AD22103_VREF
TM_NGRTM_TEMPP0_PER_DEGF = Kw.DEGF * TM_NGRTM_TEMPP0_PER_DEGC / Kw.DEGC
TM_NGRTM_TEMPP0_UVPV_PER_DEGF = TM_NGRTM_TEMPP0_PER_DEGF /\
         (TM_NGRTM_A2D_PER_UVPV * TM_NGRTM_TEMPP0_PER_A2D * 0x1000)
TM_BLTDC_FILTER_Hz = 20.0 * Kw.KILO * Kw.Hz
TM_BLTAC_FILTER_Hz = 20.0 * Kw.KILO * Kw.Hz
TM_CDTM_FILTER_Hz = 10.0 * Kw.KILO * Kw.Hz
TM_NGT_FILTER_Hz = 7.8125 * Kw.KILO * Kw.Hz
TM_NGRTM_FILTER_Hz = 7.8125 * Kw.KILO * Kw.Hz
TM_S700P_FILTER_Hz = 7.8125 * Kw.KILO * Kw.Hz
TM_PDTM_FILTER_Hz = 2.0 * Kw.KILO * Kw.Hz
TM_S700_FILTER_Hz = 2.0 * Kw.KILO * Kw.Hz
TM_BLTDC_UVPV_PER_A2D = 1.0 / TM_BLTDC_A2D_PER_UVPV
TM_BLTAC_UVPV_PER_A2D = 1.0 / TM_BLTAC_A2D_PER_UVPV
TM_CDTM_UVPV_PER_Hz = 1.0 / TM_CDTM_Hz_PER_UVPV
TM_NGRTM_UVPV_PER_A2D = 1.0 / TM_NGRTM_A2D_PER_UVPV
TM_NGT_UVPV_PER_A2D = 1.0 / TM_NGT_A2D_PER_UVPV
TM_PDTM_GAIN_UVPV_PER_COUNT = 1.0 / TM_PDTM_COUNT_PER_GAIN_UVPV
TM_BLTDC_UVPV_IF_A2DMAX = 1.0 / (Kw.UVPV * TM_BLTDC_GAIN)
TM_BLTAC_UVPV_IF_A2DMAX = 1.0 / (Kw.UVPV * TM_BLTAC_GAIN)
TM_NGT_UVPV_IF_A2DMAX = 1.0 / (Kw.UVPV * TM_NGT_GAIN)
TM_NGRTM_UVPV_IF_A2DMAX = 1.0 / (Kw.UVPV * TM_NGRTM_GAIN)
def tmc_cdtm_uVpV_to_rotor_freq(uvpv_data):
   return (uvpv_data / TM_CDTM_UVPV_PER_Hz + TM_CDTM_NOMINAL_Hz_AT_ZERO)
def tmc_cdtm_rotor_freq_to_uVpV(rf_data):
   return (TM_CDTM_UVPV_PER_Hz * (rf_data - TM_CDTM_NOMINAL_Hz_AT_ZERO))
def tmc_dao_V_to_DAC(volt_data):
   return (TM_DAOV_DAC_PER_V * (volt_data - TM_DAOV_V_IF_DACMIN))
def tmc_dao_DAC_to_V(dac_data):
   return (dac_data / TM_DAOV_DAC_PER_V + TM_DAOV_V_IF_DACMIN)
def tmc_dao_deltaV_to_DAC(volt_data):
   return (TM_DAOV_DAC_PER_V * volt_data)
def tmc_shunt_value(bridge_ohms, shunt_ohms):
   return (bridge_ohms / (Kw.UVPV * (4.0 * shunt_ohms + 2.0 * bridge_ohms)))
#   DDDDDDDDDDescription ############################# tm_const_description #
def tm_const_description():
   return( \
   "   Tm_Const Constants: A2DCNT DACCNT ENGCNT LX_BLTAC_ROTOR_13R LX_BL" + \
   "TAC_ROTOR_14R LX_BLTDC_ROTOR_24R LX_BLTDC_ROTOR_25R LX_BLTDC_ROTOR_2" + \
   "6R LX_BLTDC_ROTOR_27R LX_CDTM_2R LX_CDTM_2V LX_CDTM_5R LX_CDTM_7C LX" + \
   "_CDTM_7R LX_CDTM_8C LX_CDTM_8R LX_CDTM_CT LX_CDTM_FOUT_PER_VIN LX_CD" + \
   "TM_FOUT_PER_VINZ LX_CDTM_GAINA LX_CDTM_GAINB LX_CDTM_RZ LX_CDTM_V_OF" + \
   "FSET LX_DAOI_1R LX_DAOI_2R LX_DAOI_3R LX_DAOI_4R LX_DAOV_2R LX_DAOV_" + \
   "RGND LX_DAOV_RPRE LX_NGRTM_28R LX_NGRTM_30R LX_NGT00_ROTOR_BRIDGE LX" + \
   "_NGT00_SHUNT_OHMS LX_NGT_3R LX_NGT_7R LX_NGT_MSP430_URV_A2D_0_V LX_N" + \
   "GT_MSP430_URV_A2D_FS_V LX_NGT_ROTOR_BRIDGE LX_NGT_SHUNT_OHMS LX_NGT_" + \
   "URV_GAIN LX_NGT_URV_ROTOR_R_GND LX_NGT_URV_ROTOR_R_PLUS LX_PDTM_10R " + \
   "LX_PDTM_11R LX_PDTM_18R LX_PDTM_19R LX_PDTM_22R LX_PDTM_23R LX_PDTM_" + \
   "GAIN_HWA LX_PDTM_GAIN_HWB LX_PDTM_GAIN_HWC LX_PDTM_GAIN_HWD P0CNT TM" + \
   "_AD22103_V_AT_0DEGC TM_AD22103_V_PER_DEGC TM_AD22103_VREF TM_BLT_A2D" + \
   "_CAP TM_BLT_ACDC_RATIO TM_BLT_CLOCK_Hz TM_BLT_COUNT_AT_FS TM_BLT_DIO" + \
   "DE_VOLTAGE_DROP TM_BLT_MF_20KHZ_FILTER_BIT TM_BLT_MF_DISABLE_BUTTON_" + \
   "BIT TM_BLT_MF_LOP_3_BITS_BIT TM_BLT_MF_NO_LS_BITS_BIT TM_BLT_MF_NO_T" + \
   "ARE_SHUNT_BIT TM_BLT_MF_OLD_RF_HW_BIT TM_BLT_MF_RF_FILTER_BIT TM_BLT" + \
   "_P0_AT_FS TM_BLT_P0_PER_COUNT TM_BLT_REGEX TM_BLT_REGKEY TM_BLT_ROTO" + \
   "R_BRIDGE TM_BLT_ROTOR_CLOCK_Hz TM_BLT_SHUNT_OHMS TM_BLTAC_A2D_PER_UV" + \
   "PV TM_BLTAC_FILTER_Hz TM_BLTAC_GAIN TM_BLTAC_NOISE_MAX TM_BLTAC_NOIS" + \
   "E_MIN TM_BLTAC_SHUNT_A2D TM_BLTAC_SHUNT_UVPV TM_BLTAC_UVPV_IF_A2DMAX" + \
   " TM_BLTAC_UVPV_PER_A2D TM_BLTDC_A2D_PER_UVPV TM_BLTDC_FILTER_Hz TM_B" + \
   "LTDC_GAIN TM_BLTDC_NOISE_MAX TM_BLTDC_NOISE_MIN TM_BLTDC_SHUNT_A2D T" + \
   "M_BLTDC_SHUNT_UVPV TM_BLTDC_UVPV_IF_A2DMAX TM_BLTDC_UVPV_PER_A2D TM_" + \
   "CDTM_CLOCK_Hz TM_CDTM_COUNT_AT_FS TM_CDTM_FILTER_Hz TM_CDTM_FS_UVPV " + \
   "TM_CDTM_GAIN TM_CDTM_Hz_PER_UVPV TM_CDTM_MIN_Hz TM_CDTM_NOISE_MAX TM" + \
   "_CDTM_NOISE_MAX_OLD TM_CDTM_NOISE_MIN TM_CDTM_NOISE_MIN_OLD TM_CDTM_" + \
   "NOMINAL_FS_SPAN_Hz TM_CDTM_NOMINAL_Hz_AT_0X TM_CDTM_NOMINAL_Hz_AT_ZE" + \
   "RO TM_CDTM_P0_AT_FS TM_CDTM_P0_PER_COUNT TM_CDTM_REGEX TM_CDTM_REGKE" + \
   "Y TM_CDTM_SP_DELIM TM_CDTM_UVPV_PER_Hz TM_CDTM_X TM_DAOI_DAC_IF_00mA" + \
   " TM_DAOI_DAC_IF_04mA TM_DAOI_DAC_IF_12mA TM_DAOI_DAC_IF_20mA TM_DAOI" + \
   "_DAC_PER_mA TM_DAOI_GZ_MAGIC TM_DAOI_mA_AT_0V TM_DAOI_mA_GAIN TM_DAO" + \
   "I_mA_IF_0V TM_DAOI_mA_IF_DACMAX TM_DAOI_mA_IF_DACMIN TM_DAOI_mA_PER_" + \
   "V TM_DAOV_CAP TM_DAOV_DAC_IF_0V TM_DAOV_DAC_IF_M10V TM_DAOV_DAC_IF_P" + \
   "10V TM_DAOV_DAC_MAX TM_DAOV_DAC_MIN TM_DAOV_DAC_PER_V TM_DAOV_GAIN T" + \
   "M_DAOV_V_IF_DACMAX TM_DAOV_V_IF_DACMIN TM_DAOV_VREF TM_DPT_REGKEY TM" + \
   "_LIST_SEPARATOR TM_NGRTM_A2D_CAP TM_NGRTM_A2D_PER_UVPV TM_NGRTM_A2DF" + \
   "S_AT_1GAIN TM_NGRTM_CAMELA TM_NGRTM_CAMELD TM_NGRTM_CLOCK_Hz TM_NGRT" + \
   "M_DACFS_PER_CDE TM_NGRTM_DEGC_OFFSET TM_NGRTM_FILTER_Hz TM_NGRTM_FSV" + \
   "_PER_CDE TM_NGRTM_GAIN TM_NGRTM_NOISE_MAX TM_NGRTM_NOISE_MIN TM_NGRT" + \
   "M_P0_AT_FS TM_NGRTM_REGEX TM_NGRTM_REGKEY TM_NGRTM_SCALE TM_NGRTM_TE" + \
   "MPA2D_CAP TM_NGRTM_TEMPP0_PER_A2D TM_NGRTM_TEMPP0_PER_DEGC TM_NGRTM_" + \
   "TEMPP0_PER_DEGF TM_NGRTM_TEMPP0_UVPV_PER_DEGF TM_NGRTM_UVPV_IF_A2DMA" + \
   "X TM_NGRTM_UVPV_PER_A2D TM_NGT00_SHUNT_A2D TM_NGT00_SHUNT_UVPV TM_NG" + \
   "T_A2D_CAP TM_NGT_A2D_PER_UVPV TM_NGT_AO_MULT TM_NGT_AO_SHFT TM_NGT_C" + \
   "LOCK_Hz TM_NGT_COUNT_AT_FS TM_NGT_FILTER_Hz TM_NGT_GAIN TM_NGT_IA_IN" + \
   "PUT_MAX TM_NGT_MSP430_URV_A2D_FS_COUNT TM_NGT_MSP430_URV_A2D_PER_V T" + \
   "M_NGT_NOISE_MAX TM_NGT_NOISE_MIN TM_NGT_P0_AT_FS TM_NGT_P0_MAX TM_NG" + \
   "T_P0_PER_COUNT TM_NGT_REGEX TM_NGT_REGKEY TM_NGT_ROTOR_CLOCK_Hz TM_N" + \
   "GT_SHUNT_A2D TM_NGT_SHUNT_UVPV TM_NGT_URV_A2D_PER_V TM_NGT_UVPV_IF_A" + \
   "2DMAX TM_NGT_UVPV_PER_A2D TM_PDTM_A2D_CAP TM_PDTM_A2D_FS TM_PDTM_ANA" + \
   "OUT_NUMBER TM_PDTM_CHANNEL_NUMBER TM_PDTM_CLOCK_Hz TM_PDTM_COUNT_AT_" + \
   "FS TM_PDTM_COUNT_PER_A2D TM_PDTM_COUNT_PER_GAIN_UVPV TM_PDTM_FILTER_" + \
   "Hz TM_PDTM_FILTER_MAX TM_PDTM_GAIN_HW TM_PDTM_GAIN_MVPVATFS TM_PDTM_" + \
   "GAIN_PER_GAIN TM_PDTM_GAIN_UVPV_PER_COUNT TM_PDTM_GAIN_VALUES TM_PDT" + \
   "M_MIN_VERSION TM_PDTM_MULT TM_PDTM_NOISE_MAX TM_PDTM_NOISE_MIN TM_PD" + \
   "TM_P0_AT_FS TM_PDTM_REGEX TM_PDTM_REGKEY TM_PDTM_SEC_PER_ZRVALUE TM_" + \
   "PDTM_TC_PER_DEGC TM_REG_KEY TM_S700_COUNT_AT_FS TM_S700_FILTER_Hz TM" + \
   "_S700_FILTER_MAX TM_S700_NUMBER_CHANNELS TM_S700_P0_AT_FS TM_S700_P0" + \
   "_PER_COUNT TM_S700_REGEX TM_S700_REGKEY TM_S700P_A2D_AT_FS TM_S700P_" + \
   "A2D_CAP TM_S700P_COUNT_AT_FS TM_S700P_FILTER_Hz TM_S700P_FILTER_MAX " + \
   "TM_S700P_P0_AT_FS TM_S700P_P0_PER_COUNT TM_S700P_REGEX TM_S700P_REGK" + \
   "EY TM_TEST_TIME_SEC" + \
   "\n" + \
   "   Tm_Const 1-ary Functions: tmc_cdtm_rotor_freq_to_uVpV tmc_cdtm_uV" + \
   "pV_to_rotor_freq tmc_dao_DAC_to_V tmc_dao_deltaV_to_DAC tmc_dao_V_to" + \
   "_DAC" + \
   "\n" + \
   "   Tm_Const 2-ary Functions: tmc_shunt_value" + \
   "\n"
)
def tm_const_desc():
   return( \
   "   Tm_Const Constants: A2DCNT DACCNT ENGCNT LX_(BLT(AC_ROTOR_1(3R|4R" + \
   ")|DC_ROTOR_2(4R|5R|6R|7R))|CDTM_(2[RV]|5R|7[CR]|8[CR]|CT|FOUT_PER_VI" + \
   "NZ?|GAIN[AB]|RZ|V_OFFSET)|DAO(I_(1R|2R|3R|4R)|V_(2R|R(GND|PRE)))|NG(" + \
   "RTM_(28R|30R)|T(00_(ROTOR_BRIDGE|SHUNT_OHMS)|_(3R|7R|MSP430_URV_A2D_" + \
   "(0_V|FS_V)|ROTOR_BRIDGE|SHUNT_OHMS|URV_(GAIN|ROTOR_R_(GND|PLUS)))))|" + \
   "PDTM_(1(0R|1R|8R|9R)|2(2R|3R)|GAIN_HW([AB]|[CD]))) P0CNT TM_(AD22103" + \
   "_V(_(AT_0DEGC|PER_DEGC)|REF)|BLT(_(A(2D_CAP|CDC_RATIO)|C(LOCK_Hz|OUN" + \
   "T_AT_FS)|DIODE_VOLTAGE_DROP|MF_(20KHZ_FILTER_BIT|DISABLE_BUTTON_BIT|" + \
   "LOP_3_BITS_BIT|NO_(LS_BITS_BIT|TARE_SHUNT_BIT)|OLD_RF_HW_BIT|RF_FILT" + \
   "ER_BIT)|P0_(AT_FS|PER_COUNT)|R(EG(EX|KEY)|OTOR_(BRIDGE|CLOCK_Hz))|SH" + \
   "UNT_OHMS)|AC_(A2D_PER_UVPV|FILTER_Hz|GAIN|NOISE_M(AX|IN)|SHUNT_(A2D|" + \
   "UVPV)|UVPV_(IF_A2DMAX|PER_A2D))|DC_(A2D_PER_UVPV|FILTER_Hz|GAIN|NOIS" + \
   "E_M(AX|IN)|SHUNT_(A2D|UVPV)|UVPV_(IF_A2DMAX|PER_A2D)))|CDTM_(C(LOCK_" + \
   "Hz|OUNT_AT_FS)|F(ILTER_Hz|S_UVPV)|GAIN|Hz_PER_UVPV|MIN_Hz|NO(ISE_M(A" + \
   "X(_OLD)?|IN(_OLD)?)|MINAL_(FS_SPAN_Hz|Hz_AT_0X|Hz_AT_ZERO))|P0_(AT_F" + \
   "S|PER_COUNT)|REG(EX|KEY)|SP_DELIM|UVPV_PER_Hz|X)|D(AO(I_(DAC_(IF_(0(" + \
   "0mA|4mA)|(12mA|20mA))|PER_mA)|GZ_MAGIC|mA_(AT_0V|GAIN|IF_(0V|DACM(AX" + \
   "|IN))|PER_V))|V_(CAP|DAC_(IF_(0|M10|P10)V|M(AX|IN)|PER_V)|GAIN|V(_IF" + \
   "_DACM(AX|IN)|REF)))|PT_REGKEY)|LIST_SEPARATOR|NG(RTM_(A2D(_(CAP|PER_" + \
   "UVPV)|FS_AT_1GAIN)|C(AMEL[AD]|LOCK_Hz)|D(ACFS_PER_CDE|EGC_OFFSET)|F(" + \
   "ILTER_Hz|SV_PER_CDE)|GAIN|NOISE_M(AX|IN)|P0_AT_FS|REG(EX|KEY)|SCALE|" + \
   "TEMP(A2D_CAP|P0_(PER_(A2D|DEGC|DEGF)|UVPV_PER_DEGF))|UVPV_(IF_A2DMAX" + \
   "|PER_A2D))|T(00_SHUNT_(A2D|UVPV)|_(A(2D_(CAP|PER_UVPV)|O_(MULT|SHFT)" + \
   ")|C(LOCK_Hz|OUNT_AT_FS)|FILTER_Hz|GAIN|IA_INPUT_MAX|MSP430_URV_A2D_(" + \
   "FS_COUNT|PER_V)|NOISE_M(AX|IN)|P0_(AT_FS|MAX|PER_COUNT)|R(EG(EX|KEY)" + \
   "|OTOR_CLOCK_Hz)|SHUNT_(A2D|UVPV)|U(RV_A2D_PER_V|VPV_(IF_A2DMAX|PER_A" + \
   "2D)))))|PDTM_(A(2D_(CAP|FS)|NAOUT_NUMBER)|C(HANNEL_NUMBER|LOCK_Hz|OU" + \
   "NT_(AT_FS|PER_(A2D|GAIN_UVPV)))|FILTER_(Hz|MAX)|GAIN_(HW|MVPVATFS|PE" + \
   "R_GAIN|UVPV_PER_COUNT|VALUES)|M(IN_VERSION|ULT)|NOISE_M(AX|IN)|P0_AT" + \
   "_FS|REG(EX|KEY)|SEC_PER_ZRVALUE|TC_PER_DEGC)|REG_KEY|S700(_(COUNT_AT" + \
   "_FS|FILTER_(Hz|MAX)|NUMBER_CHANNELS|P0_(AT_FS|PER_COUNT)|REG(EX|KEY)" + \
   ")|P_(A2D_(AT_FS|CAP)|COUNT_AT_FS|FILTER_(Hz|MAX)|P0_(AT_FS|PER_COUNT" + \
   ")|REG(EX|KEY)))|TEST_TIME_SEC)" + \
   "\n" + \
   "   Tm_Const 1-ary Functions: tmc_(cdtm_(rotor_freq_to_uVpV|uVpV_to_r" + \
   "otor_freq)|dao_(DAC_to_V|deltaV_to_DAC|V_to_DAC))" + \
   "\n" + \
   "   Tm_Const 2-ary Functions: tmc_shunt_value" + \
   "\n"
)
