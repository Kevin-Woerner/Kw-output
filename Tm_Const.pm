#    Copyright (C) 2021 by Kevin D. Woerner
##-# =KDW= ################# BUILDER $KWROOT/0lib/vkkcp.sh ##################
##-# =KDW= ########## SOURCE $KWROOT/codekdw/kw-lib/Tm_Const.fwipp ##########
##-# =KDW= #### THIS FILE CAN BE OVERWRITTEN BY KEVIN D. WOERNER OR HIS #####
##-# =KDW= ############ MINIONS AT *ANY* TIME. Caveat utilitor. #############
# 2021-05-14 kdw  For Changelog, See File Tm_Const.varylog
package Tm_Const;
use Time::HiRes qw();
use POSIX       qw();
use vars qw(@EXPORT @EXPORT_OK %EXPORT_TAGS);
use Exporter    qw(import);
@EXPORT = ();
@EXPORT_OK = ( qw(
   A2DCNT DACCNT ENGCNT LX_BLTAC_ROTOR_13R LX_BLTAC_ROTOR_14R
   LX_BLTDC_ROTOR_24R LX_BLTDC_ROTOR_25R LX_BLTDC_ROTOR_26R
   LX_BLTDC_ROTOR_27R LX_CDTM_2R LX_CDTM_2V LX_CDTM_5R LX_CDTM_7C LX_CDTM_7R
   LX_CDTM_8C LX_CDTM_8R LX_CDTM_CT LX_CDTM_FOUT_PER_VIN
   LX_CDTM_FOUT_PER_VINZ LX_CDTM_GAINA LX_CDTM_GAINB LX_CDTM_RZ
   LX_CDTM_V_OFFSET LX_DAOI_1R LX_DAOI_2R LX_DAOI_3R LX_DAOI_4R LX_DAOV_2R
   LX_DAOV_RGND LX_DAOV_RPRE LX_NGRTM_28R LX_NGRTM_30R LX_NGT00_ROTOR_BRIDGE
   LX_NGT00_SHUNT_OHMS LX_NGT_3R LX_NGT_7R LX_NGT_MSP430_URV_A2D_0_V
   LX_NGT_MSP430_URV_A2D_FS_V LX_NGT_ROTOR_BRIDGE LX_NGT_SHUNT_OHMS
   LX_NGT_URV_GAIN LX_NGT_URV_ROTOR_R_GND LX_NGT_URV_ROTOR_R_PLUS LX_PDTM_10R
   LX_PDTM_11R LX_PDTM_18R LX_PDTM_19R LX_PDTM_22R LX_PDTM_23R
   LX_PDTM_GAIN_HWA LX_PDTM_GAIN_HWB LX_PDTM_GAIN_HWC LX_PDTM_GAIN_HWD P0CNT
   TM_AD22103_VREF TM_AD22103_V_AT_0DEGC TM_AD22103_V_PER_DEGC
   TM_BLTAC_A2D_PER_UVPV TM_BLTAC_FILTER_Hz TM_BLTAC_GAIN TM_BLTAC_NOISE_MAX
   TM_BLTAC_NOISE_MIN TM_BLTAC_SHUNT_A2D TM_BLTAC_SHUNT_UVPV
   TM_BLTAC_UVPV_IF_A2DMAX TM_BLTAC_UVPV_PER_A2D TM_BLTDC_A2D_PER_UVPV
   TM_BLTDC_FILTER_Hz TM_BLTDC_GAIN TM_BLTDC_NOISE_MAX TM_BLTDC_NOISE_MIN
   TM_BLTDC_SHUNT_A2D TM_BLTDC_SHUNT_UVPV TM_BLTDC_UVPV_IF_A2DMAX
   TM_BLTDC_UVPV_PER_A2D TM_BLT_A2D_CAP TM_BLT_ACDC_RATIO TM_BLT_CLOCK_Hz
   TM_BLT_COUNT_AT_FS TM_BLT_DIODE_VOLTAGE_DROP TM_BLT_MF_20KHZ_FILTER_BIT
   TM_BLT_MF_DISABLE_BUTTON_BIT TM_BLT_MF_LOP_3_BITS_BIT
   TM_BLT_MF_NO_LS_BITS_BIT TM_BLT_MF_NO_TARE_SHUNT_BIT
   TM_BLT_MF_OLD_RF_HW_BIT TM_BLT_MF_RF_FILTER_BIT TM_BLT_P0_AT_FS
   TM_BLT_P0_PER_COUNT TM_BLT_REGEX TM_BLT_REGKEY TM_BLT_ROTOR_BRIDGE
   TM_BLT_ROTOR_CLOCK_Hz TM_BLT_SHUNT_OHMS TM_CDTM_CLOCK_Hz
   TM_CDTM_COUNT_AT_FS TM_CDTM_FILTER_Hz TM_CDTM_FS_UVPV TM_CDTM_GAIN
   TM_CDTM_Hz_PER_UVPV TM_CDTM_MIN_Hz TM_CDTM_NOISE_MAX TM_CDTM_NOISE_MAX_OLD
   TM_CDTM_NOISE_MIN TM_CDTM_NOISE_MIN_OLD TM_CDTM_NOMINAL_FS_SPAN_Hz
   TM_CDTM_NOMINAL_Hz_AT_0X TM_CDTM_NOMINAL_Hz_AT_ZERO TM_CDTM_P0_AT_FS
   TM_CDTM_P0_PER_COUNT TM_CDTM_REGEX TM_CDTM_REGKEY TM_CDTM_SP_DELIM
   TM_CDTM_UVPV_PER_Hz TM_CDTM_X TM_DAOI_DAC_IF_00mA TM_DAOI_DAC_IF_04mA
   TM_DAOI_DAC_IF_12mA TM_DAOI_DAC_IF_20mA TM_DAOI_DAC_PER_mA
   TM_DAOI_GZ_MAGIC TM_DAOI_mA_AT_0V TM_DAOI_mA_GAIN TM_DAOI_mA_IF_0V
   TM_DAOI_mA_IF_DACMAX TM_DAOI_mA_IF_DACMIN TM_DAOI_mA_PER_V TM_DAOV_CAP
   TM_DAOV_DAC_IF_0V TM_DAOV_DAC_IF_M10V TM_DAOV_DAC_IF_P10V TM_DAOV_DAC_MAX
   TM_DAOV_DAC_MIN TM_DAOV_DAC_PER_V TM_DAOV_GAIN TM_DAOV_VREF
   TM_DAOV_V_IF_DACMAX TM_DAOV_V_IF_DACMIN TM_DPT_REGKEY TM_LIST_SEPARATOR
   TM_NGRTM_A2DFS_AT_1GAIN TM_NGRTM_A2D_CAP TM_NGRTM_A2D_PER_UVPV
   TM_NGRTM_CAMELA TM_NGRTM_CAMELD TM_NGRTM_CLOCK_Hz TM_NGRTM_DACFS_PER_CDE
   TM_NGRTM_DEGC_OFFSET TM_NGRTM_FILTER_Hz TM_NGRTM_FSV_PER_CDE TM_NGRTM_GAIN
   TM_NGRTM_NOISE_MAX TM_NGRTM_NOISE_MIN TM_NGRTM_P0_AT_FS TM_NGRTM_REGEX
   TM_NGRTM_REGKEY TM_NGRTM_SCALE TM_NGRTM_TEMPA2D_CAP
   TM_NGRTM_TEMPP0_PER_A2D TM_NGRTM_TEMPP0_PER_DEGC TM_NGRTM_TEMPP0_PER_DEGF
   TM_NGRTM_TEMPP0_UVPV_PER_DEGF TM_NGRTM_UVPV_IF_A2DMAX
   TM_NGRTM_UVPV_PER_A2D TM_NGT00_SHUNT_A2D TM_NGT00_SHUNT_UVPV
   TM_NGT_A2D_CAP TM_NGT_A2D_PER_UVPV TM_NGT_AO_MULT TM_NGT_AO_SHFT
   TM_NGT_CLOCK_Hz TM_NGT_COUNT_AT_FS TM_NGT_FILTER_Hz TM_NGT_GAIN
   TM_NGT_IA_INPUT_MAX TM_NGT_MSP430_URV_A2D_FS_COUNT
   TM_NGT_MSP430_URV_A2D_PER_V TM_NGT_NOISE_MAX TM_NGT_NOISE_MIN
   TM_NGT_P0_AT_FS TM_NGT_P0_MAX TM_NGT_P0_PER_COUNT TM_NGT_REGEX
   TM_NGT_REGKEY TM_NGT_ROTOR_CLOCK_Hz TM_NGT_SHUNT_A2D TM_NGT_SHUNT_UVPV
   TM_NGT_URV_A2D_PER_V TM_NGT_UVPV_IF_A2DMAX TM_NGT_UVPV_PER_A2D
   TM_PDTM_A2D_CAP TM_PDTM_A2D_FS TM_PDTM_ANAOUT_NUMBER
   TM_PDTM_CHANNEL_NUMBER TM_PDTM_CLOCK_Hz TM_PDTM_COUNT_AT_FS
   TM_PDTM_COUNT_PER_A2D TM_PDTM_COUNT_PER_GAIN_UVPV TM_PDTM_FILTER_Hz
   TM_PDTM_FILTER_MAX TM_PDTM_GAIN_HW TM_PDTM_GAIN_MVPVATFS
   TM_PDTM_GAIN_PER_GAIN TM_PDTM_GAIN_UVPV_PER_COUNT TM_PDTM_GAIN_VALUES
   TM_PDTM_MIN_VERSION TM_PDTM_MULT TM_PDTM_NOISE_MAX TM_PDTM_NOISE_MIN
   TM_PDTM_P0_AT_FS TM_PDTM_REGEX TM_PDTM_REGKEY TM_PDTM_SEC_PER_ZRVALUE
   TM_PDTM_TC_PER_DEGC TM_REG_KEY TM_S700P_A2D_AT_FS TM_S700P_A2D_CAP
   TM_S700P_COUNT_AT_FS TM_S700P_FILTER_Hz TM_S700P_FILTER_MAX
   TM_S700P_P0_AT_FS TM_S700P_P0_PER_COUNT TM_S700P_REGEX TM_S700P_REGKEY
   TM_S700_COUNT_AT_FS TM_S700_FILTER_Hz TM_S700_FILTER_MAX
   TM_S700_NUMBER_CHANNELS TM_S700_P0_AT_FS TM_S700_P0_PER_COUNT
   TM_S700_REGEX TM_S700_REGKEY TM_TEST_TIME_SEC tmc_cdtm_rotor_freq_to_uVpV
   tmc_cdtm_uVpV_to_rotor_freq tmc_dao_DAC_to_V tmc_dao_V_to_DAC
   tmc_dao_deltaV_to_DAC tmc_shunt_value
)); # End of EXPORT_OK
%EXPORT_TAGS = ( ALL => [ @EXPORT_OK ] );
sub tmc_cdtm_uVpV_to_rotor_freq($ );
sub tmc_cdtm_rotor_freq_to_uVpV($ );
sub tmc_dao_V_to_DAC($ );
sub tmc_dao_DAC_to_V($ );
sub tmc_dao_deltaV_to_DAC($ );
sub tmc_shunt_value($$ );
use Kw qw();
sub A2DCNT() { Kw::BIT; }
sub P0CNT() { Kw::BIT; }
sub ENGCNT() { Kw::BIT; }
sub DACCNT() { Kw::BIT; }
sub TM_LIST_SEPARATOR() { ","; }
sub TM_PDTM_MIN_VERSION() { "1.5.4"; }
sub TM_REG_KEY() { "TM_INFO"; }
sub TM_BLT_REGKEY() { "BLT"; }
sub TM_CDTM_REGKEY() { "CDTM"; }
sub TM_DPT_REGKEY() { "DPT"; }
sub TM_NGRTM_REGKEY() { "NGRTM"; }
sub TM_NGT_REGKEY() { "NGT"; }
sub TM_PDTM_REGKEY() { "PDTM"; }
sub TM_S700_REGKEY() { "700"; }
sub TM_S700P_REGKEY() { "700+"; }
sub TM_BLT_REGEX() { "(MCRT)?(80001|86108|86109|86110" .
         "|8[14-7]00[24789]" . "|8[14-7]01[01]" . "|8[1458]70[24789]" .
         "|8[1458]71[01]" . "|8300[247])VS?"; }
sub TM_CDTM_REGEX() { "(MCRT)?(4820[1-4])VS?"; }
sub TM_NGRTM_REGEX() { "(CF28(56|82|84)" .
         "|22(7[1-5]|8[1-7]|9[1-4]|90[89]|910)" . "|23(0[24789]|10)D)" .
         "V[NCJ]?S?"; }
sub TM_NGT_REGEX() { "(MCRT)?" .
         "(4[89]600VH?|(488|[457]98)(0[1234678]|[56]1|[5-8]0)V)S?"; }
sub TM_PDTM_REGEX() { "(MCRT)?(278[234]0D|27835D" . "|4[89]00[1-4678]P" .
         "|4[89]0[67]0P" . "|4[89]70[1-8]VH?" . "|4[89]7[678]0VH?" .
         "|4[89]761VH?" . "|[57]970[1-4678]V" . "|[57]97[67][01]V)S?"; }
sub TM_S700_REGEX() { "(Model 7)" . "(541|[0-478][0-478]) " .
         "v[1-7]\\.[0-9] "; }
sub TM_S700P_REGEX() { "(Model 7|......7)" . "(541\\+|[0-478][0-478]\\+"
         . ")v1\\.[0-9][0-9]?"; }
sub TM_TEST_TIME_SEC() { 3 * Kw::SECOND; }
sub TM_DAOV_CAP() { 0x10000 * DACCNT; }
sub TM_DAOV_VREF() { 2.5 * Kw::VOLT; }
sub LX_DAOV_RPRE() { 4.99 * Kw::KILO * Kw::OHM; }
sub LX_DAOV_2R() { 30.9 * Kw::KILO * Kw::OHM; }
sub LX_DAOV_RGND() { 6.04 * Kw::KILO * Kw::OHM; }
sub TM_DAOV_GAIN() { LX_DAOV_2R * (1.0 / LX_DAOV_RPRE + 1.0 /
         LX_DAOV_RGND) + 1.0; }
sub TM_DAOV_DAC_PER_V() { TM_DAOV_CAP / (TM_DAOV_GAIN * TM_DAOV_VREF); }
sub TM_DAOV_V_IF_DACMIN() { - TM_DAOV_VREF * LX_DAOV_2R / LX_DAOV_RPRE; }
sub TM_DAOV_DAC_IF_0V() { - TM_DAOV_V_IF_DACMIN * TM_DAOV_DAC_PER_V; }
sub TM_DAOV_DAC_MAX() { TM_DAOV_CAP - TM_DAOV_DAC_IF_0V; }
sub TM_DAOV_DAC_MIN() { - TM_DAOV_DAC_IF_0V; }
sub TM_DAOV_V_IF_DACMAX() { TM_DAOV_DAC_MAX / TM_DAOV_DAC_PER_V; }
sub TM_DAOV_DAC_IF_P10V() { TM_DAOV_DAC_IF_0V + 10.0 * Kw::VOLT *
         TM_DAOV_DAC_PER_V; }
sub TM_DAOV_DAC_IF_M10V() { TM_DAOV_DAC_IF_0V - 10.0 * Kw::VOLT *
         TM_DAOV_DAC_PER_V; }
sub TM_DAOI_GZ_MAGIC() { 10.0 * Kw::AMP / Kw::VOLT; }
sub LX_DAOI_1R() { 45.3 * Kw::KILO * Kw::OHM; }
sub LX_DAOI_2R() { 191.0 * Kw::KILO * Kw::OHM; }
sub LX_DAOI_3R() { 18.2 * Kw::KILO * Kw::OHM; }
sub LX_DAOI_4R() { 100.0 * Kw::OHM; }
sub TM_DAOI_mA_AT_0V() { (LX_DAOI_3R * TM_DAOV_VREF * TM_DAOI_GZ_MAGIC) /
         LX_DAOI_1R; }
sub TM_DAOI_mA_PER_V() { LX_DAOI_3R / (LX_DAOI_2R * LX_DAOI_4R *
         Kw::MILLI); }
sub TM_DAOI_mA_GAIN() { (LX_DAOI_3R * TM_DAOI_mA_PER_V) / LX_DAOI_2R; }
sub TM_DAOI_mA_IF_0V() { (LX_DAOI_3R * TM_DAOI_mA_PER_V * TM_DAOV_VREF) /
         LX_DAOI_1R; }
sub TM_DAOI_DAC_PER_mA() { TM_DAOV_DAC_PER_V / TM_DAOI_mA_PER_V; }
sub TM_DAOI_DAC_IF_00mA() { TM_DAOV_DAC_IF_0V - TM_DAOI_DAC_PER_mA *
         TM_DAOI_mA_AT_0V; }
sub TM_DAOI_DAC_IF_04mA() { TM_DAOI_DAC_IF_00mA + TM_DAOI_DAC_PER_mA *
         (4.0 * Kw::AMP); }
sub TM_DAOI_DAC_IF_12mA() { TM_DAOI_DAC_IF_00mA + TM_DAOI_DAC_PER_mA *
         (12.0 * Kw::AMP); }
sub TM_DAOI_DAC_IF_20mA() { TM_DAOI_DAC_IF_00mA + TM_DAOI_DAC_PER_mA *
         (20.0 * Kw::AMP); }
sub TM_DAOI_mA_IF_DACMIN() { - TM_DAOI_DAC_IF_00mA / TM_DAOI_DAC_PER_mA; }
sub TM_DAOI_mA_IF_DACMAX() { TM_DAOI_mA_IF_DACMIN + TM_DAOV_CAP /
         TM_DAOI_DAC_PER_mA; }
sub TM_NGT_COUNT_AT_FS() { 20000.0 * ENGCNT; }
sub TM_NGT_P0_PER_COUNT() { 0x8000 * P0CNT / ENGCNT; }
sub TM_NGT_P0_AT_FS() { TM_NGT_P0_PER_COUNT * TM_NGT_COUNT_AT_FS; }
sub TM_NGT_P0_MAX() { TM_NGT_P0_AT_FS * 1.5; }
sub TM_NGT_AO_MULT() { 8192.0; }
sub TM_NGT_AO_SHFT() { 256.0; }
sub TM_NGT_A2D_CAP() { 0x40000 * A2DCNT; }
sub TM_NGT_IA_INPUT_MAX() { 16; }
sub TM_NGT_CLOCK_Hz() { 60.0 * Kw::MEGA * Kw::Hz; }
sub TM_NGT_ROTOR_CLOCK_Hz() { 16.0 * Kw::MEGA * Kw::Hz; }
sub TM_NGT_NOISE_MAX() { (1.0); }
sub TM_NGT_NOISE_MIN() { 0.3; }
sub LX_NGT_3R() { 10.0 * Kw::KILO * Kw::OHM; }
sub LX_NGT_7R() { 130.0 * Kw::OHM; }
sub TM_NGT_GAIN() { 2.0 * LX_NGT_3R / LX_NGT_7R + 1.0; }
sub TM_NGT_A2D_PER_UVPV() { TM_NGT_A2D_CAP * TM_NGT_GAIN * Kw::UVPV; }
sub LX_NGT_ROTOR_BRIDGE() { 1.0 * Kw::KILO * Kw::OHM; }
sub LX_NGT_SHUNT_OHMS() { 100.0 * Kw::KILO * Kw::OHM; }
sub TM_NGT_SHUNT_UVPV() { 0.5 * LX_NGT_ROTOR_BRIDGE / (Kw::UVPV * (2.0 *
         LX_NGT_SHUNT_OHMS + LX_NGT_ROTOR_BRIDGE)); }
sub TM_NGT_SHUNT_A2D() { TM_NGT_SHUNT_UVPV * TM_NGT_A2D_PER_UVPV; }
sub LX_NGT00_ROTOR_BRIDGE() { 5.0 * Kw::KILO * Kw::OHM; }
sub LX_NGT00_SHUNT_OHMS() { 270.0 * Kw::KILO * Kw::OHM; }
sub TM_NGT00_SHUNT_UVPV() { 0.5 * LX_NGT00_ROTOR_BRIDGE / (Kw::UVPV *
         (2.0 * LX_NGT00_SHUNT_OHMS + LX_NGT00_ROTOR_BRIDGE)); }
sub TM_NGT00_SHUNT_A2D() { TM_NGT00_SHUNT_UVPV * TM_NGT_A2D_PER_UVPV; }
sub TM_NGT_MSP430_URV_A2D_FS_COUNT() { 0x8000; }
sub LX_NGT_MSP430_URV_A2D_FS_V() { 3.3 * Kw::VOLT; }
sub LX_NGT_MSP430_URV_A2D_0_V() { 0.0 * Kw::VOLT; }
sub TM_NGT_MSP430_URV_A2D_PER_V() { TM_NGT_MSP430_URV_A2D_FS_COUNT /
         (LX_NGT_MSP430_URV_A2D_FS_V - LX_NGT_MSP430_URV_A2D_0_V); }
sub LX_NGT_URV_ROTOR_R_PLUS() { 30100.0 * Kw::OHM; }
sub LX_NGT_URV_ROTOR_R_GND() { 10000.0 * Kw::OHM; }
sub LX_NGT_URV_GAIN() { LX_NGT_URV_ROTOR_R_GND / (LX_NGT_URV_ROTOR_R_PLUS
         + LX_NGT_URV_ROTOR_R_GND); }
sub TM_NGT_URV_A2D_PER_V() { (LX_NGT_URV_GAIN *
         TM_NGT_MSP430_URV_A2D_PER_V); }
sub TM_BLT_A2D_CAP() { 0x20000 * A2DCNT; }
sub TM_BLTDC_NOISE_MIN() { 0.3; }
sub TM_BLTDC_NOISE_MAX() { 0.7; }
sub TM_BLT_COUNT_AT_FS() { 20000 * ENGCNT; }
sub TM_BLT_P0_PER_COUNT() { 0x8000 * P0CNT / ENGCNT; }
sub TM_BLT_P0_AT_FS() { TM_BLT_COUNT_AT_FS * TM_BLT_P0_PER_COUNT; }
sub TM_BLT_DIODE_VOLTAGE_DROP() { 0.7 * Kw::VOLT; }
sub LX_BLTDC_ROTOR_24R() { 100.0 * Kw::OHM; }
sub LX_BLTDC_ROTOR_25R() { 499.0 * Kw::OHM; }
sub LX_BLTDC_ROTOR_26R() { 200.0 * Kw::OHM; }
sub LX_BLTDC_ROTOR_27R() { 2210.0 * Kw::OHM; }
sub TM_BLTDC_GAIN() { (2.0 * LX_BLTDC_ROTOR_25R / LX_BLTDC_ROTOR_24R +
         1.0) * (2.0 * LX_BLTDC_ROTOR_27R / LX_BLTDC_ROTOR_26R + 1.0); }
sub TM_BLTDC_A2D_PER_UVPV() { (TM_BLT_A2D_CAP * TM_BLTDC_GAIN) * Kw::UVPV; }
sub LX_BLTAC_ROTOR_14R() { 118.0 * Kw::OHM; }
sub LX_BLTAC_ROTOR_13R() { 15000.0 * Kw::OHM; }
sub TM_BLTAC_GAIN() { 1.0 + 2.0 * LX_BLTAC_ROTOR_13R / LX_BLTAC_ROTOR_14R; }
sub TM_BLTAC_A2D_PER_UVPV() { TM_BLT_A2D_CAP * TM_BLTAC_GAIN * Kw::UVPV; }
sub TM_BLTAC_NOISE_MIN() { 0.1; }
sub TM_BLTAC_NOISE_MAX() { 0.4; }
sub TM_BLT_CLOCK_Hz() { 60.0 * Kw::MEGA * Kw::Hz; }
sub TM_BLT_ROTOR_CLOCK_Hz() { 20.0 * Kw::MEGA * Kw::Hz; }
sub TM_BLT_SHUNT_OHMS() { 100.0 * Kw::KILO * Kw::OHM; }
sub TM_BLT_ACDC_RATIO() { 0.9929; }
sub TM_BLT_MF_NO_TARE_SHUNT_BIT() { 0x01; }
sub TM_BLT_MF_NO_LS_BITS_BIT() { 0x02; }
sub TM_BLT_MF_LOP_3_BITS_BIT() { 0x04; }
sub TM_BLT_MF_20KHZ_FILTER_BIT() { 0x08; }
sub TM_BLT_MF_DISABLE_BUTTON_BIT() { 0x10; }
sub TM_BLT_MF_RF_FILTER_BIT() { 0x20; }
sub TM_BLT_MF_OLD_RF_HW_BIT() { 0x40; }
sub TM_BLT_ROTOR_BRIDGE() { 1000 * Kw::OHM; }
sub TM_BLTAC_SHUNT_UVPV() { TM_BLT_ROTOR_BRIDGE / (Kw::UVPV * (4.0 *
         TM_BLT_SHUNT_OHMS + 2.0 * TM_BLT_ROTOR_BRIDGE)); }
sub TM_BLTAC_SHUNT_A2D() { TM_BLTAC_SHUNT_UVPV * TM_BLTAC_A2D_PER_UVPV; }
sub TM_BLTDC_SHUNT_UVPV() { TM_BLT_ROTOR_BRIDGE / (Kw::UVPV * (4.0 *
         TM_BLT_SHUNT_OHMS + 2.0 * TM_BLT_ROTOR_BRIDGE)); }
sub TM_BLTDC_SHUNT_A2D() { TM_BLTDC_SHUNT_UVPV * TM_BLTDC_A2D_PER_UVPV; }
sub TM_CDTM_CLOCK_Hz() { 60.0 * Kw::MEGA * Kw::Hz; }
sub TM_CDTM_COUNT_AT_FS() { 15000.0 * ENGCNT; }
sub TM_CDTM_P0_PER_COUNT() { 0x10000 * P0CNT / ENGCNT; }
sub TM_CDTM_NOMINAL_Hz_AT_ZERO() { 8.3 * Kw::KILO * Kw::Hz; }
sub TM_CDTM_NOMINAL_FS_SPAN_Hz() { 3.5 * Kw::KILO * Kw::Hz; }
sub TM_CDTM_MIN_Hz() { 2.0 * Kw::KILO * Kw::Hz; }
sub LX_CDTM_2R() { 10.0 * Kw::KILO * Kw::OHM; }
sub LX_CDTM_5R() { 10.0 * Kw::KILO * Kw::OHM; }
sub LX_CDTM_8R() { 100.0 * Kw::KILO * Kw::OHM; }
sub LX_CDTM_7R() { 499.0 * Kw::OHM; }
sub LX_CDTM_7C() { 1.5 * Kw::NANO * Kw::FARAD; }
sub LX_CDTM_8C() { 1.5 * Kw::NANO * Kw::FARAD; }
sub LX_CDTM_2V() { 2.5 * Kw::VOLT; }
sub LX_CDTM_GAINA() { LX_CDTM_8R / LX_CDTM_7R; }
sub LX_CDTM_GAINB() { LX_CDTM_2R / (LX_CDTM_2R + LX_CDTM_5R); }
sub LX_CDTM_CT() { LX_CDTM_7C + LX_CDTM_8C; }
sub LX_CDTM_RZ() { 1.0 / (1.0 / LX_CDTM_2R + 1.0 / LX_CDTM_5R); }
sub LX_CDTM_FOUT_PER_VIN() { 0.1 / (LX_CDTM_2R * LX_CDTM_CT); }
sub LX_CDTM_FOUT_PER_VINZ() { 0.1 / (LX_CDTM_RZ * LX_CDTM_CT); }
sub LX_CDTM_V_OFFSET() { LX_CDTM_2V * LX_CDTM_GAINB; }
sub TM_CDTM_GAIN() { LX_CDTM_GAINA * LX_CDTM_GAINB; }
sub TM_CDTM_X() { TM_CDTM_GAIN * LX_CDTM_FOUT_PER_VINZ; }
sub TM_CDTM_Hz_PER_UVPV() { LX_CDTM_2V * TM_CDTM_X * Kw::UVPV; }
sub TM_CDTM_NOMINAL_Hz_AT_0X() { LX_CDTM_V_OFFSET * LX_CDTM_FOUT_PER_VINZ; }
sub TM_CDTM_P0_AT_FS() { TM_CDTM_COUNT_AT_FS * TM_CDTM_P0_PER_COUNT; }
sub TM_CDTM_FS_UVPV() { TM_CDTM_NOMINAL_FS_SPAN_Hz / TM_CDTM_Hz_PER_UVPV; }
sub TM_CDTM_NOISE_MIN_OLD() { 0.2; }
sub TM_CDTM_NOISE_MAX_OLD() { 2.0; }
sub TM_CDTM_NOISE_MIN() { 0.2; }
sub TM_CDTM_NOISE_MAX() { 2.0; }
sub TM_CDTM_SP_DELIM() { "\t"; }
sub TM_PDTM_ANAOUT_NUMBER() { 3; }
sub TM_PDTM_CHANNEL_NUMBER() { 4; }
sub TM_PDTM_FILTER_MAX() { 10; }
sub TM_PDTM_NOISE_MIN() { 7; }
sub TM_PDTM_NOISE_MAX() { 25; }
sub TM_PDTM_A2D_FS() { 5000; }
sub TM_PDTM_A2D_CAP() { 0x2000 * A2DCNT; }
sub TM_PDTM_MULT() { 2; }
sub TM_PDTM_COUNT_PER_A2D() { 4; }
sub TM_PDTM_COUNT_AT_FS() { TM_PDTM_A2D_FS * TM_PDTM_COUNT_PER_A2D; }
sub TM_PDTM_TC_PER_DEGC() { 16 / Kw::DEGC; }
sub TM_PDTM_GAIN_VALUES() { 0x1000; }
sub TM_PDTM_CLOCK_Hz() { 8.0 * Kw::MEGA * Kw::Hz; }
sub TM_PDTM_SEC_PER_ZRVALUE() { 0x8000 / TM_PDTM_CLOCK_Hz; }
sub LX_PDTM_22R() { 6.65 * Kw::KILO * Kw::OHM; }
sub LX_PDTM_23R() { 30.1 * Kw::KILO * Kw::OHM; }
sub LX_PDTM_18R() { 49.9 * Kw::KILO * Kw::OHM; }
sub LX_PDTM_19R() { 10.0 * Kw::KILO * Kw::OHM; }
sub LX_PDTM_10R() { 49.9 * Kw::KILO * Kw::OHM; }
sub LX_PDTM_11R() { 30.1 * Kw::KILO * Kw::OHM; }
sub LX_PDTM_GAIN_HWA() { LX_PDTM_23R / LX_PDTM_22R; }
sub LX_PDTM_GAIN_HWB() { LX_PDTM_18R / LX_PDTM_19R + 1.0; }
sub LX_PDTM_GAIN_HWC() { 2.0 * Kw::TWOSQRT / Kw::PI; }
sub LX_PDTM_GAIN_HWD() { LX_PDTM_10R / LX_PDTM_11R + 1.0; }
sub TM_PDTM_GAIN_HW() { LX_PDTM_GAIN_HWA * LX_PDTM_GAIN_HWB *
         LX_PDTM_GAIN_HWC * LX_PDTM_GAIN_HWD; }
sub TM_PDTM_GAIN_PER_GAIN() { TM_PDTM_GAIN_HW / TM_PDTM_GAIN_VALUES; }
sub TM_PDTM_COUNT_PER_GAIN_UVPV() { Kw::UVPV * TM_PDTM_A2D_CAP *
         TM_PDTM_COUNT_PER_A2D * TM_PDTM_GAIN_PER_GAIN; }
sub TM_PDTM_P0_AT_FS() { TM_PDTM_A2D_CAP * TM_PDTM_COUNT_PER_A2D *
         TM_PDTM_COUNT_AT_FS; }
sub TM_PDTM_GAIN_MVPVATFS() { 35340.0; }
sub TM_S700_NUMBER_CHANNELS() { 3; }
sub TM_S700_FILTER_MAX() { 10; }
sub TM_S700_COUNT_AT_FS() { 10000.0 * ENGCNT; }
sub TM_S700_P0_PER_COUNT() { 0x10000 * P0CNT / ENGCNT; }
sub TM_S700_P0_AT_FS() { TM_S700_P0_PER_COUNT * TM_S700_COUNT_AT_FS; }
sub TM_S700P_FILTER_MAX() { 10; }
sub TM_S700P_A2D_CAP() { 0x800000 * A2DCNT; }
sub TM_S700P_A2D_AT_FS() { 4.0 * Kw::MEGA * A2DCNT; }
sub TM_S700P_COUNT_AT_FS() { 655360000.0 * ENGCNT; }
sub TM_S700P_P0_PER_COUNT() { 1.0 * P0CNT / ENGCNT; }
sub TM_S700P_P0_AT_FS() { TM_S700P_P0_PER_COUNT * TM_S700P_COUNT_AT_FS; }
sub TM_NGRTM_CLOCK_Hz() { 16.0 * Kw::MEGA * Kw::Hz; }
sub TM_NGRTM_A2D_CAP() { 0x800000 * A2DCNT; }
sub TM_NGRTM_P0_AT_FS() { 163840000.0 * P0CNT; }
sub TM_NGRTM_CAMELD() { 0x4000; }
sub TM_NGRTM_CAMELA() { 1.0 * 0x4000 * 0x100000 * P0CNT / DACCNT; }
sub TM_NGRTM_DACFS_PER_CDE() { TM_NGRTM_P0_AT_FS / TM_NGRTM_CAMELA; }
sub TM_NGRTM_FSV_PER_CDE() { TM_NGRTM_DACFS_PER_CDE / TM_DAOV_DAC_PER_V; }
sub TM_NGRTM_SCALE() { TM_NGRTM_DACFS_PER_CDE * TM_NGRTM_CAMELD; }
sub TM_NGRTM_A2DFS_AT_1GAIN() { TM_NGRTM_P0_AT_FS * 0x10000; }
sub LX_NGRTM_30R() { 10.0 * Kw::KILO * Kw::OHM; }
sub LX_NGRTM_28R() { 130.0 * Kw::OHM; }
sub TM_NGRTM_GAIN() { 2.0 * LX_NGRTM_30R / LX_NGRTM_28R + 1.0; }
sub TM_NGRTM_A2D_PER_UVPV() { TM_NGRTM_A2D_CAP * TM_NGRTM_GAIN * Kw::UVPV; }
sub TM_NGRTM_NOISE_MIN() { 0.5; }
sub TM_NGRTM_NOISE_MAX() { (1.0); }
sub TM_AD22103_VREF() { 3.3 * Kw::VOLT; }
sub TM_AD22103_V_PER_DEGC() { 0.028 * Kw::VOLT / Kw::DEGC; }
sub TM_AD22103_V_AT_0DEGC() { 0.25 * Kw::VOLT; }
sub TM_NGRTM_TEMPA2D_CAP() { 0x8000 * A2DCNT; }
sub TM_NGRTM_TEMPP0_PER_A2D() { 0x10000 * P0CNT / A2DCNT; }
sub TM_NGRTM_DEGC_OFFSET() { TM_AD22103_V_AT_0DEGC / TM_AD22103_V_PER_DEGC; }
sub TM_NGRTM_TEMPP0_PER_DEGC() { TM_NGRTM_TEMPA2D_CAP *
         TM_AD22103_V_PER_DEGC * TM_NGRTM_TEMPP0_PER_A2D / TM_AD22103_VREF; }
sub TM_NGRTM_TEMPP0_PER_DEGF() { Kw::DEGF * TM_NGRTM_TEMPP0_PER_DEGC /
         Kw::DEGC; }
sub TM_NGRTM_TEMPP0_UVPV_PER_DEGF() { TM_NGRTM_TEMPP0_PER_DEGF /
         (TM_NGRTM_A2D_PER_UVPV * TM_NGRTM_TEMPP0_PER_A2D * 0x1000); }
sub TM_BLTDC_FILTER_Hz() { 20.0 * Kw::KILO * Kw::Hz; }
sub TM_BLTAC_FILTER_Hz() { 20.0 * Kw::KILO * Kw::Hz; }
sub TM_CDTM_FILTER_Hz() { 10.0 * Kw::KILO * Kw::Hz; }
sub TM_NGT_FILTER_Hz() { 7.8125 * Kw::KILO * Kw::Hz; }
sub TM_NGRTM_FILTER_Hz() { 7.8125 * Kw::KILO * Kw::Hz; }
sub TM_S700P_FILTER_Hz() { 7.8125 * Kw::KILO * Kw::Hz; }
sub TM_PDTM_FILTER_Hz() { 2.0 * Kw::KILO * Kw::Hz; }
sub TM_S700_FILTER_Hz() { 2.0 * Kw::KILO * Kw::Hz; }
sub TM_BLTDC_UVPV_PER_A2D() { 1.0 / TM_BLTDC_A2D_PER_UVPV; }
sub TM_BLTAC_UVPV_PER_A2D() { 1.0 / TM_BLTAC_A2D_PER_UVPV; }
sub TM_CDTM_UVPV_PER_Hz() { 1.0 / TM_CDTM_Hz_PER_UVPV; }
sub TM_NGRTM_UVPV_PER_A2D() { 1.0 / TM_NGRTM_A2D_PER_UVPV; }
sub TM_NGT_UVPV_PER_A2D() { 1.0 / TM_NGT_A2D_PER_UVPV; }
sub TM_PDTM_GAIN_UVPV_PER_COUNT() { 1.0 / TM_PDTM_COUNT_PER_GAIN_UVPV; }
sub TM_BLTDC_UVPV_IF_A2DMAX() { 1.0 / (Kw::UVPV * TM_BLTDC_GAIN); }
sub TM_BLTAC_UVPV_IF_A2DMAX() { 1.0 / (Kw::UVPV * TM_BLTAC_GAIN); }
sub TM_NGT_UVPV_IF_A2DMAX() { 1.0 / (Kw::UVPV * TM_NGT_GAIN); }
sub TM_NGRTM_UVPV_IF_A2DMAX() { 1.0 / (Kw::UVPV * TM_NGRTM_GAIN); }
sub tmc_cdtm_uVpV_to_rotor_freq($ ) {
   my ($uvpv_data) = @_;
   return ($uvpv_data / TM_CDTM_UVPV_PER_Hz + TM_CDTM_NOMINAL_Hz_AT_ZERO);
}
sub tmc_cdtm_rotor_freq_to_uVpV($ ) {
   my ($rf_data) = @_;
   return (TM_CDTM_UVPV_PER_Hz * ($rf_data - TM_CDTM_NOMINAL_Hz_AT_ZERO));
}
sub tmc_dao_V_to_DAC($ ) {
   my ($volt_data) = @_;
   return (TM_DAOV_DAC_PER_V * ($volt_data - TM_DAOV_V_IF_DACMIN));
}
sub tmc_dao_DAC_to_V($ ) {
   my ($dac_data) = @_;
   return ($dac_data / TM_DAOV_DAC_PER_V + TM_DAOV_V_IF_DACMIN);
}
sub tmc_dao_deltaV_to_DAC($ ) {
   my ($volt_data) = @_;
   return (TM_DAOV_DAC_PER_V * $volt_data);
}
sub tmc_shunt_value($$ ) {
   my ($bridge_ohms, $shunt_ohms) = @_;
   return ($bridge_ohms / (Kw::UVPV * (4.0 * $shunt_ohms + 2.0 *
            $bridge_ohms)));
}
#   DDDDDDDDDDescription ############################# tm_const_description #
sub tm_const_description() {
   "   Tm_Const Constants: A2DCNT DACCNT ENGCNT LX_BLTAC_ROTOR_13R LX_BLTA" .
   "C_ROTOR_14R LX_BLTDC_ROTOR_24R LX_BLTDC_ROTOR_25R LX_BLTDC_ROTOR_26R L" .
   "X_BLTDC_ROTOR_27R LX_CDTM_2R LX_CDTM_2V LX_CDTM_5R LX_CDTM_7C LX_CDTM_" .
   "7R LX_CDTM_8C LX_CDTM_8R LX_CDTM_CT LX_CDTM_FOUT_PER_VIN LX_CDTM_FOUT_" .
   "PER_VINZ LX_CDTM_GAINA LX_CDTM_GAINB LX_CDTM_RZ LX_CDTM_V_OFFSET LX_DA" .
   "OI_1R LX_DAOI_2R LX_DAOI_3R LX_DAOI_4R LX_DAOV_2R LX_DAOV_RGND LX_DAOV" .
   "_RPRE LX_NGRTM_28R LX_NGRTM_30R LX_NGT00_ROTOR_BRIDGE LX_NGT00_SHUNT_O" .
   "HMS LX_NGT_3R LX_NGT_7R LX_NGT_MSP430_URV_A2D_0_V LX_NGT_MSP430_URV_A2" .
   "D_FS_V LX_NGT_ROTOR_BRIDGE LX_NGT_SHUNT_OHMS LX_NGT_URV_GAIN LX_NGT_UR" .
   "V_ROTOR_R_GND LX_NGT_URV_ROTOR_R_PLUS LX_PDTM_10R LX_PDTM_11R LX_PDTM_" .
   "18R LX_PDTM_19R LX_PDTM_22R LX_PDTM_23R LX_PDTM_GAIN_HWA LX_PDTM_GAIN_" .
   "HWB LX_PDTM_GAIN_HWC LX_PDTM_GAIN_HWD P0CNT TM_AD22103_V_AT_0DEGC TM_A" .
   "D22103_V_PER_DEGC TM_AD22103_VREF TM_BLT_A2D_CAP TM_BLT_ACDC_RATIO TM_" .
   "BLT_CLOCK_Hz TM_BLT_COUNT_AT_FS TM_BLT_DIODE_VOLTAGE_DROP TM_BLT_MF_20" .
   "KHZ_FILTER_BIT TM_BLT_MF_DISABLE_BUTTON_BIT TM_BLT_MF_LOP_3_BITS_BIT T" .
   "M_BLT_MF_NO_LS_BITS_BIT TM_BLT_MF_NO_TARE_SHUNT_BIT TM_BLT_MF_OLD_RF_H" .
   "W_BIT TM_BLT_MF_RF_FILTER_BIT TM_BLT_P0_AT_FS TM_BLT_P0_PER_COUNT TM_B" .
   "LT_REGEX TM_BLT_REGKEY TM_BLT_ROTOR_BRIDGE TM_BLT_ROTOR_CLOCK_Hz TM_BL" .
   "T_SHUNT_OHMS TM_BLTAC_A2D_PER_UVPV TM_BLTAC_FILTER_Hz TM_BLTAC_GAIN TM" .
   "_BLTAC_NOISE_MAX TM_BLTAC_NOISE_MIN TM_BLTAC_SHUNT_A2D TM_BLTAC_SHUNT_" .
   "UVPV TM_BLTAC_UVPV_IF_A2DMAX TM_BLTAC_UVPV_PER_A2D TM_BLTDC_A2D_PER_UV" .
   "PV TM_BLTDC_FILTER_Hz TM_BLTDC_GAIN TM_BLTDC_NOISE_MAX TM_BLTDC_NOISE_" .
   "MIN TM_BLTDC_SHUNT_A2D TM_BLTDC_SHUNT_UVPV TM_BLTDC_UVPV_IF_A2DMAX TM_" .
   "BLTDC_UVPV_PER_A2D TM_CDTM_CLOCK_Hz TM_CDTM_COUNT_AT_FS TM_CDTM_FILTER" .
   "_Hz TM_CDTM_FS_UVPV TM_CDTM_GAIN TM_CDTM_Hz_PER_UVPV TM_CDTM_MIN_Hz TM" .
   "_CDTM_NOISE_MAX TM_CDTM_NOISE_MAX_OLD TM_CDTM_NOISE_MIN TM_CDTM_NOISE_" .
   "MIN_OLD TM_CDTM_NOMINAL_FS_SPAN_Hz TM_CDTM_NOMINAL_Hz_AT_0X TM_CDTM_NO" .
   "MINAL_Hz_AT_ZERO TM_CDTM_P0_AT_FS TM_CDTM_P0_PER_COUNT TM_CDTM_REGEX T" .
   "M_CDTM_REGKEY TM_CDTM_SP_DELIM TM_CDTM_UVPV_PER_Hz TM_CDTM_X TM_DAOI_D" .
   "AC_IF_00mA TM_DAOI_DAC_IF_04mA TM_DAOI_DAC_IF_12mA TM_DAOI_DAC_IF_20mA" .
   " TM_DAOI_DAC_PER_mA TM_DAOI_GZ_MAGIC TM_DAOI_mA_AT_0V TM_DAOI_mA_GAIN " .
   "TM_DAOI_mA_IF_0V TM_DAOI_mA_IF_DACMAX TM_DAOI_mA_IF_DACMIN TM_DAOI_mA_" .
   "PER_V TM_DAOV_CAP TM_DAOV_DAC_IF_0V TM_DAOV_DAC_IF_M10V TM_DAOV_DAC_IF" .
   "_P10V TM_DAOV_DAC_MAX TM_DAOV_DAC_MIN TM_DAOV_DAC_PER_V TM_DAOV_GAIN T" .
   "M_DAOV_V_IF_DACMAX TM_DAOV_V_IF_DACMIN TM_DAOV_VREF TM_DPT_REGKEY TM_L" .
   "IST_SEPARATOR TM_NGRTM_A2D_CAP TM_NGRTM_A2D_PER_UVPV TM_NGRTM_A2DFS_AT" .
   "_1GAIN TM_NGRTM_CAMELA TM_NGRTM_CAMELD TM_NGRTM_CLOCK_Hz TM_NGRTM_DACF" .
   "S_PER_CDE TM_NGRTM_DEGC_OFFSET TM_NGRTM_FILTER_Hz TM_NGRTM_FSV_PER_CDE" .
   " TM_NGRTM_GAIN TM_NGRTM_NOISE_MAX TM_NGRTM_NOISE_MIN TM_NGRTM_P0_AT_FS" .
   " TM_NGRTM_REGEX TM_NGRTM_REGKEY TM_NGRTM_SCALE TM_NGRTM_TEMPA2D_CAP TM" .
   "_NGRTM_TEMPP0_PER_A2D TM_NGRTM_TEMPP0_PER_DEGC TM_NGRTM_TEMPP0_PER_DEG" .
   "F TM_NGRTM_TEMPP0_UVPV_PER_DEGF TM_NGRTM_UVPV_IF_A2DMAX TM_NGRTM_UVPV_" .
   "PER_A2D TM_NGT00_SHUNT_A2D TM_NGT00_SHUNT_UVPV TM_NGT_A2D_CAP TM_NGT_A" .
   "2D_PER_UVPV TM_NGT_AO_MULT TM_NGT_AO_SHFT TM_NGT_CLOCK_Hz TM_NGT_COUNT" .
   "_AT_FS TM_NGT_FILTER_Hz TM_NGT_GAIN TM_NGT_IA_INPUT_MAX TM_NGT_MSP430_" .
   "URV_A2D_FS_COUNT TM_NGT_MSP430_URV_A2D_PER_V TM_NGT_NOISE_MAX TM_NGT_N" .
   "OISE_MIN TM_NGT_P0_AT_FS TM_NGT_P0_MAX TM_NGT_P0_PER_COUNT TM_NGT_REGE" .
   "X TM_NGT_REGKEY TM_NGT_ROTOR_CLOCK_Hz TM_NGT_SHUNT_A2D TM_NGT_SHUNT_UV" .
   "PV TM_NGT_URV_A2D_PER_V TM_NGT_UVPV_IF_A2DMAX TM_NGT_UVPV_PER_A2D TM_P" .
   "DTM_A2D_CAP TM_PDTM_A2D_FS TM_PDTM_ANAOUT_NUMBER TM_PDTM_CHANNEL_NUMBE" .
   "R TM_PDTM_CLOCK_Hz TM_PDTM_COUNT_AT_FS TM_PDTM_COUNT_PER_A2D TM_PDTM_C" .
   "OUNT_PER_GAIN_UVPV TM_PDTM_FILTER_Hz TM_PDTM_FILTER_MAX TM_PDTM_GAIN_H" .
   "W TM_PDTM_GAIN_MVPVATFS TM_PDTM_GAIN_PER_GAIN TM_PDTM_GAIN_UVPV_PER_CO" .
   "UNT TM_PDTM_GAIN_VALUES TM_PDTM_MIN_VERSION TM_PDTM_MULT TM_PDTM_NOISE" .
   "_MAX TM_PDTM_NOISE_MIN TM_PDTM_P0_AT_FS TM_PDTM_REGEX TM_PDTM_REGKEY T" .
   "M_PDTM_SEC_PER_ZRVALUE TM_PDTM_TC_PER_DEGC TM_REG_KEY TM_S700_COUNT_AT" .
   "_FS TM_S700_FILTER_Hz TM_S700_FILTER_MAX TM_S700_NUMBER_CHANNELS TM_S7" .
   "00_P0_AT_FS TM_S700_P0_PER_COUNT TM_S700_REGEX TM_S700_REGKEY TM_S700P" .
   "_A2D_AT_FS TM_S700P_A2D_CAP TM_S700P_COUNT_AT_FS TM_S700P_FILTER_Hz TM" .
   "_S700P_FILTER_MAX TM_S700P_P0_AT_FS TM_S700P_P0_PER_COUNT TM_S700P_REG" .
   "EX TM_S700P_REGKEY TM_TEST_TIME_SEC" .
   "\n" .
   "   Tm_Const 1-ary Functions: tmc_cdtm_rotor_freq_to_uVpV tmc_cdtm_uVpV" .
   "_to_rotor_freq tmc_dao_DAC_to_V tmc_dao_deltaV_to_DAC tmc_dao_V_to_DAC" .
   "\n" .
   "   Tm_Const 2-ary Functions: tmc_shunt_value" .
   "\n";
}
sub tm_const_desc() {
   "   Tm_Const Constants: A2DCNT DACCNT ENGCNT LX_(BLT(AC_ROTOR_1(3R|4R)|" .
   "DC_ROTOR_2(4R|5R|6R|7R))|CDTM_(2[RV]|5R|7[CR]|8[CR]|CT|FOUT_PER_VINZ?|" .
   "GAIN[AB]|RZ|V_OFFSET)|DAO(I_(1R|2R|3R|4R)|V_(2R|R(GND|PRE)))|NG(RTM_(2" .
   "8R|30R)|T(00_(ROTOR_BRIDGE|SHUNT_OHMS)|_(3R|7R|MSP430_URV_A2D_(0_V|FS_" .
   "V)|ROTOR_BRIDGE|SHUNT_OHMS|URV_(GAIN|ROTOR_R_(GND|PLUS)))))|PDTM_(1(0R" .
   "|1R|8R|9R)|2(2R|3R)|GAIN_HW([AB]|[CD]))) P0CNT TM_(AD22103_V(_(AT_0DEG" .
   "C|PER_DEGC)|REF)|BLT(_(A(2D_CAP|CDC_RATIO)|C(LOCK_Hz|OUNT_AT_FS)|DIODE" .
   "_VOLTAGE_DROP|MF_(20KHZ_FILTER_BIT|DISABLE_BUTTON_BIT|LOP_3_BITS_BIT|N" .
   "O_(LS_BITS_BIT|TARE_SHUNT_BIT)|OLD_RF_HW_BIT|RF_FILTER_BIT)|P0_(AT_FS|" .
   "PER_COUNT)|R(EG(EX|KEY)|OTOR_(BRIDGE|CLOCK_Hz))|SHUNT_OHMS)|AC_(A2D_PE" .
   "R_UVPV|FILTER_Hz|GAIN|NOISE_M(AX|IN)|SHUNT_(A2D|UVPV)|UVPV_(IF_A2DMAX|" .
   "PER_A2D))|DC_(A2D_PER_UVPV|FILTER_Hz|GAIN|NOISE_M(AX|IN)|SHUNT_(A2D|UV" .
   "PV)|UVPV_(IF_A2DMAX|PER_A2D)))|CDTM_(C(LOCK_Hz|OUNT_AT_FS)|F(ILTER_Hz|" .
   "S_UVPV)|GAIN|Hz_PER_UVPV|MIN_Hz|NO(ISE_M(AX(_OLD)?|IN(_OLD)?)|MINAL_(F" .
   "S_SPAN_Hz|Hz_AT_0X|Hz_AT_ZERO))|P0_(AT_FS|PER_COUNT)|REG(EX|KEY)|SP_DE" .
   "LIM|UVPV_PER_Hz|X)|D(AO(I_(DAC_(IF_(0(0mA|4mA)|(12mA|20mA))|PER_mA)|GZ" .
   "_MAGIC|mA_(AT_0V|GAIN|IF_(0V|DACM(AX|IN))|PER_V))|V_(CAP|DAC_(IF_(0|M1" .
   "0|P10)V|M(AX|IN)|PER_V)|GAIN|V(_IF_DACM(AX|IN)|REF)))|PT_REGKEY)|LIST_" .
   "SEPARATOR|NG(RTM_(A2D(_(CAP|PER_UVPV)|FS_AT_1GAIN)|C(AMEL[AD]|LOCK_Hz)" .
   "|D(ACFS_PER_CDE|EGC_OFFSET)|F(ILTER_Hz|SV_PER_CDE)|GAIN|NOISE_M(AX|IN)" .
   "|P0_AT_FS|REG(EX|KEY)|SCALE|TEMP(A2D_CAP|P0_(PER_(A2D|DEGC|DEGF)|UVPV_" .
   "PER_DEGF))|UVPV_(IF_A2DMAX|PER_A2D))|T(00_SHUNT_(A2D|UVPV)|_(A(2D_(CAP" .
   "|PER_UVPV)|O_(MULT|SHFT))|C(LOCK_Hz|OUNT_AT_FS)|FILTER_Hz|GAIN|IA_INPU" .
   "T_MAX|MSP430_URV_A2D_(FS_COUNT|PER_V)|NOISE_M(AX|IN)|P0_(AT_FS|MAX|PER" .
   "_COUNT)|R(EG(EX|KEY)|OTOR_CLOCK_Hz)|SHUNT_(A2D|UVPV)|U(RV_A2D_PER_V|VP" .
   "V_(IF_A2DMAX|PER_A2D)))))|PDTM_(A(2D_(CAP|FS)|NAOUT_NUMBER)|C(HANNEL_N" .
   "UMBER|LOCK_Hz|OUNT_(AT_FS|PER_(A2D|GAIN_UVPV)))|FILTER_(Hz|MAX)|GAIN_(" .
   "HW|MVPVATFS|PER_GAIN|UVPV_PER_COUNT|VALUES)|M(IN_VERSION|ULT)|NOISE_M(" .
   "AX|IN)|P0_AT_FS|REG(EX|KEY)|SEC_PER_ZRVALUE|TC_PER_DEGC)|REG_KEY|S700(" .
   "_(COUNT_AT_FS|FILTER_(Hz|MAX)|NUMBER_CHANNELS|P0_(AT_FS|PER_COUNT)|REG" .
   "(EX|KEY))|P_(A2D_(AT_FS|CAP)|COUNT_AT_FS|FILTER_(Hz|MAX)|P0_(AT_FS|PER" .
   "_COUNT)|REG(EX|KEY)))|TEST_TIME_SEC)" .
   "\n" .
   "   Tm_Const 1-ary Functions: tmc_(cdtm_(rotor_freq_to_uVpV|uVpV_to_rot" .
   "or_freq)|dao_(DAC_to_V|deltaV_to_DAC|V_to_DAC))" .
   "\n" .
   "   Tm_Const 2-ary Functions: tmc_shunt_value" .
   "\n";
}
1; # Final return value
