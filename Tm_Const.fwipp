#    Copyright (C) 2021 by Kevin D. Woerner
# 2021-05-14 kdw  Created by TMPDIR/objkdw/Tm_Const.fwipp.d
#    Copyright C 2021 by Kevin D. Woerner
# 2021-05-13 kdw  Tm_Const:TM_NGT_AO_.* consts
# 2021-05-04 kdw  Tm_Const:BLT 8300X added; rx reorg
# 2021-04-26 kdw  Tm_Const:NGRTM rx fixed
# 2021-04-15 kdw  Tm_Const:indent work
# 2021-04-14 kdw  Tm_Const:iso prefixes
# 2021-04-13 kdw  Tm_Const:uvpv const from kw
# 2021-04-11 kdw  Tm_Const:indent work
# 2021-04-07 kdw  Tm_Const:PDTM const work
# 2021-04-02 kdw  Tm_Const:comments changed
# 2021-03-18 kdw  Tm_Const:const work
# 2021-03-15 kdw  Tm_Const:lx_.* const names
# 2021-03-12 kdw  Tm_Const:minor tweak
# 2021-03-11 kdw  Tm_Const:renam vars; failed block work
# 2021-03-08 kdw  Tm_Const:s700 and ngrtm a2d_cap fixed
# 2021-03-05 kdw  Tm_Const:upped line length to 77
# 2021-03-02 kdw  Tm_Const:hex number support
# 2021-02-26 kdw  Tm_Const:p0 work
# 2021-02-24 kdw  Tm_Const:regex work
# 2021-02-23 kdw  Tm_Const:rmed explicit self-module ref
# 2021-02-22 kdw  Tm_Const:regex work
# 2021-02-19 kdw  Tm_Const:const renam
# 2021-02-16 kdw  Tm_Const:units
# 2021-02-15 kdw  Tm_Const:string work
# 2021-02-14 kdw  Tm_Const:updated
# 2021-02-13 kdw  Tm_Const:created
IMPORT "Kw";
LANGUAGE_NOT LANG_UNITS:
   CONST A2DCNT Kw.BIT;
   CONST P0CNT Kw.BIT;
   CONST ENGCNT Kw.BIT;
   CONST DACCNT Kw.BIT;
LANGUAGE_END
CONST TM_LIST_SEPARATOR ",";
CONST TM_PDTM_MIN_VERSION "1.5.4";
CONST TM_REG_KEY "TM_INFO";
CONST TM_BLT_REGKEY "BLT";
CONST TM_CDTM_REGKEY "CDTM";
CONST TM_DPT_REGKEY "DPT";
CONST TM_NGRTM_REGKEY "NGRTM";
CONST TM_NGT_REGKEY "NGT";
CONST TM_PDTM_REGKEY "PDTM";
CONST TM_S700_REGKEY "700";
CONST TM_S700P_REGKEY "700+";
CONST TM_BLT_REGEX "(MCRT)?(80001|86108|86109|86110" "|8[14-7]00[24789]"
         "|8[14-7]01[01]" "|8[1458]70[24789]" "|8[1458]71[01]"
         "|8300[247])VS?";
CONST TM_CDTM_REGEX "(MCRT)?(4820[1-4])VS?";
CONST TM_NGRTM_REGEX "(CF28(56|82|84)"
         "|22(7[1-5]|8[1-7]|9[1-4]|90[89]|910)" "|23(0[24789]|10)D)"
         "V[NCJ]?S?";
CONST TM_NGT_REGEX "(MCRT)?"
         "(4[89]600VH?|(488|[457]98)(0[1234678]|[56]1|[5-8]0)V)S?";
CONST TM_PDTM_REGEX "(MCRT)?(278[234]0D|27835D" "|4[89]00[1-4678]P"
         "|4[89]0[67]0P" "|4[89]70[1-8]VH?" "|4[89]7[678]0VH?"
         "|4[89]761VH?" "|[57]970[1-4678]V" "|[57]97[67][01]V)S?";
CONST TM_S700_REGEX "(Model 7)" "(541|[0-478][0-478]) " "v[1-7]\\.[0-9] ";
CONST TM_S700P_REGEX "(Model 7|......7)" "(541\\+|[0-478][0-478]\\+"
         ")v1\\.[0-9][0-9]?";
CONST TM_TEST_TIME_SEC 3 * Kw.SECOND;
## COMMON VOLTAGE ANALOG OUTPUT CIRCUITRY ----- ----- ----- ----- ----- -----
CONST TM_DAOV_CAP 0x10000 * DACCNT;
CONST TM_DAOV_VREF 2.5 * Kw.VOLT;
CONST LX_DAOV_RPRE 4.99 * Kw.KILO * Kw.OHM;
CONST LX_DAOV_2R 30.9 * Kw.KILO * Kw.OHM;
CONST LX_DAOV_RGND 6.04 * Kw.KILO * Kw.OHM;
CONST TM_DAOV_GAIN LX_DAOV_2R * (1.0 / LX_DAOV_RPRE + 1.0 / LX_DAOV_RGND)
         + 1.0;
CONST TM_DAOV_DAC_PER_V TM_DAOV_CAP / (TM_DAOV_GAIN * TM_DAOV_VREF);
CONST TM_DAOV_V_IF_DACMIN - TM_DAOV_VREF * LX_DAOV_2R / LX_DAOV_RPRE;
#BLOCK_END
CONST TM_DAOV_DAC_IF_0V - TM_DAOV_V_IF_DACMIN * TM_DAOV_DAC_PER_V;
CONST TM_DAOV_DAC_MAX TM_DAOV_CAP - TM_DAOV_DAC_IF_0V;
CONST TM_DAOV_DAC_MIN - TM_DAOV_DAC_IF_0V;
CONST TM_DAOV_V_IF_DACMAX TM_DAOV_DAC_MAX / TM_DAOV_DAC_PER_V;
CONST TM_DAOV_DAC_IF_P10V TM_DAOV_DAC_IF_0V + 10.0 * Kw.VOLT
         * TM_DAOV_DAC_PER_V;
CONST TM_DAOV_DAC_IF_M10V TM_DAOV_DAC_IF_0V - 10.0 * Kw.VOLT
         * TM_DAOV_DAC_PER_V;
## COMMON CURRENT ANALOG OUTPUT CIRCUITRY ----- ----- ----- ----- ----- -----
##### FROM WHENCE IT COMES? GZ WROTE, HENCE IT IS SO.
CONST TM_DAOI_GZ_MAGIC 10.0 * Kw.AMP / Kw.VOLT;
CONST LX_DAOI_1R 45.3 * Kw.KILO * Kw.OHM;
CONST LX_DAOI_2R 191.0 * Kw.KILO * Kw.OHM;
CONST LX_DAOI_3R 18.2 * Kw.KILO * Kw.OHM;
CONST LX_DAOI_4R 100.0 * Kw.OHM;
CONST TM_DAOI_mA_AT_0V (LX_DAOI_3R * TM_DAOV_VREF * TM_DAOI_GZ_MAGIC)
         / LX_DAOI_1R;
CONST TM_DAOI_mA_PER_V LX_DAOI_3R / (LX_DAOI_2R * LX_DAOI_4R * Kw.MILLI);
CONST TM_DAOI_mA_GAIN (LX_DAOI_3R * TM_DAOI_mA_PER_V) / LX_DAOI_2R;
CONST TM_DAOI_mA_IF_0V (LX_DAOI_3R * TM_DAOI_mA_PER_V * TM_DAOV_VREF)
         / LX_DAOI_1R;
CONST TM_DAOI_DAC_PER_mA TM_DAOV_DAC_PER_V / TM_DAOI_mA_PER_V;
CONST TM_DAOI_DAC_IF_00mA TM_DAOV_DAC_IF_0V - TM_DAOI_DAC_PER_mA
         * TM_DAOI_mA_AT_0V;
CONST TM_DAOI_DAC_IF_04mA TM_DAOI_DAC_IF_00mA + TM_DAOI_DAC_PER_mA * (4.0
         * Kw.AMP);
CONST TM_DAOI_DAC_IF_12mA TM_DAOI_DAC_IF_00mA + TM_DAOI_DAC_PER_mA * (12.0
         * Kw.AMP);
CONST TM_DAOI_DAC_IF_20mA TM_DAOI_DAC_IF_00mA + TM_DAOI_DAC_PER_mA * (20.0
         * Kw.AMP);
CONST TM_DAOI_mA_IF_DACMIN - TM_DAOI_DAC_IF_00mA / TM_DAOI_DAC_PER_mA;
CONST TM_DAOI_mA_IF_DACMAX TM_DAOI_mA_IF_DACMIN + TM_DAOV_CAP
         / TM_DAOI_DAC_PER_mA;
## NGT NGT NGT NGT NGT NGT NGT NGT NGT NGT NGT NGT NGT NGT NGT NGT NGT NGT
CONST TM_NGT_COUNT_AT_FS 20000.0 * ENGCNT;
CONST TM_NGT_P0_PER_COUNT 0x8000 * P0CNT / ENGCNT;
# 2**15
CONST TM_NGT_P0_AT_FS TM_NGT_P0_PER_COUNT * TM_NGT_COUNT_AT_FS;
CONST TM_NGT_P0_MAX TM_NGT_P0_AT_FS * 1.5;
CONST TM_NGT_AO_MULT 8192.0;
CONST TM_NGT_AO_SHFT 256.0;
CONST TM_NGT_A2D_CAP 0x40000 * A2DCNT;
# 2**18
CONST TM_NGT_IA_INPUT_MAX 16;
CONST TM_NGT_CLOCK_Hz 60.0 * Kw.MEGA * Kw.Hz;
CONST TM_NGT_ROTOR_CLOCK_Hz 16.0 * Kw.MEGA * Kw.Hz;
CONST TM_NGT_NOISE_MAX (1.0);
CONST TM_NGT_NOISE_MIN 0.3;
CONST LX_NGT_3R 10.0 * Kw.KILO * Kw.OHM;
CONST LX_NGT_7R 130.0 * Kw.OHM;
CONST TM_NGT_GAIN 2.0 * LX_NGT_3R / LX_NGT_7R + 1.0;
CONST TM_NGT_A2D_PER_UVPV TM_NGT_A2D_CAP * TM_NGT_GAIN * Kw.UVPV;
CONST LX_NGT_ROTOR_BRIDGE 1.0 * Kw.KILO * Kw.OHM;
CONST LX_NGT_SHUNT_OHMS 100.0 * Kw.KILO * Kw.OHM;
CONST TM_NGT_SHUNT_UVPV 0.5 * LX_NGT_ROTOR_BRIDGE / (Kw.UVPV * (2.0
         * LX_NGT_SHUNT_OHMS + LX_NGT_ROTOR_BRIDGE));
CONST TM_NGT_SHUNT_A2D TM_NGT_SHUNT_UVPV * TM_NGT_A2D_PER_UVPV;
CONST LX_NGT00_ROTOR_BRIDGE 5.0 * Kw.KILO * Kw.OHM;
CONST LX_NGT00_SHUNT_OHMS 270.0 * Kw.KILO * Kw.OHM;
CONST TM_NGT00_SHUNT_UVPV 0.5 * LX_NGT00_ROTOR_BRIDGE / (Kw.UVPV * (2.0
         * LX_NGT00_SHUNT_OHMS + LX_NGT00_ROTOR_BRIDGE));
CONST TM_NGT00_SHUNT_A2D TM_NGT00_SHUNT_UVPV * TM_NGT_A2D_PER_UVPV;
CONST TM_NGT_MSP430_URV_A2D_FS_COUNT 0x8000;
CONST LX_NGT_MSP430_URV_A2D_FS_V 3.3 * Kw.VOLT;
CONST LX_NGT_MSP430_URV_A2D_0_V 0.0 * Kw.VOLT;
CONST TM_NGT_MSP430_URV_A2D_PER_V TM_NGT_MSP430_URV_A2D_FS_COUNT
         / (LX_NGT_MSP430_URV_A2D_FS_V + - LX_NGT_MSP430_URV_A2D_0_V);
CONST LX_NGT_URV_ROTOR_R_PLUS 30100.0 * Kw.OHM;
CONST LX_NGT_URV_ROTOR_R_GND 10000.0 * Kw.OHM;
CONST LX_NGT_URV_GAIN LX_NGT_URV_ROTOR_R_GND / (LX_NGT_URV_ROTOR_R_PLUS
         + LX_NGT_URV_ROTOR_R_GND);
CONST TM_NGT_URV_A2D_PER_V (LX_NGT_URV_GAIN * TM_NGT_MSP430_URV_A2D_PER_V);
## BLT BLT BLT BLT BLT BLT BLT BLT BLT BLT BLT BLT BLT BLT BLT BLT BLT BLT
CONST TM_BLT_A2D_CAP 0x20000 * A2DCNT;
# 2**17
CONST TM_BLTDC_NOISE_MIN 0.3;
CONST TM_BLTDC_NOISE_MAX 0.7;
CONST TM_BLT_COUNT_AT_FS 20000 * ENGCNT;
CONST TM_BLT_P0_PER_COUNT 0x8000 * P0CNT / ENGCNT;
# 2**15
CONST TM_BLT_P0_AT_FS TM_BLT_COUNT_AT_FS * TM_BLT_P0_PER_COUNT;
CONST TM_BLT_DIODE_VOLTAGE_DROP 0.7 * Kw.VOLT;
CONST LX_BLTDC_ROTOR_24R 100.0 * Kw.OHM;
CONST LX_BLTDC_ROTOR_25R 499.0 * Kw.OHM;
CONST LX_BLTDC_ROTOR_26R 200.0 * Kw.OHM;
CONST LX_BLTDC_ROTOR_27R 2210.0 * Kw.OHM;
CONST TM_BLTDC_GAIN (2.0 * LX_BLTDC_ROTOR_25R / LX_BLTDC_ROTOR_24R + 1.0)
         * (2.0 * LX_BLTDC_ROTOR_27R / LX_BLTDC_ROTOR_26R + 1.0);
CONST TM_BLTDC_A2D_PER_UVPV (TM_BLT_A2D_CAP * TM_BLTDC_GAIN) * Kw.UVPV;
CONST LX_BLTAC_ROTOR_14R 118.0 * Kw.OHM;
CONST LX_BLTAC_ROTOR_13R 15000.0 * Kw.OHM;
CONST TM_BLTAC_GAIN 1.0 + 2.0 * LX_BLTAC_ROTOR_13R / LX_BLTAC_ROTOR_14R;
CONST TM_BLTAC_A2D_PER_UVPV TM_BLT_A2D_CAP * TM_BLTAC_GAIN * Kw.UVPV;
CONST TM_BLTAC_NOISE_MIN 0.1;
CONST TM_BLTAC_NOISE_MAX 0.4;
CONST TM_BLT_CLOCK_Hz 60.0 * Kw.MEGA * Kw.Hz;
CONST TM_BLT_ROTOR_CLOCK_Hz 20.0 * Kw.MEGA * Kw.Hz;
CONST TM_BLT_SHUNT_OHMS 100.0 * Kw.KILO * Kw.OHM;
CONST TM_BLT_ACDC_RATIO 0.9929;
CONST TM_BLT_MF_NO_TARE_SHUNT_BIT 0x01;
CONST TM_BLT_MF_NO_LS_BITS_BIT 0x02;
CONST TM_BLT_MF_LOP_3_BITS_BIT 0x04;
CONST TM_BLT_MF_20KHZ_FILTER_BIT 0x08;
CONST TM_BLT_MF_DISABLE_BUTTON_BIT 0x10;
CONST TM_BLT_MF_RF_FILTER_BIT 0x20;
CONST TM_BLT_MF_OLD_RF_HW_BIT 0x40;
CONST TM_BLT_ROTOR_BRIDGE 1000 * Kw.OHM;
CONST TM_BLTAC_SHUNT_UVPV TM_BLT_ROTOR_BRIDGE / (Kw.UVPV * (4.0
         * TM_BLT_SHUNT_OHMS + 2.0 * TM_BLT_ROTOR_BRIDGE));
CONST TM_BLTAC_SHUNT_A2D TM_BLTAC_SHUNT_UVPV * TM_BLTAC_A2D_PER_UVPV;
CONST TM_BLTDC_SHUNT_UVPV TM_BLT_ROTOR_BRIDGE / (Kw.UVPV * (4.0
         * TM_BLT_SHUNT_OHMS + 2.0 * TM_BLT_ROTOR_BRIDGE));
CONST TM_BLTDC_SHUNT_A2D TM_BLTDC_SHUNT_UVPV * TM_BLTDC_A2D_PER_UVPV;
## CDTM CDTM CDTM CDTM CDTM CDTM CDTM CDTM CDTM CDTM CDTM CDTM CDTM CDTM CDTM
CONST TM_CDTM_CLOCK_Hz 60.0 * Kw.MEGA * Kw.Hz;
CONST TM_CDTM_COUNT_AT_FS 15000.0 * ENGCNT;
# digitaloven
CONST TM_CDTM_P0_PER_COUNT 0x10000 * P0CNT / ENGCNT;
CONST TM_CDTM_NOMINAL_Hz_AT_ZERO 8.3 * Kw.KILO * Kw.Hz;
CONST TM_CDTM_NOMINAL_FS_SPAN_Hz 3.5 * Kw.KILO * Kw.Hz;
# digitaloven
CONST TM_CDTM_MIN_Hz 2.0 * Kw.KILO * Kw.Hz;
# min allowed frequency
## Could the 3336.5 be from the LCT rotor board schematic
##  GAIN*2000uV/V/(10V*R2*(C7+C8)) * V2
## (the 10 V is from the AD654 spec sheet page 4)
## == (1E5/499)*.002/(10*1E4*3E-9) * (5.0*1E4/(1E4+1E4))
## == 3340.01336?
##CONST TM_CDTM_Hz_PER_UVPV (3340.01336005344 / 2000.0)
CONST LX_CDTM_2R 10.0 * Kw.KILO * Kw.OHM;
CONST LX_CDTM_5R 10.0 * Kw.KILO * Kw.OHM;
CONST LX_CDTM_8R 100.0 * Kw.KILO * Kw.OHM;
CONST LX_CDTM_7R 499.0 * Kw.OHM;
CONST LX_CDTM_7C 1.5 * Kw.NANO * Kw.FARAD;
CONST LX_CDTM_8C 1.5 * Kw.NANO * Kw.FARAD;
CONST LX_CDTM_2V 2.5 * Kw.VOLT;
CONST LX_CDTM_GAINA LX_CDTM_8R / LX_CDTM_7R;
CONST LX_CDTM_GAINB LX_CDTM_2R / (LX_CDTM_2R + LX_CDTM_5R);
CONST LX_CDTM_CT LX_CDTM_7C + LX_CDTM_8C;
CONST LX_CDTM_RZ 1.0 / (1.0 / LX_CDTM_2R + 1.0 / LX_CDTM_5R);
CONST LX_CDTM_FOUT_PER_VIN 0.1 / (LX_CDTM_2R * LX_CDTM_CT);
CONST LX_CDTM_FOUT_PER_VINZ 0.1 / (LX_CDTM_RZ * LX_CDTM_CT);
CONST LX_CDTM_V_OFFSET LX_CDTM_2V * LX_CDTM_GAINB;
CONST TM_CDTM_GAIN LX_CDTM_GAINA * LX_CDTM_GAINB;
CONST TM_CDTM_X TM_CDTM_GAIN * LX_CDTM_FOUT_PER_VINZ;
CONST TM_CDTM_Hz_PER_UVPV LX_CDTM_2V * TM_CDTM_X * Kw.UVPV;
CONST TM_CDTM_NOMINAL_Hz_AT_0X LX_CDTM_V_OFFSET * LX_CDTM_FOUT_PER_VINZ;
#CONST TM_CDTM_Hz_PER_UVPV 3336.5 * Kw.Hz / 2000.0; # GZ
CONST TM_CDTM_P0_AT_FS TM_CDTM_COUNT_AT_FS * TM_CDTM_P0_PER_COUNT;
CONST TM_CDTM_FS_UVPV TM_CDTM_NOMINAL_FS_SPAN_Hz / TM_CDTM_Hz_PER_UVPV;
CONST TM_CDTM_NOISE_MIN_OLD 0.2;
CONST TM_CDTM_NOISE_MAX_OLD 2.0;
CONST TM_CDTM_NOISE_MIN 0.2;
CONST TM_CDTM_NOISE_MAX 2.0;
CONST TM_CDTM_SP_DELIM "\t";
## PDTM PDTM PDTM PDTM PDTM PDTM PDTM PDTM PDTM PDTM PDTM PDTM PDTM PDTM PDTM
CONST TM_PDTM_ANAOUT_NUMBER 3;
CONST TM_PDTM_CHANNEL_NUMBER 4;
CONST TM_PDTM_FILTER_MAX 10;
CONST TM_PDTM_NOISE_MIN 7;
CONST TM_PDTM_NOISE_MAX 25;
CONST TM_PDTM_A2D_FS 5000;
CONST TM_PDTM_A2D_CAP 0x2000 * A2DCNT;
# 2**13
CONST TM_PDTM_MULT 2;
CONST TM_PDTM_COUNT_PER_A2D 4;
CONST TM_PDTM_COUNT_AT_FS TM_PDTM_A2D_FS * TM_PDTM_COUNT_PER_A2D;
CONST TM_PDTM_TC_PER_DEGC 16 / Kw.DEGC;
CONST TM_PDTM_GAIN_VALUES 0x1000;
# 2**12
CONST TM_PDTM_CLOCK_Hz 8.0 * Kw.MEGA * Kw.Hz;
CONST TM_PDTM_SEC_PER_ZRVALUE 0x8000 / TM_PDTM_CLOCK_Hz;
CONST LX_PDTM_22R 6.65 * Kw.KILO * Kw.OHM;
CONST LX_PDTM_23R 30.1 * Kw.KILO * Kw.OHM;
CONST LX_PDTM_18R 49.9 * Kw.KILO * Kw.OHM;
CONST LX_PDTM_19R 10.0 * Kw.KILO * Kw.OHM;
CONST LX_PDTM_10R 49.9 * Kw.KILO * Kw.OHM;
CONST LX_PDTM_11R 30.1 * Kw.KILO * Kw.OHM;
CONST LX_PDTM_GAIN_HWA LX_PDTM_23R / LX_PDTM_22R;
CONST LX_PDTM_GAIN_HWB LX_PDTM_18R / LX_PDTM_19R + 1.0;
## ratio of average value to RMS of a demodulated sin wave
CONST LX_PDTM_GAIN_HWC 2.0 * Kw.TWOSQRT / Kw.PI;
# was .9
CONST LX_PDTM_GAIN_HWD LX_PDTM_10R / LX_PDTM_11R + 1.0;
CONST TM_PDTM_GAIN_HW LX_PDTM_GAIN_HWA * LX_PDTM_GAIN_HWB
         * LX_PDTM_GAIN_HWC * LX_PDTM_GAIN_HWD;
CONST TM_PDTM_GAIN_PER_GAIN TM_PDTM_GAIN_HW / TM_PDTM_GAIN_VALUES;
CONST TM_PDTM_COUNT_PER_GAIN_UVPV Kw.UVPV * TM_PDTM_A2D_CAP
         * TM_PDTM_COUNT_PER_A2D * TM_PDTM_GAIN_PER_GAIN;
CONST TM_PDTM_P0_AT_FS TM_PDTM_A2D_CAP * TM_PDTM_COUNT_PER_A2D
         * TM_PDTM_COUNT_AT_FS;
## the +/- 14-bit A/D on the PDTM has a full scale of 2.5 V
## we target TM_PDTM_A2D_FS out of TM_PDTM_A2D_CAP which gives
## 2.5V * TM_PDTM_A2D_FS / TM_PDTM_A2D_CAP 1.52587890625 V
## going into the A/D at nominal full scale
## The overall gain of the hardware is TM_PDTM_HW_GAIN,
## so 1.52587890625 V / TM_PDTM_HW_GAIN 23.5195920453471 mV
## must go into the gain hw to give nominal FS
## IF X mV/V comes back from the rotor:
##   we want 23.5195920453471 mV going to the gain hw
##   so the LTC8043 must reduce the signal by a factor of
##         23.5195920453471 mV / (X mV/V)
##   so the DAC value should be
##         4096 * (23.5195920453471 mV / (X mV/V)) or
##         174152.680544063 / (X mV/V)
## IF THE EXCITATION VOLTAGE IS 5V:
##         GAIN-DAC 34830.5361088125 / (mV/V from rotor)
## IF THE EXCITATION VOLTAGE IS 3V:
##         GAIN-DAC 58050.8935146875 / (mV/V from rotor)
CONST TM_PDTM_GAIN_MVPVATFS 35340.0;
## S700 S700 S700 S700 S700 S700 S700 S700 S700 S700 S700 S700 S700 S700 S700
CONST TM_S700_NUMBER_CHANNELS 3;
CONST TM_S700_FILTER_MAX 10;
CONST TM_S700_COUNT_AT_FS 10000.0 * ENGCNT;
CONST TM_S700_P0_PER_COUNT 0x10000 * P0CNT / ENGCNT;
# 1
CONST TM_S700_P0_AT_FS TM_S700_P0_PER_COUNT * TM_S700_COUNT_AT_FS;
#CONST TM_S700_P0_AT_FS 655360000.0 * P0CNT; # 2**16*10**4
## S700P S700P S700P S700P S700P S700P S700P S700P S700P S700P S700P S700P
CONST TM_S700P_FILTER_MAX 10;
CONST TM_S700P_A2D_CAP 0x800000 * A2DCNT;
# 2**23
CONST TM_S700P_A2D_AT_FS 4.0 * Kw.MEGA * A2DCNT;
CONST TM_S700P_COUNT_AT_FS 655360000.0 * ENGCNT;
# 2**16*10**4
CONST TM_S700P_P0_PER_COUNT 1.0 * P0CNT / ENGCNT;
# 1
CONST TM_S700P_P0_AT_FS TM_S700P_P0_PER_COUNT * TM_S700P_COUNT_AT_FS;
## NGRTM NGRTM NGRTM NGRTM NGRTM NGRTM NGRTM NGRTM NGRTM NGRTM NGRTM NGRTM
CONST TM_NGRTM_CLOCK_Hz 16.0 * Kw.MEGA * Kw.Hz;
CONST TM_NGRTM_A2D_CAP 0x800000 * A2DCNT;
# 2**23
CONST TM_NGRTM_P0_AT_FS 163840000.0 * P0CNT;
#== 2**14*10**4
CONST TM_NGRTM_CAMELD 0x4000;
#16384; # 2**14
CONST TM_NGRTM_CAMELA 1.0 * 0x4000 * 0x100000 * P0CNT / DACCNT;
# 2**34
CONST TM_NGRTM_DACFS_PER_CDE TM_NGRTM_P0_AT_FS / TM_NGRTM_CAMELA;
CONST TM_NGRTM_FSV_PER_CDE TM_NGRTM_DACFS_PER_CDE / TM_DAOV_DAC_PER_V;
CONST TM_NGRTM_SCALE TM_NGRTM_DACFS_PER_CDE * TM_NGRTM_CAMELD;
CONST TM_NGRTM_A2DFS_AT_1GAIN TM_NGRTM_P0_AT_FS * 0x10000;
CONST LX_NGRTM_30R 10.0 * Kw.KILO * Kw.OHM;
CONST LX_NGRTM_28R 130.0 * Kw.OHM;
CONST TM_NGRTM_GAIN 2.0 * LX_NGRTM_30R / LX_NGRTM_28R + 1.0;
CONST TM_NGRTM_A2D_PER_UVPV TM_NGRTM_A2D_CAP * TM_NGRTM_GAIN * Kw.UVPV;
CONST TM_NGRTM_NOISE_MIN 0.5;
CONST TM_NGRTM_NOISE_MAX (1.0);
# The AD22103 is a monolithic temperature sensor with on-chip
# signal conditioning over temperature range 0 DEGC to +100 DEGC
CONST TM_AD22103_VREF 3.3 * Kw.VOLT;
CONST TM_AD22103_V_PER_DEGC 0.028 * Kw.VOLT / Kw.DEGC;
CONST TM_AD22103_V_AT_0DEGC 0.25 * Kw.VOLT;
CONST TM_NGRTM_TEMPA2D_CAP 0x8000 * A2DCNT;
# 2**15
CONST TM_NGRTM_TEMPP0_PER_A2D 0x10000 * P0CNT / A2DCNT;
# 2**16
CONST TM_NGRTM_DEGC_OFFSET TM_AD22103_V_AT_0DEGC / TM_AD22103_V_PER_DEGC;
CONST TM_NGRTM_TEMPP0_PER_DEGC TM_NGRTM_TEMPA2D_CAP * TM_AD22103_V_PER_DEGC
         * TM_NGRTM_TEMPP0_PER_A2D / TM_AD22103_VREF;
CONST TM_NGRTM_TEMPP0_PER_DEGF Kw.DEGF * TM_NGRTM_TEMPP0_PER_DEGC / Kw.DEGC;
CONST TM_NGRTM_TEMPP0_UVPV_PER_DEGF TM_NGRTM_TEMPP0_PER_DEGF
         / (TM_NGRTM_A2D_PER_UVPV * TM_NGRTM_TEMPP0_PER_A2D * 0x1000);
CONST TM_BLTDC_FILTER_Hz 20.0 * Kw.KILO * Kw.Hz;
CONST TM_BLTAC_FILTER_Hz 20.0 * Kw.KILO * Kw.Hz;
CONST TM_CDTM_FILTER_Hz 10.0 * Kw.KILO * Kw.Hz;
CONST TM_NGT_FILTER_Hz 7.8125 * Kw.KILO * Kw.Hz;
CONST TM_NGRTM_FILTER_Hz 7.8125 * Kw.KILO * Kw.Hz;
CONST TM_S700P_FILTER_Hz 7.8125 * Kw.KILO * Kw.Hz;
CONST TM_PDTM_FILTER_Hz 2.0 * Kw.KILO * Kw.Hz;
CONST TM_S700_FILTER_Hz 2.0 * Kw.KILO * Kw.Hz;
CONST TM_BLTDC_UVPV_PER_A2D 1.0 / TM_BLTDC_A2D_PER_UVPV;
CONST TM_BLTAC_UVPV_PER_A2D 1.0 / TM_BLTAC_A2D_PER_UVPV;
CONST TM_CDTM_UVPV_PER_Hz 1.0 / TM_CDTM_Hz_PER_UVPV;
CONST TM_NGRTM_UVPV_PER_A2D 1.0 / TM_NGRTM_A2D_PER_UVPV;
CONST TM_NGT_UVPV_PER_A2D 1.0 / TM_NGT_A2D_PER_UVPV;
CONST TM_PDTM_GAIN_UVPV_PER_COUNT 1.0 / TM_PDTM_COUNT_PER_GAIN_UVPV;
CONST TM_BLTDC_UVPV_IF_A2DMAX 1.0 / (Kw.UVPV * TM_BLTDC_GAIN);
CONST TM_BLTAC_UVPV_IF_A2DMAX 1.0 / (Kw.UVPV * TM_BLTAC_GAIN);
CONST TM_NGT_UVPV_IF_A2DMAX 1.0 / (Kw.UVPV * TM_NGT_GAIN);
CONST TM_NGRTM_UVPV_IF_A2DMAX 1.0 / (Kw.UVPV * TM_NGRTM_GAIN);
FUNC DBL tmc_cdtm_uVpV_to_rotor_freq(DBL uvpv_data):
   RETURN uvpv_data / TM_CDTM_UVPV_PER_Hz + TM_CDTM_NOMINAL_Hz_AT_ZERO;
FUNC_END
FUNC DBL tmc_cdtm_rotor_freq_to_uVpV(DBL rf_data):
   RETURN TM_CDTM_UVPV_PER_Hz * (rf_data - TM_CDTM_NOMINAL_Hz_AT_ZERO);
FUNC_END
FUNC DBL tmc_dao_V_to_DAC(DBL volt_data):
   RETURN TM_DAOV_DAC_PER_V * (volt_data - TM_DAOV_V_IF_DACMIN);
FUNC_END
FUNC DBL tmc_dao_DAC_to_V(DBL dac_data):
   RETURN dac_data / TM_DAOV_DAC_PER_V + TM_DAOV_V_IF_DACMIN;
FUNC_END
FUNC DBL tmc_dao_deltaV_to_DAC(DBL volt_data):
   RETURN TM_DAOV_DAC_PER_V * volt_data;
FUNC_END
FUNC DBL tmc_shunt_value(DBL bridge_ohms
         , DBL shunt_ohms):
   RETURN bridge_ohms / (Kw.UVPV * (4.0 * shunt_ohms + 2.0 * bridge_ohms));
FUNC_END
