//   Copyright (C) 2020 by Kevin D. Woerner
//-/ =KDW= ########## DO NOT EDIT -- AUTOGENERATED CODE #########
//-/ =KDW= ############ BUILDER $KWROOT/0lib/vkkcp.sh ###########
//-/ =KDW= ######### SRC $KWROOT/codekdw/kw-lib/Kw.fwipp ########
// 2020-07-20 kdw  For Changelog, See File Kw.varylog
#ifndef INCLUDED_Kw_h
#define INCLUDED_Kw_h
double cxkilogram(void);
double cxmeter(void);
double cxsecond(void);
double cxkelvin(void);
double cxampere(void);
double cxcoulomb(void);
double cxmole(void);
double cxcandela(void);
double cxbit(void);
double cxradian(void);
double cxsteradian(void);
double cxmetre(void);
double cxkg(void);
double cxrad(void);
double cxe(void);
double cxtau(void);
double cxphi(void);
double cxlntwo(void);
double cxlnten(void);
double cxsqrttwo(void);
double cxeuler(void);
double cxfeigenbaum(void);
double cxapery(void);
double cxpi(void);
double cxyotta(void);
double cxzetta(void);
double cxexa(void);
double cxpeta(void);
double cxtera(void);
double cxgiga(void);
double cxmega(void);
double cxkilo(void);
double cxhecto(void);
double cxdeca(void);
double cxdeci(void);
double cxcenti(void);
double cxmilli(void);
double cxmicro(void);
double cxnano(void);
double cxpico(void);
double cxfemto(void);
double cxatto(void);
double cxzepto(void);
double cxyocto(void);
double cxkibi(void);
double cxmebi(void);
double cxgibi(void);
double cxtebi(void);
double cxpebi(void);
double cxexbi(void);
double cxzebi(void);
double cxyobi(void);
double cxmps(void);
double cxmpss(void);
double cxunitgm(void);
double cxnewton(void);
double cxjoule(void);
double cxpa(void);
double cxwatt(void);
double cxhertz(void);
double cxamp(void);
double cxvolt(void);
double cxohm(void);
double cxhenry(void);
double cxfarad(void);
double cxsiemens(void);
double cxweber(void);
double cxtesla(void);
double cxlumen(void);
double cxlux(void);
double cxboltzmann(void);
double cxboltzmann_err(void);
double cxelectroncharge(void);
double cxelectroncharge_err(void);
double cxlight(void);
double cxlight_err(void);
double cxavogadro(void);
double cxavogadro_err(void);
double cxplanck(void);
double cxplanck_err(void);
double cxkcd(void);
double cxkcd_err(void);
double cxdvcshz(void);
double cxdvcswavelength(void);
double cxdvcswavenumber(void);
double cxdvcsenergy(void);
double cxdvcs_err(void);
double cxkb(void);
double cxkb_err(void);
double cxelementarycharge(void);
double cxelementarycharge_err(void);
double cxplanckbar(void);
double cxplanckbar_err(void);
double cxh(void);
double cxh_err(void);
double cxhbar(void);
double cxhbar_err(void);
double cxboltzmann_rec(void);
double cxelectroncharge_rec(void);
double cxlight_rec(void);
double cxavogadro_rec(void);
double cxdvcshz_rec(void);
double cxplanck_rec(void);
double cxh_rec(void);
double cxkb_rec(void);
double cxkghz(void);
double cxkgwavelength(void);
double cxkgwavenumber(void);
double cxkgenergy(void);
double cxgravity(void);
double cxgravity_err(void);
double cxatmosphere(void);
double cxatmosphere_err(void);
double cxau(void);
double cxau_err(void);
double cxjosephson(void);
double cxjosephson_err(void);
double cxvonklitzing(void);
double cxvonklitzing_err(void);
double cxfaraday(void);
double cxfaraday_err(void);
double cxgas(void);
double cxgas_err(void);
double cxgravitation(void);
double cxgravitation_err(void);
double cxrydberg(void);
double cxrydberg_err(void);
double cxg(void);
double cxg_err(void);
double cxalpha(void);
double cxalpha_err(void);
double cxalpha_rec(void);
double cxalpha_rec_err(void);
double cxfltsig(void);
double cxfltman(void);
double cxflteps(void);
double cxfltmax(void);
double cxdblmaxln(void);
double cxdblsig(void);
double cxdblman(void);
double cxdbleps(void);
double cxdblmax(void);
double cxsi16max(void);
double cxsi16min(void);
double cxui16max(void);
double cxsi32max(void);
double cxsi32min(void);
double cxui32max(void);
double cxintmax(void);
double cxmonths_in_year(void);
double cxminute(void);
double cxhour(void);
double cxday(void);
double cxearthsolarday(void);
double cxweek(void);
double cxflick(void);
double cxjulianday(void);
double cxjulianyear(void);
double cxjuliancentury(void);
double cxjulianmillennium(void);
double cxjday(void);
double cxjyear(void);
double cxjcentury(void);
double cxjmillennium(void);
double cxjd(void);
double cxjy(void);
double cxjc(void);
double cxjm(void);
double cxjewish_first_month(void);
double cxgyear(void);
double cxgregorianyear(void);
double cxkwt(void);
double cxuet(void);
double cxj2k(void);
double cxj2kday(void);
double cxjdsec_at_0gregorian(void);
double cxjdsec_at_0kwt(void);
double cxjdsec_at_0j2k(void);
double cxjdsec_at_0uet(void);
double cxtt_at_0tai(void);
double cxtt_at_0ut1(void);
double cxgram(void);
double cxpound(void);
double cxlb(void);
double cxounce(void);
double cxton(void);
double cxtonne(void);
double cxgrain(void);
double cxcarat(void);
double cxmm(void);
double cxinch(void);
double cxfoot(void);
double cxft(void);
double cxyard(void);
double cxmile(void);
double cxpoint(void);
double cxstandardgravity(void);
double cxearthgravitya(void);
double cxearthgravityb(void);
double cxgravitationnasa(void);
double cxgravitationiers(void);
double cxkgf(void);
double cxlbf(void);
double cxatm(void);
double cxstandardatmosphere(void);
double cxtorr(void);
double cxbar(void);
double cxmmhg(void);
double cxinhg(void);
double cxpsi(void);
double cxdegc(void);
double cxdegf(void);
double cxdegr(void);
double cxk_at_0tempc(void);
double cxk_at_0tempf(void);
double cxk_at_0tempr(void);
double cxmach(void);
double cxmph(void);
double cxhectare(void);
double cxare(void);
double cxacre(void);
double cxbarn(void);
double cxliter(void);
double cxlitre(void);
double cxgallon(void);
double cxquart(void);
double cxpint(void);
double cxcup(void);
double cxfloz(void);
double cxtblsp(void);
double cxtsp(void);
double cxbarrel(void);
double cxah(void);
double cxcalorie(void);
double cxcal_it(void);
double cxcal_th(void);
double cxcal(void);
double cxbtu_th(void);
double cxbtu_it(void);
double cxbtu(void);
double cxhp(void);
double cxhorsepower(void);
double cxhpmetric(void);
double cxelectronvolt(void);
double cxerg(void);
double cxfoe(void);
double cxaaabatterycharge(void);
double cxaaabatteryvoltage(void);
double cxaaabattery(void);
double cxaaabatteryenergy(void);
double cxaabatterycharge(void);
double cxaabatteryvoltage(void);
double cxaabattery(void);
double cxaabatteryenergy(void);
double cxcbatterycharge(void);
double cxcbatteryvoltage(void);
double cxcbattery(void);
double cxcbatteryenergy(void);
double cxdbatterycharge(void);
double cxdbatteryvoltage(void);
double cxdbattery(void);
double cxdbatteryenergy(void);
double cxninevoltcharge(void);
double cxninevoltvoltage(void);
double cxninevolt(void);
double cxninevoltenergy(void);
double cxninevoltbatterycharge(void);
double cxninevoltbatteryvoltage(void);
double cxninevoltbattery(void);
double cxninevoltbatteryenergy(void);
double cxphonebatterycharge(void);
double cxphonebatteryvoltage(void);
double cxphonebattery(void);
double cxphonebatteryenergy(void);
double cxcarbatterycharge(void);
double cxcarbatteryvoltage(void);
double cxcarbattery(void);
double cxcarbatteryenergy(void);
double cxmicrowavehz(void);
double cxmicrowavewavelength(void);
double cxmicrowavewavenumber(void);
double cxmicrowaveenergy(void);
double cxlfhz(void);
double cxlfwavelength(void);
double cxlfwavenumber(void);
double cxlfenergy(void);
double cxmfhz(void);
double cxmfwavelength(void);
double cxmfwavenumber(void);
double cxmfenergy(void);
double cxhfhz(void);
double cxhfwavelength(void);
double cxhfwavenumber(void);
double cxhfenergy(void);
double cxvhfhz(void);
double cxvhfwavelength(void);
double cxvhfwavenumber(void);
double cxvhfenergy(void);
double cxuhfhz(void);
double cxuhfwavelength(void);
double cxuhfwavenumber(void);
double cxuhfenergy(void);
double cxshfhz(void);
double cxshfwavelength(void);
double cxshfwavenumber(void);
double cxshfenergy(void);
double cxehfhz(void);
double cxehfwavelength(void);
double cxehfwavenumber(void);
double cxehfenergy(void);
double cxthfhz(void);
double cxthfwavelength(void);
double cxthfwavenumber(void);
double cxthfenergy(void);
double cxfirhz(void);
double cxfirwavelength(void);
double cxfirwavenumber(void);
double cxfirenergy(void);
double cxmirhz(void);
double cxmirwavelength(void);
double cxmirwavenumber(void);
double cxmirenergy(void);
double cxnirhz(void);
double cxnirwavelength(void);
double cxnirwavenumber(void);
double cxnirenergy(void);
double cxredwavelength(void);
double cxredhz(void);
double cxredwavenumber(void);
double cxredenergy(void);
double cxorangewavelength(void);
double cxorangehz(void);
double cxorangewavenumber(void);
double cxorangeenergy(void);
double cxyellowwavelength(void);
double cxyellowhz(void);
double cxyellowwavenumber(void);
double cxyellowenergy(void);
double cxyellowgreenhz(void);
double cxyellowgreenwavelength(void);
double cxyellowgreenwavenumber(void);
double cxyellowgreenenergy(void);
double cxgreenwavelength(void);
double cxgreenhz(void);
double cxgreenwavenumber(void);
double cxgreenenergy(void);
double cxbluewavelength(void);
double cxbluehz(void);
double cxbluewavenumber(void);
double cxblueenergy(void);
double cxvioletwavelength(void);
double cxviolethz(void);
double cxvioletwavenumber(void);
double cxvioletenergy(void);
double cxnuvhz(void);
double cxnuvwavelength(void);
double cxnuvwavenumber(void);
double cxnuvenergy(void);
double cxeuvhz(void);
double cxeuvwavelength(void);
double cxeuvwavenumber(void);
double cxeuvenergy(void);
double cxuvawavelength(void);
double cxuvahz(void);
double cxuvawavenumber(void);
double cxuvaenergy(void);
double cxuvbwavelength(void);
double cxuvbhz(void);
double cxuvbwavenumber(void);
double cxuvbenergy(void);
double cxuvcwavelength(void);
double cxuvchz(void);
double cxuvcwavenumber(void);
double cxuvcenergy(void);
double cxsxhz(void);
double cxsxwavelength(void);
double cxsxwavenumber(void);
double cxsxenergy(void);
double cxsxxwavelength(void);
double cxsxxhz(void);
double cxsxxwavenumber(void);
double cxsxxenergy(void);
double cxhxhz(void);
double cxhxwavelength(void);
double cxhxwavenumber(void);
double cxhxenergy(void);
double cxgammahz(void);
double cxgammawavelength(void);
double cxgammawavenumber(void);
double cxgammaenergy(void);
double cxturn(void);
double cxarcdegree(void);
double cxarcminute(void);
double cxarcsecond(void);
double cxgrad(void);
double cxarcdeg(void);
double cxarcmin(void);
double cxarcsec(void);
double cxsquaredegree(void);
double cxsqdeg(void);
double cxspheresurface(void);
double cxshannon(void);
double cxnat(void);
double cxhartley(void);
double cxhart(void);
double cxdit(void);
double cxban(void);
double cxrpm(void);
double cxrps(void);
double cxfinestructure(void);
double cxfinestructure_err(void);
double cxfinestructure_rec(void);
double cxfinestructure_rec_err(void);
double cxmagnetic(void);
double cxmagnetic_err(void);
double cxmu0(void);
double cxmu0_err(void);
double cxelectric(void);
double cxelectric_err(void);
double cxepsilon0(void);
double cxepsilon0_err(void);
double cxcoulombconst(void);
double cxcoulombconst_err(void);
double cxprotonradius(void);
double cxprotonradius_err(void);
double cxmolarmass(void);
double cxmolarmass_err(void);
double cxmolarmassx(void);
double cxmolarmassx_err(void);
double cxdalton(void);
double cxdalton_err(void);
double cxamu(void);
double cxamu_err(void);
double cxatomicmassunit(void);
double cxatomicmassunit_err(void);
double cxuamu(void);
double cxuamu_err(void);
double cxrydberghz(void);
double cxrydbergwavelength(void);
double cxrydbergwavenumber(void);
double cxrydbergenergy(void);
double cxelectronmassa(void);
double cxelectronmassa_err(void);
double cxelectronmass(void);
double cxelectronmass_err(void);
double cxelectron_mass(void);
double cxelectronenergy(void);
double cxelectronhz(void);
double cxelectronwavelength(void);
double cxupquarkmass(void);
double cxupquarkmass_err(void);
double cxupquark_mass(void);
double cxupquarkenergy(void);
double cxupquarkhz(void);
double cxupquarkwavelength(void);
double cxdownquarkmass(void);
double cxdownquarkmass_err(void);
double cxdownquark_mass(void);
double cxdownquarkenergy(void);
double cxdownquarkhz(void);
double cxdownquarkwavelength(void);
double cxmuonmass(void);
double cxmuonmass_err(void);
double cxmuon_mass(void);
double cxmuonenergy(void);
double cxmuonhz(void);
double cxmuonwavelength(void);
double cxprotonmass(void);
double cxprotonmass_err(void);
double cxproton_mass(void);
double cxprotonenergy(void);
double cxprotonhz(void);
double cxprotonwavelength(void);
double cxneutronmass(void);
double cxneutronmass_err(void);
double cxneutron_mass(void);
double cxneutronenergy(void);
double cxneutronhz(void);
double cxneutronwavelength(void);
double cxtaumass(void);
double cxtaumass_err(void);
double cxtau_mass(void);
double cxtauenergy(void);
double cxtauhz(void);
double cxtauwavelength(void);
double cxdeuteronmass(void);
double cxdeuteronmass_err(void);
double cxdeuteron_mass(void);
double cxhelionmass(void);
double cxhelionmass_err(void);
double cxhelion_mass(void);
double cxtritonmass(void);
double cxtritonmass_err(void);
double cxtriton_mass(void);
double cxalphamass(void);
double cxalphamass_err(void);
double cxalpha_mass(void);
double cxhydrogenradius(void);
double cxhydrogenradius_err(void);
double cxbohrradius(void);
double cxbohrradius_err(void);
double cxhihz(void);
double cxhiwavelength(void);
double cxhiwavenumber(void);
double cxhienergy(void);
double cxhydrogenline(void);
double cxhydrogenline_err(void);
double cxhi(void);
double cxhi_err(void);
double cxplanckmass(void);
double cxplanckcharge(void);
double cxplanckenergy(void);
double cxplancktemp(void);
double cxplancklength(void);
double cxplancktime(void);
double cxstefan(void);
double cxstefan_err(void);
double cxpingpongballradius(void);
double cxgolfballradius(void);
double cxtennisballradius(void);
double cxbaseballradius(void);
double cxsoftballradius(void);
double cxsoccerballradius(void);
double cxbasketballradius(void);
double cxpingpongballmass(void);
double cxgolfballmass(void);
double cxtennisballmass(void);
double cxbaseballmass(void);
double cxsoftballmass(void);
double cxbasketballmass(void);
double cxsoccerballmass(void);
double cxmarathon(void);
double cxpennythickness(void);
double cxnickelthickness(void);
double cxdimethickness(void);
double cxquarterthickness(void);
double cxpennyradius(void);
double cxnickelradius(void);
double cxdimeradius(void);
double cxquarterradius(void);
double cxpennymass(void);
double cxnickelmass(void);
double cxdimemass(void);
double cxquartermass(void);
double cxmoonmonth(void);
double cxmilkywayage(void);
double cxuniverseage(void);
double cxlightyear(void);
double cxastronomicalunit(void);
double cxparsec(void);
double cxproximacentauri(void);
double cxmilkywayradius(void);
double cxgalacticcenter(void);
double cxuniverseradius(void);
double cxmilkywaymass(void);
double cxuniversemass(void);
double cxsolarconstant(void);
double cxeinstein(void);
double cxeinstein_err(void);
double cxhubble(void);
double cxhubble_err(void);
double cxbhmasstemp(void);
double cxbhmass_radius(void);
double cxbhmass3_lifetime(void);
double cxbhradius2density(void);
double cxbhentropy_area(void);
double cxbekensteininformation(void);
double cxbekensteinentropy(void);
double cxelevationmax(void);
double cxelevationmin(void);
double cxkpgboundary(void);
double cxtrjboundary(void);
double cxmilkywayday(void);
double cxptrboundary(void);
double cxnpboundary(void);
double cxlifeage(void);
double cxgiantimpact(void);
double cxearthage(void);
double cxppq(void);
double cxppt(void);
double cxppb(void);
double cxppm(void);
double cxmass(void);
double cxlength(void);
double cxdistance(void);
double cxtemperature(void);
double cxtime(void);
double cxangle(void);
double cxsolid_angle(void);
double cxspeed(void);
double cxacceleration(void);
double cxforce(void);
double cxenergy(void);
double cxaction(void);
double cxpower(void);
double cxarea(void);
double cxvolume(void);
double cxdensity(void);
double cxspecificheat(void);
double cxpressure(void);
double cxviscosity(void);
double cxfrequency(void);
double cxcharge(void);
double cxcurrent(void);
double cxvoltage(void);
double cxresistance(void);
double cxinductance(void);
double cxcapacitance(void);
double cxconductance(void);
double cxmagneticflux(void);
double cxmagneticinduction(void);
#include <stdbool.h>
#include <stdlib.h>
#include <stdio.h>
#include <math.h>
#include <time.h>
#include <sys/time.h>
double timee(void);
void kw_description(void);
#define KILOGRAM (1.0)
#define METER (1.0)
#define SECOND (1.0)
#define KELVIN (1.0)
#define AMPERE (1.0)
#define COULOMB (AMPERE * SECOND)
#define MOLE (1.0)
#define CANDELA (1.0)
#define BIT (1.0)
#define RADIAN (1.0)
#define STERADIAN (RADIAN * RADIAN)
#define METRE (METER)
#define KG (KILOGRAM)
#define RAD (RADIAN)
#define E (2.71828182845904523536028747135266249775724709369996)
#define TAU \
      (6.28318530717958647692528676655900576839433879875021)
#define PHI \
      (1.61803398874989484820458683436563811772030917980576)
#define LNTWO \
      (0.69314718055994530941723212145817656807550013436026)
#define LNTEN \
      (2.30258509299404568401799145468436420760110148862877)
#define SQRTTWO \
      (1.41421356237309504880168872420969807856967187537695)
#define EULER (0.57721566490153286060651209008240243104215934)
#define FEIGENBAUM (4.669201609102990671853203820466201617258)
#define APERY (1.20205690315959428539973816151144999076498629)
#define PI (TAU / 2.0)
#define YOTTA (1.0E+24)
#define ZETTA (1.0E+21)
#define EXA (1.0E+18)
#define PETA (1.0E+15)
#define TERA (1.0E+12)
#define GIGA (1.0E+9)
#define MEGA (1.0E+6)
#define KILO (1.0E+3)
#define HECTO (1.0E+2)
#define DECA (1.0E+1)
#define DECI (1.0E-1)
#define CENTI (1.0E-2)
#define MILLI (1.0E-3)
#define MICRO (1.0E-6)
#define NANO (1.0E-9)
#define PICO (1.0E-12)
#define FEMTO (1.0E-15)
#define ATTO (1.0E-18)
#define ZEPTO (1.0E-21)
#define YOCTO (1.0E-24)
#define KIBI (1024.0)
#define MEBI (KIBI * KIBI)
#define GIBI (MEBI * KIBI)
#define TEBI (GIBI * KIBI)
#define PEBI (TEBI * KIBI)
#define EXBI (PEBI * KIBI)
#define ZEBI (EXBI * KIBI)
#define YOBI (ZEBI * KIBI)
#define MPS (METER / SECOND)
#define MPSS (METER / (SECOND * SECOND))
#define UNITGM (METER * MPS * MPS)
#define NEWTON (KILOGRAM * MPSS)
#define JOULE (NEWTON * METER)
#define PA (NEWTON / (METER * METER))
#define WATT (JOULE / SECOND)
#define HERTZ (1.0 / SECOND)
#define AMP (AMPERE)
#define VOLT (WATT / AMPERE)
#define OHM (VOLT / AMPERE)
#define HENRY (OHM * SECOND)
#define FARAD (COULOMB / VOLT)
#define SIEMENS (1.0 / OHM)
#define WEBER (VOLT * SECOND)
#define TESLA (WEBER / (METER * METER))
#define LUMEN (CANDELA * STERADIAN)
#define LUX (LUMEN / (METER * METER))
#define BOLTZMANN (1.380649E-23 * JOULE / KELVIN)
#define BOLTZMANN_ERR 0
#define ELECTRONCHARGE (1.602176634E-19 * COULOMB)
#define ELECTRONCHARGE_ERR 0
#define LIGHT (2.99792458E+8 * METER / SECOND)
#define LIGHT_ERR 0
#define AVOGADRO (6.02214076E+23 / MOLE)
#define AVOGADRO_ERR 0
#define PLANCK (6.62607015E-34 * JOULE * SECOND)
#define PLANCK_ERR 0
#define KCD (6.83E+2 * LUMEN / WATT)
#define KCD_ERR 0
#define dvCsHz (9.19263177E+9 / SECOND)
#define dvCsWAVELENGTH (LIGHT / dvCsHz)
#define dvCsWAVENUMBER (1.0 / dvCsWAVELENGTH)
#define dvCsENERGY (PLANCK * dvCsHz)
#define dvCs_ERR 0
#define kB (BOLTZMANN)
#define kB_ERR (BOLTZMANN_ERR)
#define ELEMENTARYCHARGE (ELECTRONCHARGE)
#define ELEMENTARYCHARGE_ERR (ELECTRONCHARGE_ERR)
#define PLANCKBAR (PLANCK / TAU)
#define PLANCKBAR_ERR (PLANCK_ERR)
#define h (PLANCK)
#define h_ERR (PLANCK_ERR)
#define HBAR (PLANCKBAR)
#define HBAR_ERR (PLANCKBAR_ERR)
#define BOLTZMANN_REC (1.0 / BOLTZMANN)
#define ELECTRONCHARGE_REC (1.0 / ELECTRONCHARGE)
#define LIGHT_REC (1.0 / LIGHT)
#define AVOGADRO_REC (1.0 / AVOGADRO)
#define dvCsHz_REC (1.0 / dvCsHz)
#define PLANCK_REC (1.0 / PLANCK)
#define h_REC (PLANCK_REC)
#define kB_REC (BOLTZMANN_REC)
#define KGHz (KG * LIGHT * LIGHT / PLANCK)
#define KGWAVELENGTH (LIGHT / KGHz)
#define KGWAVENUMBER (1.0 / KGWAVELENGTH)
#define KGENERGY (PLANCK * KGHz)
#define GRAVITY (9.80665 * MPSS)
#define GRAVITY_ERR 0
#define ATMOSPHERE (1.01325E+5 * PA)
#define ATMOSPHERE_ERR 0
#define AU (1.495978707E+11 * METER)
#define AU_ERR 0
#define JOSEPHSON (2.0 * ELECTRONCHARGE / PLANCK)
#define JOSEPHSON_ERR 0
#define VONKLITZING (PLANCK / (ELECTRONCHARGE * ELECTRONCHARGE))
#define VONKLITZING_ERR 0
#define FARADAY (ELECTRONCHARGE * AVOGADRO)
#define FARADAY_ERR 0
#define GAS (BOLTZMANN * AVOGADRO)
#define GAS_ERR 0
#define GRAVITATION (6.67430E-11 * UNITGM / KILOGRAM)
#define GRAVITATION_ERR (2.2E-5)
#define RYDBERG (1.0973731568160E+7 * LIGHT / METER)
#define RYDBERG_ERR (1.9E-12)
#define G (GRAVITATION)
#define G_ERR (GRAVITATION_ERR)
#define ALPHA (7.2973525664E-3)
#define ALPHA_ERR (2.3E-10)
#define ALPHA_REC (1.0 / ALPHA)
#define ALPHA_REC_ERR (ALPHA_ERR)
#define FLTSIG 23
#define FLTMAN 8
#define FLTEPS (1.1920928955078125E-7)
#define FLTMAX (3.402823466385288598E+38)
#define DBLMAXLN (LNTWO * 1024)
#define DBLSIG 52
#define DBLMAN 11
#define DBLEPS (2.220446049250313E-16)
#define DBLMAX (1.79769313486227E+308)
#define SI16MAX 32767
#define SI16MIN (- 32768)
#define UI16MAX 65535
#define SI32MAX 2147483647
#define SI32MIN (- 2147483648)
#define UI32MAX 4294967295
#define INTMAX (SI32MAX)
#define MONTHS_IN_YEAR 12
#define MINUTE (60.0 * SECOND)
#define HOUR (60.0 * MINUTE)
#define DAY (24.0 * HOUR)
#define EARTHSOLARDAY (DAY)
#define WEEK (7.0 * DAY)
#define FLICK (SECOND / 705600000.0)
#define JULIANDAY (DAY)
#define JULIANYEAR (365.25 * JULIANDAY)
#define JULIANCENTURY (100 * JULIANYEAR)
#define JULIANMILLENNIUM (1000 * JULIANYEAR)
#define JDAY (JULIANDAY)
#define JYEAR (JULIANYEAR)
#define JCENTURY (JULIANCENTURY)
#define JMILLENNIUM (JULIANMILLENNIUM)
#define JD (JULIANDAY)
#define JY (JULIANYEAR)
#define JC (JULIANCENTURY)
#define JM (JULIANMILLENNIUM)
#define JEWISH_FIRST_MONTH 7
#define GYEAR (365.2425 * DAY)
#define GREGORIANYEAR (GYEAR)
#define KWT (0.1875 * SECOND)
#define UET (SECOND)
#define J2K (DAY)
#define J2KDAY (DAY)
#define JDSEC_AT_0GREGORIAN (1721058.5 * JDAY)
#define JDSEC_AT_0KWT (2437240.66125 * JDAY)
#define JDSEC_AT_0J2K (2451545.0 * JDAY)
#define JDSEC_AT_0UET (2440587.5 * JDAY)
#define TT_AT_0TAI (32.184 * SECOND)
#define TT_AT_0UT1 (68.97 * SECOND)
#define GRAM (0.001 * KILOGRAM)
#define POUND (0.45359237 * KILOGRAM)
#define LB (POUND)
#define OUNCE (0.0625 * POUND)
#define TON (2000.0 * POUND)
#define TONNE (1000.0 * KILOGRAM)
#define GRAIN (POUND / 7000)
#define CARAT (0.2 * GRAM)
#define MM (MILLI * METER)
#define INCH (0.0254 * METER)
#define FOOT (12.0 * INCH)
#define FT (FOOT)
#define YARD (3.0 * FOOT)
#define MILE (5280.0 * FOOT)
#define POINT (INCH / 72.0)
#define STANDARDGRAVITY (GRAVITY)
#define EARTHGRAVITYA (9.7803253359 * MPSS)
#define EARTHGRAVITYB (9.8321849378 * MPSS)
#define GRAVITATIONNASA (6.67259E-11 * UNITGM / KILOGRAM)
#define GRAVITATIONIERS (6.67428E-11 * UNITGM / KILOGRAM)
#define KGF (KILOGRAM * GRAVITY)
#define LBF (POUND * GRAVITY)
#define ATM (ATMOSPHERE)
#define STANDARDATMOSPHERE (ATMOSPHERE)
#define TORR (ATMOSPHERE / 760)
#define BAR (1E+5 * PA)
#define MMHG \
      (13595.1 * KILOGRAM * GRAVITY * MM / (METER * METER *\
            METER))
#define INHG (MMHG * INCH / MM)
#define PSI (POUND * GRAVITY / (INCH * INCH))
#define DEGC (KELVIN)
#define DEGF (KELVIN / 1.8)
#define DEGR (DEGF)
#define K_AT_0TEMPC (273.15 * DEGC)
#define K_AT_0TEMPF (459.67 * DEGF)
#define K_AT_0TEMPR (0.0 * DEGR)
#define MACH (331.46 * MPS)
#define MPH (MILE / HOUR)
#define HECTARE (10000 * METER * METER)
#define ARE (100 * METER * METER)
#define ACRE (MILE * MILE / 640.0)
#define BARN (1E-28 * METER * METER)
#define LITER (METER * METER * METER / 1000.0)
#define LITRE (LITER)
#define GALLON (231.0 * INCH * INCH * INCH)
#define QUART (GALLON / 4.0)
#define PINT (QUART / 2.0)
#define CUP (PINT / 2.0)
#define FLOZ (CUP / 8.0)
#define TBLSP (FLOZ / 2.0)
#define TSP (TBLSP / 3.0)
#define BARREL (42.0 * GALLON)
#define AH (AMPERE * HOUR)
#define CALORIE (4.184 * JOULE)
#define CAL_IT (4.1868 * JOULE)
#define CAL_TH (CALORIE)
#define CAL (CALORIE)
#define BTU_TH (CAL_TH * POUND * DEGF / (GRAM * DEGC))
#define BTU_IT (CAL_IT * POUND * DEGF / (GRAM * DEGC))
#define BTU (CALORIE * POUND * DEGF / (GRAM * DEGC))
#define HP (550.0 * FOOT * POUND * GRAVITY / SECOND)
#define HORSEPOWER (HP)
#define HPMETRIC (75 * KILOGRAM * GRAVITY * MPS)
#define ELECTRONVOLT (ELECTRONCHARGE * VOLT)
#define ERG (1E-7 * JOULE)
#define FOE (1E+44 * JOULE)
#define AAABATTERYCHARGE (2.1 * AH)
#define AAABATTERYVOLTAGE (1.5 * VOLT)
#define AAABATTERY (AAABATTERYCHARGE * AAABATTERYVOLTAGE)
#define AAABATTERYENERGY (AAABATTERY)
#define AABATTERYCHARGE (2.7 * AH)
#define AABATTERYVOLTAGE (1.5 * VOLT)
#define AABATTERY (AABATTERYCHARGE * AABATTERYVOLTAGE)
#define AABATTERYENERGY (AABATTERY)
#define CBATTERYCHARGE (8.0 * AH)
#define CBATTERYVOLTAGE (1.5 * VOLT)
#define CBATTERY (CBATTERYCHARGE * CBATTERYVOLTAGE)
#define CBATTERYENERGY (CBATTERY)
#define DBATTERYCHARGE (12 * AH)
#define DBATTERYVOLTAGE (1.5 * VOLT)
#define DBATTERY (DBATTERYCHARGE * DBATTERYVOLTAGE)
#define DBATTERYENERGY (DBATTERY)
#define NINEVOLTCHARGE (0.565 * AH)
#define NINEVOLTVOLTAGE (9.0 * VOLT)
#define NINEVOLT (NINEVOLTCHARGE * NINEVOLTVOLTAGE)
#define NINEVOLTENERGY (NINEVOLT)
#define NINEVOLTBATTERYCHARGE (NINEVOLTCHARGE)
#define NINEVOLTBATTERYVOLTAGE (NINEVOLTVOLTAGE)
#define NINEVOLTBATTERY \
      (NINEVOLTBATTERYCHARGE * NINEVOLTBATTERYVOLTAGE)
#define NINEVOLTBATTERYENERGY (NINEVOLTBATTERY)
#define PHONEBATTERYCHARGE (3.0 * AH)
#define PHONEBATTERYVOLTAGE (3.8 * VOLT)
#define PHONEBATTERY (PHONEBATTERYCHARGE * PHONEBATTERYVOLTAGE)
#define PHONEBATTERYENERGY (PHONEBATTERY)
#define CARBATTERYCHARGE (45.0 * AH)
#define CARBATTERYVOLTAGE (12.0 * VOLT)
#define CARBATTERY (CARBATTERYCHARGE * CARBATTERYVOLTAGE)
#define CARBATTERYENERGY (CARBATTERY)
#define MICROWAVEHz (2.45E+9 / SECOND)
#define MICROWAVEWAVELENGTH (LIGHT / MICROWAVEHz)
#define MICROWAVEWAVENUMBER (1.0 / MICROWAVEWAVELENGTH)
#define MICROWAVEENERGY (PLANCK * MICROWAVEHz)
#define LFHz (1.00E+5 / SECOND)
#define LFWAVELENGTH (LIGHT / LFHz)
#define LFWAVENUMBER (1.0 / LFWAVELENGTH)
#define LFENERGY (PLANCK * LFHz)
#define MFHz (1.00E+6 / SECOND)
#define MFWAVELENGTH (LIGHT / MFHz)
#define MFWAVENUMBER (1.0 / MFWAVELENGTH)
#define MFENERGY (PLANCK * MFHz)
#define HFHz (1.00E+7 / SECOND)
#define HFWAVELENGTH (LIGHT / HFHz)
#define HFWAVENUMBER (1.0 / HFWAVELENGTH)
#define HFENERGY (PLANCK * HFHz)
#define VHFHz (1.00E+8 / SECOND)
#define VHFWAVELENGTH (LIGHT / VHFHz)
#define VHFWAVENUMBER (1.0 / VHFWAVELENGTH)
#define VHFENERGY (PLANCK * VHFHz)
#define UHFHz (1.00E+9 / SECOND)
#define UHFWAVELENGTH (LIGHT / UHFHz)
#define UHFWAVENUMBER (1.0 / UHFWAVELENGTH)
#define UHFENERGY (PLANCK * UHFHz)
#define SHFHz (1.00E+10 / SECOND)
#define SHFWAVELENGTH (LIGHT / SHFHz)
#define SHFWAVENUMBER (1.0 / SHFWAVELENGTH)
#define SHFENERGY (PLANCK * SHFHz)
#define EHFHz (1.00E+11 / SECOND)
#define EHFWAVELENGTH (LIGHT / EHFHz)
#define EHFWAVENUMBER (1.0 / EHFWAVELENGTH)
#define EHFENERGY (PLANCK * EHFHz)
#define THFHz (1.00E+12 / SECOND)
#define THFWAVELENGTH (LIGHT / THFHz)
#define THFWAVENUMBER (1.0 / THFWAVELENGTH)
#define THFENERGY (PLANCK * THFHz)
#define FIRHz (1.00E+12 / SECOND)
#define FIRWAVELENGTH (LIGHT / FIRHz)
#define FIRWAVENUMBER (1.0 / FIRWAVELENGTH)
#define FIRENERGY (PLANCK * FIRHz)
#define MIRHz (1.00E+13 / SECOND)
#define MIRWAVELENGTH (LIGHT / MIRHz)
#define MIRWAVENUMBER (1.0 / MIRWAVELENGTH)
#define MIRENERGY (PLANCK * MIRHz)
#define NIRHz (1.00E+14 / SECOND)
#define NIRWAVELENGTH (LIGHT / NIRHz)
#define NIRWAVENUMBER (1.0 / NIRWAVELENGTH)
#define NIRENERGY (PLANCK * NIRHz)
#define REDWAVELENGTH (7.00E-7 * METER)
#define REDHz (LIGHT / REDWAVELENGTH)
#define REDWAVENUMBER (1.0 / REDWAVELENGTH)
#define REDENERGY (PLANCK * REDHz)
#define ORANGEWAVELENGTH (6.20E-7 * METER)
#define ORANGEHz (LIGHT / ORANGEWAVELENGTH)
#define ORANGEWAVENUMBER (1.0 / ORANGEWAVELENGTH)
#define ORANGEENERGY (PLANCK * ORANGEHz)
#define YELLOWWAVELENGTH (5.80E-7 * METER)
#define YELLOWHz (LIGHT / YELLOWWAVELENGTH)
#define YELLOWWAVENUMBER (1.0 / YELLOWWAVELENGTH)
#define YELLOWENERGY (PLANCK * YELLOWHz)
#define YELLOWGREENHz (540E+12 / SECOND)
#define YELLOWGREENWAVELENGTH (LIGHT / YELLOWGREENHz)
#define YELLOWGREENWAVENUMBER (1.0 / YELLOWGREENWAVELENGTH)
#define YELLOWGREENENERGY (PLANCK * YELLOWGREENHz)
#define GREENWAVELENGTH (5.30E-7 * METER)
#define GREENHz (LIGHT / GREENWAVELENGTH)
#define GREENWAVENUMBER (1.0 / GREENWAVELENGTH)
#define GREENENERGY (PLANCK * GREENHz)
#define BLUEWAVELENGTH (5.00E-7 * METER)
#define BLUEHz (LIGHT / BLUEWAVELENGTH)
#define BLUEWAVENUMBER (1.0 / BLUEWAVELENGTH)
#define BLUEENERGY (PLANCK * BLUEHz)
#define VIOLETWAVELENGTH (4.20E-7 * METER)
#define VIOLETHz (LIGHT / VIOLETWAVELENGTH)
#define VIOLETWAVENUMBER (1.0 / VIOLETWAVELENGTH)
#define VIOLETENERGY (PLANCK * VIOLETHz)
#define NUVHz (1.00E+15 / SECOND)
#define NUVWAVELENGTH (LIGHT / NUVHz)
#define NUVWAVENUMBER (1.0 / NUVWAVELENGTH)
#define NUVENERGY (PLANCK * NUVHz)
#define EUVHz (1.00E+16 / SECOND)
#define EUVWAVELENGTH (LIGHT / EUVHz)
#define EUVWAVENUMBER (1.0 / EUVWAVELENGTH)
#define EUVENERGY (PLANCK * EUVHz)
#define UVAWAVELENGTH (3.60E-7 * METER)
#define UVAHz (LIGHT / UVAWAVELENGTH)
#define UVAWAVENUMBER (1.0 / UVAWAVELENGTH)
#define UVAENERGY (PLANCK * UVAHz)
#define UVBWAVELENGTH (3.00E-7 * METER)
#define UVBHz (LIGHT / UVBWAVELENGTH)
#define UVBWAVENUMBER (1.0 / UVBWAVELENGTH)
#define UVBENERGY (PLANCK * UVBHz)
#define UVCWAVELENGTH (1.90E-7 * METER)
#define UVCHz (LIGHT / UVCWAVELENGTH)
#define UVCWAVENUMBER (1.0 / UVCWAVELENGTH)
#define UVCENERGY (PLANCK * UVCHz)
#define SXHz (3.00E+17 / SECOND)
#define SXWAVELENGTH (LIGHT / SXHz)
#define SXWAVENUMBER (1.0 / SXWAVELENGTH)
#define SXENERGY (PLANCK * SXHz)
#define SXXWAVELENGTH (1.00E-9 * METER)
#define SXXHz (LIGHT / SXXWAVELENGTH)
#define SXXWAVENUMBER (1.0 / SXXWAVELENGTH)
#define SXXENERGY (PLANCK * SXXHz)
#define HXHz (1.00E+19 / SECOND)
#define HXWAVELENGTH (LIGHT / HXHz)
#define HXWAVENUMBER (1.0 / HXWAVELENGTH)
#define HXENERGY (PLANCK * HXHz)
#define GAMMAHz (1.00E+20 / SECOND)
#define GAMMAWAVELENGTH (LIGHT / GAMMAHz)
#define GAMMAWAVENUMBER (1.0 / GAMMAWAVELENGTH)
#define GAMMAENERGY (PLANCK * GAMMAHz)
#define TURN (TAU * RADIAN)
#define ARCDEGREE (TURN / 360.0)
#define ARCMINUTE (ARCDEGREE / 60.0)
#define ARCSECOND (ARCMINUTE / 60.0)
#define GRAD (TURN / 400.0)
#define ARCDEG (ARCDEGREE)
#define ARCMIN (ARCMINUTE)
#define ARCSEC (ARCSECOND)
#define SQUAREDEGREE (ARCDEGREE * ARCDEGREE)
#define SQDEG (SQUAREDEGREE)
#define SPHERESURFACE (2 * TAU * STERADIAN)
#define SHANNON (BIT)
#define NAT (BIT / LNTWO)
#define HARTLEY (LNTEN / LNTWO * BIT)
#define HART (HARTLEY)
#define DIT (HARTLEY)
#define BAN (HARTLEY)
#define RPM (TURN / MINUTE)
#define RPS (TURN / SECOND)
#define FINESTRUCTURE (ALPHA)
#define FINESTRUCTURE_ERR (ALPHA_ERR)
#define FINESTRUCTURE_REC (ALPHA_REC)
#define FINESTRUCTURE_REC_ERR (ALPHA_ERR)
#define MAGNETIC (2.0 * VONKLITZING * ALPHA / LIGHT)
#define MAGNETIC_ERR (ALPHA_ERR)
#define MU0 (MAGNETIC)
#define MU0_ERR (ALPHA_ERR)
#define ELECTRIC (1.0 / (LIGHT * LIGHT * MU0))
#define ELECTRIC_ERR (ALPHA_ERR)
#define EPSILON0 (ELECTRIC)
#define EPSILON0_ERR (ALPHA_ERR)
#define COULOMBCONST (1.0 / (2.0 * TAU * ELECTRIC))
#define COULOMBCONST_ERR (ALPHA_ERR)
#define PROTONRADIUS (8.414E-16 * METER)
#define PROTONRADIUS_ERR (2.2E-3)
#define MOLARMASS (0.99999999965 * GRAM / MOLE)
#define MOLARMASS_ERR (2.0E-10)
#define MOLARMASSX ((1.0 - 3.5E-10) * GRAM / MOLE)
#define MOLARMASSX_ERR (2.0E-10)
#define DALTON (MOLARMASS / AVOGADRO)
#define DALTON_ERR (MOLARMASS_ERR)
#define AMU (DALTON)
#define AMU_ERR (DALTON_ERR)
#define ATOMICMASSUNIT (DALTON)
#define ATOMICMASSUNIT_ERR (DALTON_ERR)
#define UAMU (DALTON)
#define UAMU_ERR (DALTON_ERR)
#define RYDBERGHz (RYDBERG)
#define RYDBERGWAVELENGTH (LIGHT / RYDBERGHz)
#define RYDBERGWAVENUMBER (1.0 / RYDBERGWAVELENGTH)
#define RYDBERGENERGY (PLANCK * RYDBERGHz)
#define ELECTRONMASSA \
      (2.0 * RYDBERGHz * PLANCK / (LIGHT * LIGHT * ALPHA *\
            ALPHA))
#define ELECTRONMASSA_ERR (2.0 * ALPHA_ERR)
#define ELECTRONMASS (5.48579909065E-4 * AMU)
#define ELECTRONMASS_ERR (2.9E-11)
#define ELECTRON_MASS (ELECTRONMASS * AVOGADRO)
#define ELECTRONENERGY (ELECTRONMASS * LIGHT * LIGHT)
#define ELECTRONHz (ELECTRONENERGY / PLANCK)
#define ELECTRONWAVELENGTH (LIGHT / ELECTRONHz)
#define UPQUARKMASS (0.00216 * AMU)
#define UPQUARKMASS_ERR (0.2)
#define UPQUARK_MASS (UPQUARKMASS * AVOGADRO)
#define UPQUARKENERGY (UPQUARKMASS * LIGHT * LIGHT)
#define UPQUARKHz (UPQUARKENERGY / PLANCK)
#define UPQUARKWAVELENGTH (LIGHT / UPQUARKHz)
#define DOWNQUARKMASS (0.00514 * AMU)
#define DOWNQUARKMASS_ERR (0.1)
#define DOWNQUARK_MASS (DOWNQUARKMASS * AVOGADRO)
#define DOWNQUARKENERGY (DOWNQUARKMASS * LIGHT * LIGHT)
#define DOWNQUARKHz (DOWNQUARKENERGY / PLANCK)
#define DOWNQUARKWAVELENGTH (LIGHT / DOWNQUARKHz)
#define MUONMASS (0.1134289259 * AMU)
#define MUONMASS_ERR (2.2E-8)
#define MUON_MASS (MUONMASS * AVOGADRO)
#define MUONENERGY (MUONMASS * LIGHT * LIGHT)
#define MUONHz (MUONENERGY / PLANCK)
#define MUONWAVELENGTH (LIGHT / MUONHz)
#define PROTONMASS (1.007276466812 * AMU)
#define PROTONMASS_ERR (8.9E-11)
#define PROTON_MASS (PROTONMASS * AVOGADRO)
#define PROTONENERGY (PROTONMASS * LIGHT * LIGHT)
#define PROTONHz (PROTONENERGY / PLANCK)
#define PROTONWAVELENGTH (LIGHT / PROTONHz)
#define NEUTRONMASS (1.00866491595 * AMU)
#define NEUTRONMASS_ERR (4.8E-10)
#define NEUTRON_MASS (NEUTRONMASS * AVOGADRO)
#define NEUTRONENERGY (NEUTRONMASS * LIGHT * LIGHT)
#define NEUTRONHz (NEUTRONENERGY / PLANCK)
#define NEUTRONWAVELENGTH (LIGHT / NEUTRONHz)
#define TAUMASS (1.90754 * AMU)
#define TAUMASS_ERR (6.8E-5)
#define TAU_MASS (TAUMASS * AVOGADRO)
#define TAUENERGY (TAUMASS * LIGHT * LIGHT)
#define TAUHz (TAUENERGY / PLANCK)
#define TAUWAVELENGTH (LIGHT / TAUHz)
#define DEUTERONMASS (2.013553212745 * AMU)
#define DEUTERONMASS_ERR (2.0E-11)
#define DEUTERON_MASS (DEUTERONMASS * AVOGADRO)
#define HELIONMASS (3.0149322467175 * AMU)
#define HELIONMASS_ERR (3.2E-11)
#define HELION_MASS (HELIONMASS * AVOGADRO)
#define TRITONMASS (3.01550071621 * AMU)
#define TRITONMASS_ERR (4.0E-11)
#define TRITON_MASS (TRITONMASS * AVOGADRO)
#define ALPHAMASS (4.001506179127 * AMU)
#define ALPHAMASS_ERR (1.6E-11)
#define ALPHA_MASS (ALPHAMASS * AVOGADRO)
#define HYDROGENRADIUS ((HBAR / (ELECTRONMASS * LIGHT * ALPHA)))
#define HYDROGENRADIUS_ERR (ALPHA_ERR)
#define BOHRRADIUS (HYDROGENRADIUS)
#define BOHRRADIUS_ERR (ALPHA_ERR)
#define HIHz (1420405751.7667 * HERTZ)
#define HIWAVELENGTH (LIGHT / HIHz)
#define HIWAVENUMBER (1.0 / HIWAVELENGTH)
#define HIENERGY (PLANCK * HIHz)
#define HYDROGENLINE (HIWAVELENGTH)
#define HYDROGENLINE_ERR (6.3E-13)
#define HI (LIGHT / HIHz)
#define HI_ERR (HYDROGENLINE_ERR)
#define PLANCKMASS (sqrt(HBAR * LIGHT / GRAVITATION))
#define PLANCKCHARGE (ELECTRONCHARGE / sqrt(ALPHA))
#define PLANCKENERGY (PLANCKMASS * LIGHT * LIGHT)
#define PLANCKTEMP (PLANCKENERGY / BOLTZMANN)
#define PLANCKLENGTH (HBAR / PLANCKMASS / LIGHT)
#define PLANCKTIME (PLANCKLENGTH / LIGHT)
#define STEFAN \
      ((TAU * TAU * LIGHT * BOLTZMANN) * ((BOLTZMANN / (LIGHT\
            * HBAR)) * (BOLTZMANN / (LIGHT * HBAR)) *\
            (BOLTZMANN / (LIGHT * HBAR))) / 240.0)
#define STEFAN_ERR 0
#define PINGPONGBALLRADIUS (0.02 * METER)
#define GOLFBALLRADIUS (0.02135 * METER)
#define TENNISBALLRADIUS (0.03325 * METER)
#define BASEBALLRADIUS (9.125 * INCH / TAU)
#define SOFTBALLRADIUS (12 * INCH / TAU)
#define SOCCERBALLRADIUS (0.69 * METER / TAU)
#define BASKETBALLRADIUS (0.75 * METER / TAU)
#define PINGPONGBALLMASS (2.7 * GRAM)
#define GOLFBALLMASS (45.93 * GRAM)
#define TENNISBALLMASS (57.7 * GRAM)
#define BASEBALLMASS (146.5 * GRAM)
#define SOFTBALLMASS (187 * GRAM)
#define BASKETBALLMASS (620 * GRAM)
#define SOCCERBALLMASS (430 * GRAM)
#define MARATHON (42195 * METER)
#define PENNYTHICKNESS (1.55E-3 * METER)
#define NICKELTHICKNESS (1.95E-3 * METER)
#define DIMETHICKNESS (1.35E-3 * METER)
#define QUARTERTHICKNESS (1.75E-3 * METER)
#define PENNYRADIUS (9.525E-3 * METER)
#define NICKELRADIUS (1.061E-2 * METER)
#define DIMERADIUS (8.955E-3 * METER)
#define QUARTERRADIUS (1.213E-2 * METER)
#define PENNYMASS (2.5 * GRAM)
#define NICKELMASS (5.0 * GRAM)
#define DIMEMASS (0.005 * POUND)
#define QUARTERMASS (0.0125 * POUND)
#define MOONMONTH (29.530587981 * DAY)
#define MILKYWAYAGE (8.3E+9 * JYEAR)
#define UNIVERSEAGE (13.799E+9 * JYEAR)
#define LIGHTYEAR (LIGHT * JYEAR)
#define ASTRONOMICALUNIT (AU)
#define PARSEC (1296000.0 * AU / TAU)
#define PROXIMACENTAURI (39.9E+15 * METER)
#define MILKYWAYRADIUS (6.0E+4 * LIGHTYEAR)
#define GALACTICCENTER (2.64E+4 * LIGHTYEAR)
#define UNIVERSERADIUS (UNIVERSEAGE * LIGHT)
#define MILKYWAYMASS (1.4E+42 * KILOGRAM)
#define UNIVERSEMASS (1.46E+53 * KILOGRAM)
#define SOLARCONSTANT (1361.0 * WATT / (METER * METER))
#define EINSTEIN \
      (4 * TAU * GRAVITATION / (LIGHT * LIGHT * LIGHT * LIGHT))
#define EINSTEIN_ERR (GRAVITATION_ERR)
#define HUBBLE (67.66E-3 * METER / (SECOND * PARSEC))
#define HUBBLE_ERR (6E-3)
#define BHMASSTEMP \
      ((HBAR * (LIGHT * LIGHT * LIGHT) / (4.0 * TAU *\
            GRAVITATION * BOLTZMANN)))
#define BHMASS_RADIUS (0.5 * LIGHT * LIGHT / GRAVITATION)
#define BHMASS3_LIFETIME \
      ((PLANCK * (LIGHT * LIGHT * LIGHT * LIGHT)) / (2560 *\
            TAU * TAU * GRAVITATION * GRAVITATION))
#define BHRADIUS2DENSITY (1.5 * BHMASS_RADIUS / TAU)
#define BHENTROPY_AREA \
      ((TAU * (LIGHT * LIGHT * LIGHT) * BOLTZMANN) / (4 *\
            PLANCK * GRAVITATION))
#define BEKENSTEININFORMATION \
      ((TAU * TAU * NAT) / (PLANCK * LIGHT))
#define BEKENSTEINENTROPY \
      ((TAU * TAU * BOLTZMANN) / (PLANCK * LIGHT))
#define ELEVATIONMAX (8848.0 * METER)
#define ELEVATIONMIN (- 10994.0 * METER)
#define KPGBOUNDARY (65.5E+6 * JYEAR)
#define TRJBOUNDARY (199.6E+6 * JYEAR)
#define MILKYWAYDAY (250.0E+6 * JYEAR)
#define PTRBOUNDARY (251.4E+6 * JYEAR)
#define NPBOUNDARY (542.0E+6 * JYEAR)
#define LIFEAGE (3.85E+9 * JYEAR)
#define GIANTIMPACT (4.533E+9 * JYEAR)
#define EARTHAGE (4.56717E+9 * JYEAR)
#define PPQ (1E-15)
#define PPT (1E-12)
#define PPB (1E-9)
#define PPM (1E-6)
#define MASS (KILOGRAM)
#define LENGTH (METER)
#define DISTANCE (LENGTH)
#define TEMPERATURE (KELVIN)
#define TIME (SECOND)
#define ANGLE (RADIAN)
#define SOLID_ANGLE (STERADIAN)
#define SPEED (LENGTH / TIME)
#define ACCELERATION (SPEED / TIME)
#define FORCE (MASS * ACCELERATION)
#define ENERGY (FORCE * LENGTH)
#define ACTION (ENERGY * TIME)
#define POWER (ENERGY / TIME)
#define AREA (LENGTH * LENGTH)
#define VOLUME (LENGTH * LENGTH * LENGTH)
#define DENSITY (MASS / VOLUME)
#define SPECIFICHEAT (ENERGY / (MASS * TEMPERATURE))
#define PRESSURE (FORCE / AREA)
#define VISCOSITY (FORCE * TIME / AREA)
#define FREQUENCY (1 / TIME)
#define CHARGE (AMPERE * SECOND)
#define CURRENT (CHARGE / TIME)
#define VOLTAGE (POWER / CURRENT)
#define RESISTANCE (VOLTAGE / CURRENT)
#define INDUCTANCE (RESISTANCE * TIME)
#define CAPACITANCE (CHARGE / VOLTAGE)
#define CONDUCTANCE (1.0 / RESISTANCE)
#define MAGNETICFLUX (VOLTAGE * TIME)
#define MAGNETICINDUCTION (MAGNETICFLUX / AREA)
double id(double xx);
double reci(double xx);
double neg(double xx);
double square(double xx);
double sq(double xx);
double sqinv(double xx);
double cube(double xx);
double cu(double xx);
double sign(double xx);
double stair(double xx);
double heaviside(double xx);
double divi(double numer
      , double denom
      , double def_val);
double clip(double xx);
double clip2(double xx
      , double xlow
      , double xhigh);
double clip2x(double xx
      , double xa
      , double xb);
double sba(double xx);
double ratio(double aa
      , double bb);
double horner(double xx
      , long deg
      , const double *coefh_arr_pc);
double chebeval(double xx
      , long deg
      , const double *cheb_arr_pc);
double ln(double xx);
double lg(double xx);
double log10(double xx);
double l10(double xx);
double fmody(double xx
      , double yymodulus);
double fmodu(double xx
      , double yymodulus);
double remquou(double xx
      , double yymodulus
      , double *ret_int_arr_p);
double fmods(double xx
      , double yymodulus);
double pow2(double expo);
double pow10(double expo);
double sigmoid(double xx);
double sigmoidinv(double xx);
double sigmoid3(double aa
      , double bb
      , double xx);
double taninv3(double aa
      , double bb
      , double xx);
double sigmoid3d(double aa
      , double bb
      , double xx);
double sqrtx(double xx);
double smooth(double xx);
double hypot(double xx
      , double yy);
double hypot1(double xx);
double hypot1inv(double xx);
double hypot3(double xx
      , double yy
      , double zz);
double topyh(double xx
      , double yy);
double topyh1(double xx);
long cnv_dbl2si16(double xx);
double k2tempc(double temp_k);
double tempc2k(double temp_c);
double tempc(double temp_c);
double k2tempf(double temp_k);
double tempf2k(double temp_f);
double tempf(double temp_f);
double k2tempr(double temp_k);
double tempr2k(double temp_r);
double tempr(double temp_r);
double tempf2tempc(double temp_f);
double tempc2tempf(double temp_c);
long iszero(double xx);
long iseven(double xx);
long isodd(double xx);
long ismult(double xx
      , double mult);
long ismultl(long xx
      , long mult);
long isgt(double xx
      , double yy);
long islt(double xx
      , double yy);
long isge(double xx
      , double yy);
long isle(double xx
      , double yy);
long ispos(double xx);
long isneg(double xx);
long iseq(double xx
      , double yy);
long isint(double xx);
long isnegint(double xx);
long isposint(double xx);
double ifzero(double cond
      , double tru_val
      , double fal_val);
long isalmostequal(double xx
      , double yy
      , double epsratio);
long iswithin(double xx
      , double yy
      , double delta);
long isbetweenx(double xx
      , double min_xx
      , double max_xx);
long isbetween(double xx
      , double min_xx
      , double max_xx);
long isleapyear(long gregyear);
long isss(double xx
      , double yy);
long issignsame(double xx
      , double yy);
long isfloorsame(double xx
      , double yy
      , double multy);
long magicset(void);
long magicnot(void);
long ismagic(long xx);
double rtoz(double xx);
double rtoi(double xx);
double bankers(double xx);
double round(double xx);
long iround(double xx);
double round2(double xx
      , double yy);
double roundy(double xx
      , double yy
      , double shf);
double rtomsd(double fs
      , long msds);
double rto125(double fs);
double floor2(double xx
      , double yy);
double ceil2(double xx
      , double yy);
double fmod2(double xx
      , double minn
      , double maxx);
double frac(double xx);
double trunc(double xx);
double fmul(double xx
      , double pp);
double dist(double xx
      , double mm);
double ddist(double xx
      , double mm);
double sinc(double xx_rad);
double sincinv(double yy);
double sincc(double xx_rad);
double versin(double xx_rad);
double haversin(double xx_rad);
double tur2deg(double xx_tur);
double deg2tur(double xx_deg);
double tur2rad(double xx_tur);
double rad2tur(double xx_rad);
double tur2sec(double xx_tur);
double sec2tur(double xx_sec);
double rad2deg(double xx_rad);
double deg2rad(double xx_deg);
double rad2sec(double xx_rad);
double sec2rad(double xx_sec);
double deg2sec(double xx_deg);
double sec2deg(double xx_sec);
double rad2dms(double xx_rads);
double rad2dms2(double xx_rads);
double dms2rad(double xx_dms);
double deg2dms(double xx_deg);
double dms2deg(double xx_dms);
double cot(double xx_rad);
double sec(double xx_rad);
double csc(double xx_rad);
double sininv(double xx);
double cosinv(double xx);
double taninv(double xx);
double cotinv(double xx);
double secinv(double xx);
double cscinv(double xx);
double sinh(double xx);
double cosh(double xx);
double tanh(double xx);
double coth(double xx);
double sech(double xx);
double csch(double xx);
double sinhinv(double xx);
double coshinv(double xx);
double tanhinv(double xx);
double cothinv(double xx);
double sechinv(double xx);
double cschinv(double xx);
double atan2h(double xx
      , double yy);
double atan2u(double xx
      , double yy);
double sind(double xx);
double sindinv(double xx);
double cosd(double xx);
double cosdinv(double xx);
double tand(double xx);
double tandinv(double xx);
double cotd(double xx);
double cotdinv(double xx);
double secd(double xx);
double secdinv(double xx);
double cscd(double xx);
double cscdinv(double xx);
double atan2d(double xx
      , double yy);
double sint(double xx);
double sintinv(double xx);
double cost(double xx);
double costinv(double xx);
double tant(double xx);
double tantinv(double xx);
double cott(double xx);
double cottinv(double xx);
double sect(double xx);
double sectinv(double xx);
double csct(double xx);
double csctinv(double xx);
double atan2t(double xx
      , double yy);
double ln1p(double xx);
double expm1(double xx);
double cosm1(double xx);
double lns(double xx);
double trip(double xx);
double cbrt(double yy);
double cuberoot(double xx);
double squareroot(double xx);
long print_contfra(double orig);
long print_contfrac(double orig);
long print_contfracd(double orig);
long print_num2char(long num);
long print_base_out(long num
      , long baset);
long print_base_outf(double num
      , long baset);
double f21(double aa
      , double bb
      , double cc
      , double zz);
double f11(double aa
      , double bb
      , double zz);
double wp(double xx);
double wm(double xx);
double wpinv(double zz);
double wminv(double zz);
double sinintegral(double xx);
double cosintegral(double xx);
double Ein(double xx);
double expintegrali(double xx);
double expintegraln(long nn
      , double xx);
double expintegral1(double xx);
double logintegral(double xx);
double carlsonRF(double xx
      , double yy
      , double zz);
double carlsonRC(double xx
      , double yy);
double carlsonRJ(double xx
      , double yy
      , double zz
      , double pp);
double carlsonRD(double xx
      , double yy
      , double zz);
long powi(long xx
      , long nn);
long atothenmodp(long aa
      , long nn
      , long pp);
double atothenmodx(double aa
      , double nn
      , double pp);
long ctz(long nn);
long gcd(long aa
      , long bb);
long gcda(long nn
      , const long *num_arr_pc);
long lcm(long aa
      , long bb);
long lcam(long aa
      , long bb);
long lcams(long aa
      , long bb);
long lcantim(long aa
      , long bb);
long factor(long nn
      , long *ret_fctr_arr_p);
long modulo(long xxn
      , long yymod);
long mods(long xxn
      , long yymod);
long pfl(long nn);
long pfg(long nn);
long isprime(long nn);
long primeprev(long pp);
long primenext(long pp);
long primecount(double xx);
long pcf(double xx);
long primecountx(double xx);
double eta(double xx);
double zeta(double xx);
double fibo3(long nn
      , double fib_a
      , double fib_b);
double fibo(long nn);
double fibox(double xx);
double fiboxinv(double yy);
double lucas(long nn);
double lucasx(double xx);
long fusc(long nn);
double Tn(long nn
      , double xx);
double Un(long nn
      , double xx);
double tri(double nn);
double triinv(double nn);
double polynum(double ss
      , double nn);
double polycnum(double ss
      , double nn);
double tetranum(double ss
      , double nn);
double tetracnum(double ss
      , double nn);
double minkowski(double xx);
double cantorxx(double bb
      , double ee
      , double xx);
double cantor(double xx);
double cantorul(double bb
      , double ee
      , double xx);
double cantorll(double bb
      , double ee
      , double xx);
long dlogx(long aa
      , long bb
      , long nn);
long dlog(long aa
      , long bb
      , long nn);
long dlog1(long aa
      , long nn);
long mertens(long nn);
long has_primitiveroot_f(long nf
      , const long *fac_arr_pc);
long sigma0_f(long nf
      , const long *fac_arr_pc);
long sigma1_f(long nf
      , const long *fac_arr_pc);
long sigma_f(long powy
      , long nf
      , const long *fac_arr_pc);
long ispractical_f(long nf
      , const long *fac_arr_pc);
long issquarefree_f(long nf
      , const long *fac_arr_pc);
long totient_f(long nf
      , const long *fac_arr_pc);
long mobius_f(long nf
      , const long *fac_arr_pc);
long prime0_f(long nf
      , const long *fac_arr_pc);
long print_factor(long nn);
long mobius(long nn);
long isprimitiveroot(long aa
      , long nn);
long prime0(long nn);
long prime1(long nn);
long sigma0(long nn);
long sigma1(long nn);
long sigma(long powy
      , long nn);
long totient(long nn);
long has_primitiveroot(long nn);
long issquarefree(long nn);
long ispractical(long nn);
long primitiveroot(long nn);
long carmichael(long nn);
long znorder(long aa
      , long nn);
long repetendlen(long denm
      , long basee);
long print_kevy(long den
      , long start
      , long basee);
long eulerphi(long nn);
long znorder__1(long bb
      , long mdls);
long bkn(long bb
      , long kk);
long bkbn(long bb
      , long kk
      , long bbb);
double lix(double xx);
double lixinv(double yy);
double primenth__1(double nn);
double reimann(double nn);
long primenth(long nn);
double bessJv(double vv
      , double xx);
double bessYv(double vv
      , double xx);
double bessI0(double xx);
double bessI1(double xx);
double bessK0(double arg);
double bessK1(double arg);
double bessJn_ps(long nn
      , double xx);
double bessIn_ps(long nn
      , double xx);
double bessJ0(double xx);
double bessJ1(double xx);
double bessY0(double xx);
double bessY1(double xx);
double bessIn(long nn
      , double xx);
double bessJn(long nn
      , double xx);
double bessYn(long nn
      , double xx);
double bessKn(long nn
      , double xx);
double bessYn_ps(long nn
      , double xx);
double bessY1__1(double xx);
double bess_jn(long nn
      , double xx);
double bess_yn(long nn
      , double xx);
double partition(long nn);
double partitionq(long nn);
long bitwisenot(long xx);
long bitwiseand(long xx
      , long yy);
long bitwiseor(long xx
      , long yy);
long bitwisexor(long xx
      , long yy);
long bitshiftl(long hexnumber
      , long shift_count);
long bitshiftr(long hexnumber
      , long shift_count);
long bits_count(long hexnumber);
long bits_ls1b(long orig);
long bits_ms1b(long orig);
long bits_ls1bpos(long orig);
long bits_ms1bpos(long orig);
long bits_assign(long orig
      , long value_to_set
      , long which_mask);
long bits_get(long vall
      , long mask);
long bits_set(long vall
      , long mask);
double erf(double xx);
double erfc(double xx);
double erfcx(double xx);
double erfcinv(double yy_orig);
double erfcxinv(double yy);
double erfinv(double yy);
double erf__1(double xx);
double erf__2(double xx);
double erf__3(double xx);
double erf__4(double xx);
double lgamma__1(double xx);
double lgammainv(double yy);
double lgamma(double zz);
double lgamma__2(double zz);
double lpermx(double nn
      , double rr);
double permx(double nn
      , double rr);
double lcombx(double nn
      , double rr);
double combx(double nn
      , double rr);
double birthdayx(double nn
      , double rr);
double tgamma__1(double xx);
double tgamma(double xx);
double tgammainv(double yy);
double tgamma__2(double xx);
double tgamma__3(double xx);
double tgamma__stirling(double xx);
double tgammadouble(double xx);
double ligamma(double aa
      , double xx);
double uigamma(double aa
      , double xx);
double rligamma(double aa
      , double xx);
double ruigamma(double aa
      , double xx);
double uigamma__1(double aa
      , double xx);
double uigammainv(double aa
      , double yy);
double ligammainv(double aa
      , double yy);
double lbeta(double aa
      , double bb);
double beta(double aa
      , double bb);
double betainc(double aa
      , double bb
      , double xx);
double betainc__1(double aa
      , double bb
      , double xx);
double digamma(double xx);
double digammainv(double yy);
double digamma__1(double xx);
double factorialinv(double yy);
double facinv(double yy);
double hn(double xx);
double hn__1(double xx);
double hnm(double xx
      , double mm);
double factorial(long nn);
double factorialdouble(long nn);
double fac(long nn);
double factorialt(long n_things
      , long r_each);
double comb(long n_things
      , long r_each);
double perm(long n_things
      , long r_each);
double combination(long n_things
      , long r_each);
double permutation(long n_things
      , long r_each);
double catalan(long nn);
double supercatalan(long nn);
double bell(long nn);
double bellx(double xxn);
double fubini(long nn);
long d2lt_d1(long xx
      , long yy);
long d1lt_d2(long nn
      , long *ret_arr_p);
long d2ur_d1(long xx
      , long yy);
long d1ur_d2(long nn
      , long *ret_arr_p);
long d2diamond_d1(long xx
      , long yy);
long d1diamond_d2(long nn
      , long *ret_arr_p);
long d2spiral_d1(long xx
      , long yy);
long d1spiral_d2(long nn
      , long *ret_arr_p);
long d2hypot_d1(long xx
      , long yy);
double binomialx(double xnn
      , double xkk);
long binomial(long nn
      , long kk);
double eulerian(long nn
      , long mm);
double entringer(long nn
      , long kk);
double zigzag(long nn);
double zig(long nn);
double zag(long nn);
double eulerx(long nn);
double ballot(double xmm
      , double xnn);
double ballots(double xmm
      , double xnn);
double stirling1(long nn
      , long kk);
double stirling2(long nn
      , long kk);
double bernoulli(long nn);
long bernoullin(long nn);
long bernoullid(long nn);
double birthday(double xnn
      , double xrr);
double birthdayinv(double xnn
      , double xprob);
long n2perm(long mm
      , long nn
      , long *ret_perm_arr_p);
long n2comb(long mm
      , long nn
      , long rr
      , long *ret_comb_arr_p);
long days_in_month(long g_year
      , long g_month);
double sec2dhms(double seconds);
double day2dhms(double dayfrac);
double day2dhmsinv(double xx_hms);
double hms2day(double hourx
      , double minutex
      , double secondx);
double hour2day(double hourx);
double day2hour(double dayx);
double jd2kwt(double jjdtime);
double jd2j2k(double jjdtime);
double jd2uet(double jjdtime);
double kwt2jd(double kwttime);
double uet2jd(double uettime);
double j2k2jd(double jtwoktm);
double j2k2kwt(double jtwoktm);
double j2k2uet(double jtwoktm);
double kwt2j2k(double kwttime);
double kwt2uet(double kwttime);
double uet2kwt(double uettime);
double uet2j2k(double uettime);
long jd2dow(double jjd);
long j2k2dow(double jtwok);
double ymd2doy(long g_year
      , long g_month
      , double g_daymon);
double ymd2j2k(double g_year
      , double g_month
      , double g_day);
double ymd2jd(double g_year
      , double g_month
      , double g_day);
long ymd2dow(long g_year
      , long g_month
      , double g_daymon);
long doomsday(long g_year);
double jd2ymdhms(double jjulid);
double j2k2ymdhms(double jtwokd);
double ymdhms_get(long indexp);
double jd2ymdhmsinv(void);
double print_jd264(double jjulid);
double ymdhms2jd(double ymdhmsx);
double ymdhms2j2k(double ymdhmsx);
double clocksec(double secnds);
double clockmin(double secnds);
double clockhour(double secnds);
double clocksum(double secnds);
double clockstdev(double secnds);
long date_easter(long g_year);
double date_rosh_hashanah(long g_year);
double jewish2jdx(long hebyear);
double date_pesach(long g_year);
long g2jewish(long g_year);
long jewish2g(long hebyear);
long isjewishleap(long hebyear);
long jewish_months_in_year(long hebyear);
long jewish_yearlength(long hebyear);
double jewish2jd(long hebyear);
long isjewish8short(long hebyear);
long isjewish9short(long hebyear);
long jewish_monthlength(long hebyear
      , long hebmonth);
long jewish_monthbegin(long hebyear
      , long hmonth);
double jewishymd2jd(long hebyear
      , long hebmonth
      , double hebday);
double amean(double xa
      , double xb);
double amean1(double xa);
double lmean(double xa
      , double xb);
double lmean1(double xa);
double pmean(double pp
      , double xa
      , double xb);
double gmean(double xa
      , double xb);
double gmean1(double xa);
double hmean(double xa
      , double xb);
double hmean1(double xa);
double qmean(double xa
      , double xb);
double qmean1(double xa);
double heronianmean(double xa
      , double xb);
double heronianmean1(double xa);
double agmean(double xa
      , double xb);
double agmean1(double xa);
double ahmean(double xa
      , double xb);
double ahmean1(double xa);
double almean(double xa
      , double xb);
double almean1(double xa);
double aqmean(double xa
      , double xb);
double aqmean1(double xa);
double ghmean(double xa
      , double xb);
double ghmean1(double xa);
double glmean(double xa
      , double xb);
double glmean1(double xa);
double gqmean(double xa
      , double xb);
double gqmean1(double xa);
double hlmean(double xa
      , double xb);
double hlmean1(double xa);
double hqmean(double xa
      , double xb);
double hqmean1(double xa);
double lqmean(double xa
      , double xb);
double lqmean1(double xa);
double agmean__1(double xa
      , double xb);
double aghmean(double xa
      , double xb
      , double xc);
double rms(double xa
      , double xb);
double agmean1inv(double yy);
double ghmean1inv(double yy);
double contraharmonic(long nn
      , const double *val_arr_pc);
double rand_init_array(long seed_size
      , const long *seed_arr_pc);
double rand_init(double seed);
long randl(long nn);
double randd(void);
double int_pdf(double nn
      , double xx);
double int_cdf(double nn
      , double xx);
double int_quantile(double nn
      , double prbx);
long int_rand(double nn);
double normal_pdf(double xx);
double normal_cdf(double xx);
double normal_cdf__1(double xx);
double normal_quantile(double prbx);
double normal_rand(void);
double gau_pdf(double xx);
double gau_cdf(double xx);
double gau_quantile(double prbx);
double gau_rand(void);
double normal_quantile__1(double prbx);
double uni_pdf(double max_x
      , double xx);
double uni_cdf(double max_x
      , double xx);
double uni_quantile(double max_x
      , double prbx);
double uni_rand(double max_x);
double exp_pdf(double scal
      , double xx);
double exp_cdf(double scal
      , double xx);
double exp_quantile(double scal
      , double prbx);
double exp_rand(double scal);
double poi_pdf(double meanx
      , double xx);
double poi_cdf(double meanx
      , double xx);
double poi_quantile(double meanx
      , double prbx);
long poi_rand(double meanx);
double geo_pdf(double prob
      , double kk);
double geo_cdf(double prob
      , double kk);
double geo_quantile(double prob
      , double prbx);
long geo_rand(double prob);
double cauchy_pdf(double scal
      , double xx);
double cauchy_cdf(double scal
      , double xx);
double cauchy_quantile(double scal
      , double prbx);
double cauchy_rand(double scal);
double logistic_pdf(double ss
      , double xx);
double logistic_cdf(double ss
      , double xx);
double logistic_quantile(double ss
      , double prbx);
double logistic_rand(double ss);
double tri_pdf(double pp
      , double xx);
double tri_cdf(double pp
      , double xx);
double tri_quantile(double pp
      , double prbx);
double tri_rand(double pp);
double trap_pdf(double para
      , double parb
      , double xx);
double trap_cdf(double para
      , double parb
      , double xx);
double trap_quantile(double para
      , double parb
      , double prbx);
double trap_rand(double para
      , double parb);
double pareto_pdf(double shap
      , double scal
      , double xx);
double pareto_cdf(double shap
      , double scal
      , double xx);
double pareto_quantile(double shap
      , double scal
      , double prbx);
double pareto_rand(double shap
      , double scal);
double gompertz_pdf(double shap
      , double scal
      , double xx);
double gompertz_cdf(double shap
      , double scal
      , double xx);
double gompertz_quantile(double shap
      , double scal
      , double prbx);
double gompertz_rand(double shap
      , double scal);
double zipf_pdf(double ss
      , long max_kk
      , long kk);
double zipf_cdf(double ss
      , long max_kk
      , long kk);
long zipf_quantile(double ss
      , long max_kk
      , double prbx);
long zipf_rand(double ss
      , long max_kk);
double beta_pdf(double shap_a
      , double shap_b
      , double xx);
double beta_cdf(double shap_a
      , double shap_b
      , double xx);
double beta_quantile(double shap_a
      , double shap_b
      , double prbx);
double beta_rand(double shap_a
      , double shap_b);
double gamma_pdf(double shap
      , double xx);
double gamma_cdf(double shap
      , double xx);
double gamma_rand(double shap);
double chisqr_pdf(double df
      , double xx);
double chisqr_cdf(double df
      , double xx);
double chisqr_rand(double df);
double binomial_pdf(double prob
      , long success
      , long trial);
double binomial_cdf(double prob
      , long success
      , long trial);
double binomial_rand(double prob
      , double rr);
double benford_pdf(long max_kk
      , long kk);
double benford_cdf(long max_kk
      , long kk);
long benford_rand(long max_kk);
double nbd_pdf(double prob
      , long rsuccesses
      , long kfailures);
double nbd_cdf(double prob
      , long rsuccesses
      , long kfailures);
long nbd_rand(double prob
      , long rsuccesses);
double polya_pdf(double prob
      , double rsuccesses
      , double kfailures);
double polya_cdf(double prob
      , double rsuccesses
      , double kfailures);
double polya_rand(double tt
      , double prob);
double zeta_pdf(double ss
      , long xx);
double zeta_cdf(double ss
      , long xx);
double ks_cdf(long nn
      , double xx);
double ks_a_cdf(double xx);
double ks_b_cdf(long nn
      , double xx);
double ks_quantile(double nn
      , double prbx);
double t_pdf(double dfn
      , double xx);
double t_cdf(double dfx
      , double xx);
double t_quantile(double dfx
      , double prbx);
double t_cdf__1(double dfx
      , double xx);
double t_quantile__1(double dfx
      , double prbx);
double f_cdf(long dfn_a
      , long dfn_b
      , double xx);
double f_quantile(long dfn_a
      , long dfn_b
      , double prbx);
double f_quantile__1(long dfn_a
      , long dfn_b
      , double prbx);
double mb_pdf(double aa
      , double xx);
double mb_cdf(double aa
      , double xx);
double maxwell_boltzmann_pdf(double temperature
      , double molecular_mass
      , double velocity);
double maxwell_boltzmann_cdf(double temperature
      , double molecular_mass
      , double velocity);
double maxwell_juttner_pdf(double temperature
      , double molecular_mass
      , double velocity);
double bb_pdf(double wavelen);
double blackbody_pdf(double wavelen);
long ints_rand(long nn
      , const double *prob_arr_pc);
double stdev2spread(double numm
      , double stdevx);
double spread2stdev(double numm
      , double spread);
double maxabs(long nn
      , const double *data_arr_pc);
double minabs(long nn
      , const double *data_arr_pc);
double maxabsoffset(double offset
      , long nn
      , const double *data_arr_pc);
double minabsoffset(double offset
      , long nn
      , const double *data_arr_pc);
double mini(long num
      , const double *data_arr_pc);
double maxi(long num
      , const double *data_arr_pc);
double maxmin(long num
      , const double *data_arr_pc
      , double *ret_maxmin_arr_p);
double min2(double value_a
      , double value_b);
double max2(double value_a
      , double value_b);
double minabs2(double value_a
      , double value_b);
double maxabs2(double value_a
      , double value_b);
double variance(long nn
      , const double *xx_arr_pc);
double mean(long nn
      , const double *xx_arr_pc);
long stts_init(long ix_hndl
      , double n_count
      , double meanx
      , double var
      , double minim
      , double maxim);
long stts_initx(long ix_hndl
      , double num_count
      , double meanx
      , double msq
      , double minim
      , double maxim);
long stts_reset(long ix_hndl);
long stts_new(void);
long stts_delete(long ix_hndl);
double sttscount(long ix_hndl);
double sttsmean(long ix_hndl);
double sttsmsq(long ix_hndl);
double sttsmax(long ix_hndl);
double sttsmin(long ix_hndl);
double sttsmagic(long ix_hndl);
double sttssum(long ix_hndl);
double sttsvar(long ix_hndl);
double sttsstdev(long ix_hndl);
double sttsstdevmean(long ix_hndl);
double sttsspread(long ix_hndl);
double stts_update(long ix_hndl
      , double new_data);
double stts_downdate(long ix_hndl
      , double old_data);
double stts_updatex(long ix_hndl
      , long nn
      , const double *data_arr_pc);
long stts_newx(long nn
      , const double *data_arr_pc);
long stts_shift(long ix_hndl
      , double data_shift);
long stts_scale(long ix_hndl
      , double xfactor);
long stts_copy(long hto
      , long hfrom);
long stts_update2(long ix_hnda
      , long ix_hndb);
long corr_new(void);
long corr_delete(long ix_chnd);
long corr_handlex(long ix_chnd);
long corr_handley(long ix_chnd);
double corr_update(long ix_chnd
      , double xx
      , double yy);
double corrslope(long ix_chnd);
double corry0(long ix_chnd);
double corrcorr(long ix_chnd);
double corrstderr(long ix_chnd);
double fit_poly(long num_points
      , const double *pts_arr_pc
      , double *ret_coeff_arr_p);
double parabola_solve(double xx_a
      , double yy_a
      , double xx_b
      , double yy_b
      , double xx_c
      , double yy_c);
double parabola_get(long ii_ind);
double parabola_roots(long ii_ind);
double parabola_yextrema(void);
double parabola_xaxis(void);
double parabola_realroots(void);
double circle_solve(double aa_x
      , double aa_y
      , double bb_x
      , double bb_y
      , double cc_x
      , double cc_y);
double circle_get(long ii_ind);
double fit_minmax(long num_points
      , const double *pt_arr_pc
      , double *ret_coeff_arr_p);
double fitx_minmax(long num_points
      , const double *pt_arr_pc
      , double *ret_arr_p);
double fit_minmax0(long num_points
      , const double *pts_arr_pc
      , double *ret_arr_p);
double fit_ls(long num_points
      , const double *pts_arr_pc
      , double *ret_arr_p);
double fit_ls0(long num_points
      , const double *pts_arr_pc
      , double *ret_lsz_arr_p);
double sqrt__1(double xx);
double sqrt__2(double xx);
double sqrt__3(double yy);
double nthroot__1(double xx
      , long kk);
double cossin_ev(long init_ii
      , double xx_rad
      , long addone_mult);
double cos__1(double xx_rad);
double cosm1__1(double xx_rad);
double sin__1(double xx_rad);
double sinc__1(double xx_rad);
double exp__1(double xx);
double exp__2(double xx);
double ln__1(double xx);
double ln__2(double xx);
double euler__1(void);
double sphere_d(double lata_rad
      , double lona_rad
      , double latb_rad
      , double lonb_rad);
double great_circle_distance(double lata_rad
      , double lona_rad
      , double latb_rad
      , double lonb_rad);
double sphere_distance(double lata_rad
      , double lona_rad
      , double latb_rad
      , double lonb_rad
      , double *ret_dirs_arr_p);
double ellipsoid_distance(double flat
      , double lata_rad
      , double lona_rad
      , double latb_rad
      , double lonb_rad
      , double *ret_dirs_arr_p);
double ellipsoid_destination(double flat
      , double lata_rad
      , double lona_rad
      , double heading_rad
      , double distance
      , double *ret_loc_arr_p);
double shc_shftpoles2steps(long shft
      , long poles);
double shc_steps2shft(double steps);
double shc_steps2shftinv(double shft);
double shc_shft2steps(long shft);
double m2k(double mm);
double k2m(double kk);
double m2b(double mm);
double b2m(double bb);
double elliptic1(double mm);
double ellipticK(double kk);
double elliptic1__1(double mm);
double elliptic1i(double mm
      , double circ_rad);
double ellipticF(double kk
      , double circ_rad);
double elliptic1i__1(double mm
      , double circ_rad);
double elliptic2(double mm);
double ellipticE(double kk);
double elliptic2__1(double mm);
double elliptic2i(double mm
      , double circ_rad);
double ellipticEi(double kk
      , double circ_rad);
double elliptic2i__1(double mm
      , double circ_rad);
double elliptic3(double nn
      , double mm);
double ellipticP(double kk
      , double circ_rad);
double elliptic3i(double nn
      , double mm
      , double circ_rad);
double ellipticPi(double nn
      , double kk
      , double circ_rad);
double elliptic3__1(double nn
      , double mm);
double elliptic3i__1(double nn
      , double mm
      , double circ_rad);
double jacobiphi(double mm
      , double elli_rad);
double ell2cir(double mm
      , double elli_rad);
double cir2ell(double mm
      , double circ_rad);
double jacobicir(double mm);
double dn(double mm
      , double elli_rad);
double cn(double mm
      , double elli_rad);
double sn(double mm
      , double elli_rad);
double cd(double mm
      , double elli_rad);
double sd(double mm
      , double elli_rad);
double nd(double mm
      , double elli_rad);
double dc(double mm
      , double elli_rad);
double nc(double mm
      , double elli_rad);
double sc(double mm
      , double elli_rad);
double ds(double mm
      , double elli_rad);
double cs(double mm
      , double elli_rad);
double ns(double mm
      , double elli_rad);
long lv_ellpj(double mm
      , double elli_rad
      , double *ret_arr_p);
double sn__1(double mm
      , double elli_rad);
double cn__1(double mm
      , double elli_rad);
double dn__1(double mm
      , double elli_rad);
double nom(double mm);
double theta1(double mm
      , double zz);
double theta2(double mm
      , double zz);
double theta3(double mm
      , double zz);
double theta4(double mm
      , double zz);
double nevillethetac(double mm
      , double zz);
double nevillethetad(double mm
      , double zz);
double nevillethetan(double mm
      , double zz);
double nevillethetas(double mm
      , double zz);
double ellipsearea(double aa
      , double bb);
double ellipseecc(double aa
      , double bb);
double ellipsem(double aa
      , double bb);
double ellipseflatness(double aa
      , double bb);
double flat2ecc(double flt);
double ecc2flat(double ecc);
double ellipsecir__1(double aa
      , double bb);
double ellipsecir(double aa
      , double bb);
double epdf(double minvalx
      , double maxvalx
      , long nn
      , const double *data_arr_pc
      , long mm
      , double *ret_pdf_arr_p);
double ecdf(double minvalx
      , double maxvalx
      , long nn
      , const double *data_arr_pc
      , long mm
      , double *ret_cdf_arr_p);
double epdf2cdf(long nn
      , const double *pdf_arr_pc
      , double *ret_cdf_arr_p);
long search_check(long gg);
long search_search(long gg);
double blackbody(double wavelength
      , double temperk);
double blackbodymode(double temperk);
double blackbodypower(double temperk);
double pendulum(double len_m
      , double ang_offset_rad
      , double grav);
//  DDDDDDDDDDescription ----------------------- kw_description #
#define Kw_DESCRIPTION \
   "   Kw Constants: AAABATTERY AAABATTERYCHARGE AAABATTERYENER"\
   "GY AAABATTERYVOLTAGE AABATTERY AABATTERYCHARGE AABATTERYENE"\
   "RGY AABATTERYVOLTAGE ACCELERATION ACRE ACTION AH ALPHA ALPH"\
   "A_ERR ALPHA_MASS ALPHA_REC ALPHA_REC_ERR ALPHAMASS ALPHAMAS"\
   "S_ERR AMP AMPERE AMU AMU_ERR ANGLE APERY ARCDEG ARCDEGREE A"\
   "RCMIN ARCMINUTE ARCSEC ARCSECOND ARE AREA ASTRONOMICALUNIT "\
   "ATM ATMOSPHERE ATMOSPHERE_ERR ATOMICMASSUNIT ATOMICMASSUNIT"\
   "_ERR ATTO AU AU_ERR AVOGADRO AVOGADRO_ERR AVOGADRO_REC BAN "\
   "BAR BARN BARREL BASEBALLMASS BASEBALLRADIUS BASKETBALLMASS "\
   "BASKETBALLRADIUS BEKENSTEINENTROPY BEKENSTEININFORMATION BH"\
   "ENTROPY_AREA BHMASS3_LIFETIME BHMASS_RADIUS BHMASSTEMP BHRA"\
   "DIUS2DENSITY BIT BLUEENERGY BLUEHz BLUEWAVELENGTH BLUEWAVEN"\
   "UMBER BOHRRADIUS BOHRRADIUS_ERR BOLTZMANN BOLTZMANN_ERR BOL"\
   "TZMANN_REC BTU BTU_IT BTU_TH CAL CAL_IT CAL_TH CALORIE CAND"\
   "ELA CAPACITANCE CARAT CARBATTERY CARBATTERYCHARGE CARBATTER"\
   "YENERGY CARBATTERYVOLTAGE CBATTERY CBATTERYCHARGE CBATTERYE"\
   "NERGY CBATTERYVOLTAGE CENTI CHARGE CONDUCTANCE COULOMB COUL"\
   "OMBCONST COULOMBCONST_ERR CUP CURRENT DALTON DALTON_ERR DAY"\
   " DBATTERY DBATTERYCHARGE DBATTERYENERGY DBATTERYVOLTAGE DBL"\
   "EPS DBLMAN DBLMAX DBLMAXLN DBLSIG DECA DECI DEGC DEGF DEGR "\
   "DENSITY DEUTERON_MASS DEUTERONMASS DEUTERONMASS_ERR DIMEMAS"\
   "S DIMERADIUS DIMETHICKNESS DISTANCE DIT DOWNQUARK_MASS DOWN"\
   "QUARKENERGY DOWNQUARKHz DOWNQUARKMASS DOWNQUARKMASS_ERR DOW"\
   "NQUARKWAVELENGTH dvCs_ERR dvCsENERGY dvCsHz dvCsHz_REC dvCs"\
   "WAVELENGTH dvCsWAVENUMBER E EARTHAGE EARTHGRAVITYA EARTHGRA"\
   "VITYB EARTHSOLARDAY EHFENERGY EHFHz EHFWAVELENGTH EHFWAVENU"\
   "MBER EINSTEIN EINSTEIN_ERR ELECTRIC ELECTRIC_ERR ELECTRON_M"\
   "ASS ELECTRONCHARGE ELECTRONCHARGE_ERR ELECTRONCHARGE_REC EL"\
   "ECTRONENERGY ELECTRONHz ELECTRONMASS ELECTRONMASS_ERR ELECT"\
   "RONMASSA ELECTRONMASSA_ERR ELECTRONVOLT ELECTRONWAVELENGTH "\
   "ELEMENTARYCHARGE ELEMENTARYCHARGE_ERR ELEVATIONMAX ELEVATIO"\
   "NMIN ENERGY EPSILON0 EPSILON0_ERR ERG EULER EUVENERGY EUVHz"\
   " EUVWAVELENGTH EUVWAVENUMBER EXA EXBI FARAD FARADAY FARADAY"\
   "_ERR FEIGENBAUM FEMTO FINESTRUCTURE FINESTRUCTURE_ERR FINES"\
   "TRUCTURE_REC FINESTRUCTURE_REC_ERR FIRENERGY FIRHz FIRWAVEL"\
   "ENGTH FIRWAVENUMBER FLICK FLOZ FLTEPS FLTMAN FLTMAX FLTSIG "\
   "FOE FOOT FORCE FREQUENCY FT G G_ERR GALACTICCENTER GALLON G"\
   "AMMAENERGY GAMMAHz GAMMAWAVELENGTH GAMMAWAVENUMBER GAS GAS_"\
   "ERR GIANTIMPACT GIBI GIGA GOLFBALLMASS GOLFBALLRADIUS GRAD "\
   "GRAIN GRAM GRAVITATION GRAVITATION_ERR GRAVITATIONIERS GRAV"\
   "ITATIONNASA GRAVITY GRAVITY_ERR GREENENERGY GREENHz GREENWA"\
   "VELENGTH GREENWAVENUMBER GREGORIANYEAR GYEAR h h_ERR h_REC "\
   "HART HARTLEY HBAR HBAR_ERR HECTARE HECTO HELION_MASS HELION"\
   "MASS HELIONMASS_ERR HENRY HERTZ HFENERGY HFHz HFWAVELENGTH "\
   "HFWAVENUMBER HI HI_ERR HIENERGY HIHz HIWAVELENGTH HIWAVENUM"\
   "BER HORSEPOWER HOUR HP HPMETRIC HUBBLE HUBBLE_ERR HXENERGY "\
   "HXHz HXWAVELENGTH HXWAVENUMBER HYDROGENLINE HYDROGENLINE_ER"\
   "R HYDROGENRADIUS HYDROGENRADIUS_ERR INCH INDUCTANCE INHG IN"\
   "TMAX J2K J2KDAY JC JCENTURY JD JDAY JDSEC_AT_0GREGORIAN JDS"\
   "EC_AT_0J2K JDSEC_AT_0KWT JDSEC_AT_0UET JEWISH_FIRST_MONTH J"\
   "M JMILLENNIUM JOSEPHSON JOSEPHSON_ERR JOULE JULIANCENTURY J"\
   "ULIANDAY JULIANMILLENNIUM JULIANYEAR JY JYEAR K_AT_0TEMPC K"\
   "_AT_0TEMPF K_AT_0TEMPR kB kB_ERR kB_REC KCD KCD_ERR KELVIN "\
   "KG KGENERGY KGF KGHz KGWAVELENGTH KGWAVENUMBER KIBI KILO KI"\
   "LOGRAM KPGBOUNDARY KWT LB LBF LENGTH LFENERGY LFHz LFWAVELE"\
   "NGTH LFWAVENUMBER LIFEAGE LIGHT LIGHT_ERR LIGHT_REC LIGHTYE"\
   "AR LITER LITRE LNTEN LNTWO LUMEN LUX MACH MAGNETIC MAGNETIC"\
   "_ERR MAGNETICFLUX MAGNETICINDUCTION MARATHON MASS MEBI MEGA"\
   " METER METRE MFENERGY MFHz MFWAVELENGTH MFWAVENUMBER MICRO "\
   "MICROWAVEENERGY MICROWAVEHz MICROWAVEWAVELENGTH MICROWAVEWA"\
   "VENUMBER MILE MILKYWAYAGE MILKYWAYDAY MILKYWAYMASS MILKYWAY"\
   "RADIUS MILLI MINUTE MIRENERGY MIRHz MIRWAVELENGTH MIRWAVENU"\
   "MBER MM MMHG MOLARMASS MOLARMASS_ERR MOLARMASSX MOLARMASSX_"\
   "ERR MOLE MONTHS_IN_YEAR MOONMONTH MPH MPS MPSS MU0 MU0_ERR "\
   "MUON_MASS MUONENERGY MUONHz MUONMASS MUONMASS_ERR MUONWAVEL"\
   "ENGTH NANO NAT NEUTRON_MASS NEUTRONENERGY NEUTRONHz NEUTRON"\
   "MASS NEUTRONMASS_ERR NEUTRONWAVELENGTH NEWTON NICKELMASS NI"\
   "CKELRADIUS NICKELTHICKNESS NINEVOLT NINEVOLTBATTERY NINEVOL"\
   "TBATTERYCHARGE NINEVOLTBATTERYENERGY NINEVOLTBATTERYVOLTAGE"\
   " NINEVOLTCHARGE NINEVOLTENERGY NINEVOLTVOLTAGE NIRENERGY NI"\
   "RHz NIRWAVELENGTH NIRWAVENUMBER NPBOUNDARY NUVENERGY NUVHz "\
   "NUVWAVELENGTH NUVWAVENUMBER OHM ORANGEENERGY ORANGEHz ORANG"\
   "EWAVELENGTH ORANGEWAVENUMBER OUNCE PA PARSEC PEBI PENNYMASS"\
   " PENNYRADIUS PENNYTHICKNESS PETA PHI PHONEBATTERY PHONEBATT"\
   "ERYCHARGE PHONEBATTERYENERGY PHONEBATTERYVOLTAGE PI PICO PI"\
   "NGPONGBALLMASS PINGPONGBALLRADIUS PINT PLANCK PLANCK_ERR PL"\
   "ANCK_REC PLANCKBAR PLANCKBAR_ERR PLANCKCHARGE PLANCKENERGY "\
   "PLANCKLENGTH PLANCKMASS PLANCKTEMP PLANCKTIME POINT POUND P"\
   "OWER PPB PPM PPQ PPT PRESSURE PROTON_MASS PROTONENERGY PROT"\
   "ONHz PROTONMASS PROTONMASS_ERR PROTONRADIUS PROTONRADIUS_ER"\
   "R PROTONWAVELENGTH PROXIMACENTAURI PSI PTRBOUNDARY QUART QU"\
   "ARTERMASS QUARTERRADIUS QUARTERTHICKNESS RAD RADIAN REDENER"\
   "GY REDHz REDWAVELENGTH REDWAVENUMBER RESISTANCE RPM RPS RYD"\
   "BERG RYDBERG_ERR RYDBERGENERGY RYDBERGHz RYDBERGWAVELENGTH "\
   "RYDBERGWAVENUMBER SECOND SHANNON SHFENERGY SHFHz SHFWAVELEN"\
   "GTH SHFWAVENUMBER SI16MAX SI16MIN SI32MAX SI32MIN SIEMENS S"\
   "OCCERBALLMASS SOCCERBALLRADIUS SOFTBALLMASS SOFTBALLRADIUS "\
   "SOLARCONSTANT SOLID_ANGLE SPECIFICHEAT SPEED SPHERESURFACE "\
   "SQDEG SQRTTWO SQUAREDEGREE STANDARDATMOSPHERE STANDARDGRAVI"\
   "TY STEFAN STEFAN_ERR STERADIAN SXENERGY SXHz SXWAVELENGTH S"\
   "XWAVENUMBER SXXENERGY SXXHz SXXWAVELENGTH SXXWAVENUMBER TAU"\
   " TAU_MASS TAUENERGY TAUHz TAUMASS TAUMASS_ERR TAUWAVELENGTH"\
   " TBLSP TEBI TEMPERATURE TENNISBALLMASS TENNISBALLRADIUS TER"\
   "A TESLA THFENERGY THFHz THFWAVELENGTH THFWAVENUMBER TIME TO"\
   "N TONNE TORR TRITON_MASS TRITONMASS TRITONMASS_ERR TRJBOUND"\
   "ARY TSP TT_AT_0TAI TT_AT_0UT1 TURN UAMU UAMU_ERR UET UHFENE"\
   "RGY UHFHz UHFWAVELENGTH UHFWAVENUMBER UI16MAX UI32MAX UNITG"\
   "M UNIVERSEAGE UNIVERSEMASS UNIVERSERADIUS UPQUARK_MASS UPQU"\
   "ARKENERGY UPQUARKHz UPQUARKMASS UPQUARKMASS_ERR UPQUARKWAVE"\
   "LENGTH UVAENERGY UVAHz UVAWAVELENGTH UVAWAVENUMBER UVBENERG"\
   "Y UVBHz UVBWAVELENGTH UVBWAVENUMBER UVCENERGY UVCHz UVCWAVE"\
   "LENGTH UVCWAVENUMBER VHFENERGY VHFHz VHFWAVELENGTH VHFWAVEN"\
   "UMBER VIOLETENERGY VIOLETHz VIOLETWAVELENGTH VIOLETWAVENUMB"\
   "ER VISCOSITY VOLT VOLTAGE VOLUME VONKLITZING VONKLITZING_ER"\
   "R WATT WEBER WEEK YARD YELLOWENERGY YELLOWGREENENERGY YELLO"\
   "WGREENHz YELLOWGREENWAVELENGTH YELLOWGREENWAVENUMBER YELLOW"\
   "Hz YELLOWWAVELENGTH YELLOWWAVENUMBER YOBI YOCTO YOTTA ZEBI "\
   "ZEPTO ZETTA"\
   "\n"\
   "   Kw 0-ary Functions: corr_new euler__1 gau_rand jd2ymdhms"\
   "inv magicnot magicset normal_rand parabola_realroots parabo"\
   "la_xaxis parabola_yextrema randd stts_new timee"\
   "\n"\
   "   Kw 1-ary Functions: abs agmean1 agmean1inv ahmean1 almea"\
   "n1 amean1 aqmean1 b2m bankers bb_pdf bell bellx benford_ran"\
   "d bernoulli bernoullid bernoullin bessI0 bessI1 bessJ0 bess"\
   "J1 bessK0 bessK1 bessY0 bessY1 bessY1__1 bits_count bits_ls"\
   "1b bits_ls1bpos bits_ms1b bits_ms1bpos bitwisenot blackbody"\
   "_pdf blackbodymode blackbodypower cantor carmichael catalan"\
   " cauchy_rand cbrt ceil chisqr_rand circle_get clip clockhou"\
   "r clockmin clocksec clockstdev clocksum cnv_dbl2si16 corr_d"\
   "elete corr_handlex corr_handley corrcorr corrslope corrstde"\
   "rr corry0 cos cos__1 cosd cosdinv cosh coshinv cosintegral "\
   "cosinv cosm1 cosm1__1 cost costinv cot cotd cotdinv coth co"\
   "thinv cotinv cott cottinv csc cscd cscdinv csch cschinv csc"\
   "inv csct csctinv ctz cu cube cuberoot date_easter date_pesa"\
   "ch date_rosh_hashanah day2dhms day2dhmsinv day2hour deg2dms"\
   " deg2rad deg2sec deg2tur digamma digamma__1 digammainv dms2"\
   "deg dms2rad doomsday ecc2flat Ein elliptic1 elliptic1__1 el"\
   "liptic2 elliptic2__1 ellipticE ellipticK erf erf__1 erf__2 "\
   "erf__3 erf__4 erfc erfcinv erfcx erfcxinv erfinv eta eulerp"\
   "hi eulerx exp exp__1 exp__2 exp_rand expintegral1 expintegr"\
   "ali expm1 fac facinv factorial factorialdouble factorialinv"\
   " fibo fibox fiboxinv flat2ecc floor frac fubini fusc g2jewi"\
   "sh gamma_rand gau_cdf gau_pdf gau_quantile geo_rand ghmean1"\
   " ghmean1inv glmean1 gmean1 gqmean1 has_primitiveroot havers"\
   "in heaviside heronianmean1 hlmean1 hmean1 hn hn__1 hour2day"\
   " hqmean1 hypot1 hypot1inv id int_rand iround iseven isint i"\
   "sjewish8short isjewish9short isjewishleap isleapyear ismagi"\
   "c isneg isnegint isodd ispos isposint ispractical isprime i"\
   "ssquarefree iszero j2k2dow j2k2jd j2k2kwt j2k2uet j2k2ymdhm"\
   "s jacobicir jd2dow jd2j2k jd2kwt jd2uet jd2ymdhms jewish2g "\
   "jewish2jd jewish2jdx jewish_months_in_year jewish_yearlengt"\
   "h k2m k2tempc k2tempf k2tempr ks_a_cdf kwt2j2k kwt2jd kwt2u"\
   "et l10 lg lgamma lgamma__1 lgamma__2 lgammainv lix lixinv l"\
   "mean1 ln ln1p ln__1 ln__2 lns log log10 logintegral logisti"\
   "c_rand lqmean1 lucas lucasx m2b m2k mertens minkowski mobiu"\
   "s neg nom normal_cdf normal_cdf__1 normal_pdf normal_quanti"\
   "le normal_quantile__1 parabola_get parabola_roots partition"\
   " partitionq pcf pfg pfl poi_rand pow10 pow2 prime0 prime1 p"\
   "rimecount primecountx primenext primenth primenth__1 primep"\
   "rev primitiveroot print_contfra print_contfrac print_contfr"\
   "acd print_factor print_jd264 print_num2char qmean1 rad2deg "\
   "rad2dms rad2dms2 rad2sec rad2tur rand_init randl reci reima"\
   "nn round rto125 rtoi rtoz sba search_check search_search se"\
   "c sec2deg sec2dhms sec2rad sec2tur secd secdinv sech sechin"\
   "v secinv sect sectinv shc_shft2steps shc_steps2shft shc_ste"\
   "ps2shftinv sigma0 sigma1 sigmoid sigmoidinv sign sin sin__1"\
   " sinc sinc__1 sincc sincinv sind sindinv sinh sinhinv sinin"\
   "tegral sininv sint sintinv smooth sq sqinv sqrt sqrt__1 sqr"\
   "t__2 sqrt__3 sqrtx square squareroot stair stts_delete stts"\
   "_reset sttscount sttsmagic sttsmax sttsmean sttsmin sttsmsq"\
   " sttsspread sttsstdev sttsstdevmean sttssum sttsvar superca"\
   "talan tan tand tandinv tanh tanhinv taninv tant tantinv tem"\
   "pc tempc2k tempc2tempf tempf tempf2k tempf2tempc tempr temp"\
   "r2k tgamma tgamma__1 tgamma__2 tgamma__3 tgamma__stirling t"\
   "gammadouble tgammainv topyh1 totient tri tri_rand triinv tr"\
   "ip trunc tur2deg tur2rad tur2sec uet2j2k uet2jd uet2kwt uni"\
   "_rand versin wm wminv wp wpinv ymdhms2j2k ymdhms2jd ymdhms_"\
   "get zag zeta zig zigzag"\
   "\n"\
   "   Kw 2-ary Functions: agmean agmean__1 ahmean almean amean"\
   " aqmean atan2 atan2d atan2h atan2t atan2u ballot ballots be"\
   "nford_cdf benford_pdf bess_jn bess_yn bessIn bessIn_ps bess"\
   "Jn bessJn_ps bessJv bessKn bessYn bessYn_ps bessYv beta bet"\
   "a_rand binomial binomial_rand binomialx birthday birthdayin"\
   "v birthdayx bits_get bits_set bitshiftl bitshiftr bitwisean"\
   "d bitwiseor bitwisexor bkn blackbody carlsonRC cauchy_cdf c"\
   "auchy_pdf cauchy_quantile cd ceil2 chisqr_cdf chisqr_pdf ci"\
   "r2ell cn cn__1 comb combination combx contraharmonic cs d1d"\
   "iamond_d2 d1lt_d2 d1spiral_d2 d1ur_d2 d2diamond_d1 d2hypot_"\
   "d1 d2lt_d1 d2spiral_d1 d2ur_d1 days_in_month dc ddist dist "\
   "dlog1 dn dn__1 ds ell2cir ellipsearea ellipsecir ellipsecir"\
   "__1 ellipseecc ellipseflatness ellipsem elliptic1i elliptic"\
   "1i__1 elliptic2i elliptic2i__1 elliptic3 elliptic3__1 ellip"\
   "ticEi ellipticF ellipticP entringer eulerian exp_cdf exp_pd"\
   "f exp_quantile expintegraln factor factorialt floor2 fmod f"\
   "mods fmodu fmody fmul gamma_cdf gamma_pdf gcd gcda geo_cdf "\
   "geo_pdf geo_quantile ghmean glmean gmean gompertz_rand gqme"\
   "an has_primitiveroot_f heronianmean hlmean hmean hnm hqmean"\
   " hypot int_cdf int_pdf int_quantile ints_rand iseq isge isg"\
   "t isle islt ismult ismultl ispractical_f isprimitiveroot is"\
   "signsame issquarefree_f isss jacobiphi jewish_monthbegin je"\
   "wish_monthlength ks_b_cdf ks_cdf ks_quantile lbeta lcam lca"\
   "ms lcantim lcm lcombx ligamma ligammainv lmean logistic_cdf"\
   " logistic_pdf logistic_quantile lpermx lqmean max2 maxabs m"\
   "axabs2 maxi mb_cdf mb_pdf mean min2 minabs minabs2 mini mob"\
   "ius_f mods modulo nbd_rand nc nd nevillethetac nevilletheta"\
   "d nevillethetan nevillethetas ns nthroot__1 pareto_rand per"\
   "m permutation permx poi_cdf poi_pdf poi_quantile polya_rand"\
   " polycnum polynum pow powi prime0_f print_base_out print_ba"\
   "se_outf qmean rand_init_array ratio repetendlen rligamma rm"\
   "s round2 rtomsd ruigamma sc sd shc_shftpoles2steps sigma si"\
   "gma0_f sigma1_f sn sn__1 spread2stdev stdev2spread stirling"\
   "1 stirling2 stts_copy stts_downdate stts_newx stts_scale st"\
   "ts_shift stts_update stts_update2 t_cdf t_cdf__1 t_pdf t_qu"\
   "antile t_quantile__1 tetracnum tetranum theta1 theta2 theta"\
   "3 theta4 Tn topyh totient_f trap_rand tri_cdf tri_pdf tri_q"\
   "uantile uigamma uigamma__1 uigammainv Un uni_cdf uni_pdf un"\
   "i_quantile variance zeta_cdf zeta_pdf zipf_rand znorder zno"\
   "rder__1"\
   "\n"\
   "   Kw 3-ary Functions: aghmean atothenmodp atothenmodx beta"\
   "_cdf beta_pdf beta_quantile betainc betainc__1 binomial_cdf"\
   " binomial_pdf bits_assign bkbn cantorll cantorul cantorxx c"\
   "arlsonRD carlsonRF chebeval clip2 clip2x corr_update cossin"\
   "_ev divi dlog dlogx elliptic3i elliptic3i__1 ellipticPi epd"\
   "f2cdf f11 f_cdf f_quantile f_quantile__1 fibo3 fit_ls fit_l"\
   "s0 fit_minmax fit_minmax0 fit_poly fitx_minmax fmod2 gomper"\
   "tz_cdf gompertz_pdf gompertz_quantile hms2day horner hypot3"\
   " ifzero isalmostequal isbetween isbetweenx isfloorsame iswi"\
   "thin jewishymd2jd lv_ellpj maxabsoffset maxmin maxwell_bolt"\
   "zmann_cdf maxwell_boltzmann_pdf maxwell_juttner_pdf minabso"\
   "ffset n2perm nbd_cdf nbd_pdf pareto_cdf pareto_pdf pareto_q"\
   "uantile pendulum pmean polya_cdf polya_pdf print_kevy remqu"\
   "ou roundy sigma_f sigmoid3 sigmoid3d stts_updatex taninv3 t"\
   "rap_cdf trap_pdf trap_quantile ymd2dow ymd2doy ymd2j2k ymd2"\
   "jd zipf_cdf zipf_pdf zipf_quantile"\
   "\n"\
   "   Kw 4-ary Functions: carlsonRJ f21 great_circle_distance "\
   "n2comb sphere_d"\
   "\n"\
   "   Kw 5-ary Functions: sphere_distance"\
   "\n"\
   "   Kw 6-ary Functions: circle_solve ecdf ellipsoid_destinat"\
   "ion ellipsoid_distance epdf parabola_solve stts_init stts_i"\
   "nitx"\
   "\n"
#define Kw_DESC \
   "   Kw Constants: AAABATTERY(CHARGE|ENERGY|VOLTAGE)? AABATTE"\
   "RY(CHARGE|ENERGY|VOLTAGE)? ACCELERATION ACRE ACTION AH ALPH"\
   "A(|_(ERR|MASS|REC(_ERR)?)|MASS(_ERR)?) AMP(ERE)? AMU(_ERR)?"\
   " ANGLE APERY ARC(DEG(REE)?|MIN(UTE)?|SEC(OND)?) AREA? ASTRO"\
   "NOMICALUNIT ATM(OSPHERE(_ERR)?)? ATOMICMASSUNIT(_ERR)? ATTO"\
   " AU AU_ERR AVOGADRO(_(ERR|REC))? BAN BAR(N|REL)? BAS(EBALL("\
   "MASS|RADIUS)|KETBALL(MASS|RADIUS)) BEKENSTEIN(ENTROPY|INFOR"\
   "MATION) BHENTROPY_AREA BHMASS(3_LIFETIME|_RADIUS|TEMP) BHRA"\
   "DIUS2DENSITY BIT BLUE(ENERGY|Hz|WAVE(LENGTH|NUMBER)) BOHRRA"\
   "DIUS(_ERR)? BOLTZMANN(_(ERR|REC))? BTU(_(IT|TH))? CAL(_(IT|"\
   "TH)|ORIE)? CANDELA CAPACITANCE CAR(AT|BATTERY(CHARGE|ENERGY"\
   "|VOLTAGE)?) CBATTERY(CHARGE|ENERGY|VOLTAGE)? CENTI CHARGE C"\
   "ONDUCTANCE COULOMB(CONST(_ERR)?)? CUP CURRENT DALTON(_ERR)?"\
   " DAY DBATTERY(CHARGE|ENERGY|VOLTAGE)? DBL(EPS|MA(N|X(LN)?)|"\
   "SIG) DEC[AI] DEG[CFR] DENSITY DEUTERON(_MASS|MASS(_ERR)?) D"\
   "IME(MAS|RADIU|THICKNES)S DISTANCE DIT DOWNQUARK(_MASS|ENERG"\
   "Y|Hz|MASS(_ERR)?|WAVELENGTH) dvCs(_ERR|ENERGY|Hz(_REC)?|WAV"\
   "E(LENGTH|NUMBER)) E EARTH(AGE|GRAVITY[AB]|SOLARDAY) EHF(ENE"\
   "RGY|Hz|WAVE(LENGTH|NUMBER)) EINSTEIN(_ERR)? ELE(CTR(IC(_ERR"\
   ")?|ON(_MASS|CHARGE(_(ERR|REC))?|ENERGY|Hz|MASS(_ERR|A(_ERR)"\
   "?)?|VOLT|WAVELENGTH))|MENTARYCHARGE(_ERR)?|VATIONM(AX|IN)) "\
   "ENERGY EPSILON0(_ERR)? ERG EULER EUV(ENERGY|Hz|WAVE(LENGTH|"\
   "NUMBER)) EXA EXBI FARAD(AY(_ERR)?)? FEIGENBAUM FEMTO FINEST"\
   "RUCTURE(|_(ERR|REC(_ERR)?)) FIR(ENERGY|Hz|WAVE(LENGTH|NUMBE"\
   "R)) FLICK FLOZ FLT(EPS|MA[NX]|SIG) FOE FOOT FORCE FREQUENCY"\
   " FT G G_ERR GAL(ACTICCENTER|LON) GAMMA(ENERGY|Hz|WAVE(LENGT"\
   "H|NUMBER)) GAS(_ERR)? GIANTIMPACT GIBI GIGA GOLFBALL(MASS|R"\
   "ADIUS) GRA(D|IN|M|VIT(ATION(_ERR|IERS|NASA)?|Y(_ERR)?)) GRE"\
   "(EN(ENERGY|Hz|WAVE(LENGTH|NUMBER))|GORIANYEAR) GYEAR h h_ER"\
   "R h_REC HART(LEY)? HBAR(_ERR)? HECT(ARE|O) HELION(_MASS|MAS"\
   "S(_ERR)?) HENRY HERTZ HFENERGY HFHz HFWAVE(LENGTH|NUMBER) H"\
   "I HI_ERR HIENERGY HIHz HIWAVE(LENGTH|NUMBER) HORSEPOWER HOU"\
   "R HP HPMETRIC HUBBLE(_ERR)? HXENERGY HXHz HXWAVE(LENGTH|NUM"\
   "BER) HYDROGEN(LINE(_ERR)?|RADIUS(_ERR)?) INCH INDUCTANCE IN"\
   "HG INTMAX J2K(DAY)? JC JCENTURY JD JDAY JDSEC_AT_0(GREGORIA"\
   "N|J2K|KWT|UET) JEWISH_FIRST_MONTH JM JMILLENNIUM JOSEPHSON("\
   "_ERR)? JOULE JULIAN(CENTURY|DAY|MILLENNIUM|YEAR) JY JYEAR K"\
   "_AT_0TEMP[CFR] kB kB_(ERR|REC) KCD(_ERR)? KELVIN KG KGENERG"\
   "Y KGF KGHz KGWAVE(LENGTH|NUMBER) KIBI KILO(GRAM)? KPGBOUNDA"\
   "RY KWT LB LBF LENGTH LFENERGY LFHz LFWAVE(LENGTH|NUMBER) LI"\
   "FEAGE LIGHT(_(ERR|REC)|YEAR)? LIT(ER|RE) LNT(EN|WO) LUMEN L"\
   "UX MACH MAGNETIC(_ERR|FLUX|INDUCTION)? MARATHON MASS MEBI M"\
   "EGA MET(ER|RE) MFENERGY MFHz MFWAVE(LENGTH|NUMBER) MICRO(|W"\
   "AVE(ENERGY|Hz|WAVE(LENGTH|NUMBER))) MIL(E|KYWAY(AGE|DAY|MAS"\
   "S|RADIUS)|LI) MINUTE MIR(ENERGY|Hz|WAVE(LENGTH|NUMBER)) MM "\
   "MMHG MOL(ARMASS(_ERR|X(_ERR)?)?|E) MONTHS_IN_YEAR MOONMONTH"\
   " MPH MPSS? MU0(_ERR)? MUON(_MASS|ENERGY|Hz|MASS(_ERR)?|WAVE"\
   "LENGTH) NANO NAT NEUTRON(_MASS|ENERGY|Hz|MASS(_ERR)?|WAVELE"\
   "NGTH) NEWTON NICKEL(MAS|RADIU|THICKNES)S NINEVOLT(BATTERY(C"\
   "HARGE|ENERGY|VOLTAGE)?|CHARGE|ENERGY|VOLTAGE)? NIR(ENERGY|H"\
   "z|WAVE(LENGTH|NUMBER)) NPBOUNDARY NUV(ENERGY|Hz|WAVE(LENGTH"\
   "|NUMBER)) OHM ORANGE(ENERGY|Hz|WAVE(LENGTH|NUMBER)) OUNCE P"\
   "A PARSEC PEBI PENNY(MAS|RADIU|THICKNES)S PETA PHI PHONEBATT"\
   "ERY(CHARGE|ENERGY|VOLTAGE)? PI PICO PIN(GPONGBALL(MASS|RADI"\
   "US)|T) PLANCK(|_(ERR|REC)|BAR(_ERR)?|CHARGE|ENERGY|LENGTH|M"\
   "ASS|T(EMP|IME)) POINT POUND POWER PPB PPM PPQ PPT PRESSURE "\
   "PRO(TON(_MASS|ENERGY|Hz|MASS(_ERR)?|RADIUS(_ERR)?|WAVELENGT"\
   "H)|XIMACENTAURI) PSI PTRBOUNDARY QUART(ER(MAS|RADIU|THICKNE"\
   "S)S)? RAD(IAN)? RED(ENERGY|Hz|WAVE(LENGTH|NUMBER)) RESISTAN"\
   "CE RPM RPS RYDBERG(_ERR|ENERGY|Hz|WAVE(LENGTH|NUMBER))? SEC"\
   "OND SHANNON SHF(ENERGY|Hz|WAVE(LENGTH|NUMBER)) SI16M(AX|IN)"\
   " SI32M(AX|IN) SIEMENS SOCCERBALL(MASS|RADIUS) SOFTBALL(MASS"\
   "|RADIUS) SOL(ARCONSTANT|ID_ANGLE) SPE(CIFICHEAT|ED) SPHERES"\
   "URFACE SQDEG SQRTTWO SQUAREDEGREE STANDARD(ATMOSPHERE|GRAVI"\
   "TY) STE(FAN(_ERR)?|RADIAN) SXENERGY SXHz SXWAVE(LENGTH|NUMB"\
   "ER) SXX(ENERGY|Hz|WAVE(LENGTH|NUMBER)) TAU(_MASS|ENERGY|Hz|"\
   "MASS(_ERR)?|WAVELENGTH)? TBLSP TEBI TEMPERATURE TENNISBALL("\
   "MASS|RADIUS) TERA TESLA THF(ENERGY|Hz|WAVE(LENGTH|NUMBER)) "\
   "TIME TON(NE)? TORR TRITON(_MASS|MASS(_ERR)?) TRJBOUNDARY TS"\
   "P TT_AT_0(TAI|UT1) TURN UAMU(_ERR)? UET UHF(ENERGY|Hz|WAVE("\
   "LENGTH|NUMBER)) UI16MAX UI32MAX UNI(TGM|VERSE(AGE|MASS|RADI"\
   "US)) UPQUARK(_MASS|ENERGY|Hz|MASS(_ERR)?|WAVELENGTH) UVA(EN"\
   "ERGY|Hz|WAVE(LENGTH|NUMBER)) UVB(ENERGY|Hz|WAVE(LENGTH|NUMB"\
   "ER)) UVC(ENERGY|Hz|WAVE(LENGTH|NUMBER)) VHF(ENERGY|Hz|WAVE("\
   "LENGTH|NUMBER)) VIOLET(ENERGY|Hz|WAVE(LENGTH|NUMBER)) VISCO"\
   "SITY VOL(T(AGE)?|UME) VONKLITZING(_ERR)? WATT WEBER WEEK YA"\
   "RD YELLOW(ENERGY|GREEN(ENERGY|Hz|WAVE(LENGTH|NUMBER))|Hz|WA"\
   "VE(LENGTH|NUMBER)) YOBI YOCTO YOTTA ZEBI ZEPTO ZETTA"\
   "\n"\
   "   Kw 0-ary Functions: corr_new euler__1 gau_rand jd2ymdhms"\
   "inv magic(not|set) normal_rand parabola_(realroots|xaxis|ye"\
   "xtrema) randd stts_new timee"\
   "\n"\
   "   Kw 1-ary Functions: abs agmean1(inv)? ahmean1 almean1 am"\
   "ean1 aqmean1 b2m bankers bb_pdf bellx? benford_rand bernoul"\
   "li[dn]? bess(I[01]|J[01]|K[01]|Y(0|1(__1)?)) bit(s_(count|l"\
   "s1b(pos)?|ms1b(pos)?)|wisenot) blackbody(_pdf|mode|power) c"\
   "antor carmichael catalan cauchy_rand cbrt ceil chisqr_rand "\
   "circle_get clip clock(hour|min|s(ec|tdev|um)) cnv_dbl2si16 "\
   "corr(_(delete|handle[xy])|corr|s(lope|tderr)|y0) cos(|__1|d"\
   "(inv)?|h(inv)?|in(tegral|v)|m1(__1)?|t(inv)?) cot([dht]?(in"\
   "v)?)? csc([dht]?(inv)?)? ctz cu cube(root)? date_(easter|pe"\
   "sach|rosh_hashanah) day2(dhms(inv)?|hour) deg2(dms|rad|sec|"\
   "tur) digamma(__1|inv)? dms2(deg|rad) doomsday ecc2flat Ein "\
   "elliptic(1(__1)?|2(__1)?|[EK]) erf(|__([12]|[34])|c(inv|x(i"\
   "nv)?)?|inv) eta euler(phi|x) exp(_(_[12]|rand)|integral[1i]"\
   "|m1)? fac(inv|torial(double|inv)?)? fibo(x(inv)?)? flat2ecc"\
   " floor frac fubini fusc g2jewish gamma_rand gau_(cdf|pdf|qu"\
   "antile) geo_rand ghmean1(inv)? glmean1 gmean1 gqmean1 has_p"\
   "rimitiveroot haversin heaviside heronianmean1 hlmean1 hmean"\
   "1 hn hn__1 hour2day hqmean1 hypot1(inv)? id int_rand iround"\
   " is(even|int|jewish8short|jewish9short|jewishleap|leapyear|"\
   "magic|neg|negint|odd|pos|posint|practical|prime|squarefree|"\
   "zero) j2k2(dow|jd|kwt|uet|ymdhms) jacobicir jd2(dow|j2k|kwt"\
   "|uet|ymdhms) jewish(2(g|jdx?)|_(months_in_year|yearlength))"\
   " k2m k2temp[cfr] ks_a_cdf kwt2(j(2k|d)|uet) l10 lg lgamma(_"\
   "_[12]|inv)? lix(inv)? lmean1 ln ln1p ln__[12] lns log(10|i("\
   "ntegral|stic_rand))? lqmean1 lucasx? m2b m2k mertens minkow"\
   "ski mobius neg nom normal_(cdf(__1)?|pdf|quantile(__1)?) pa"\
   "r(abola_(get|roots)|titionq?) pcf pfg pfl poi_rand pow(10|2"\
   ") pri(m(e([01]|countx?|n(ext|th(__1)?)|prev)|itiveroot)|nt_"\
   "(contfra(cd?)?|factor|jd264|num2char)) qmean1 rad2(d(eg|ms2"\
   "?)|sec|tur) rand(_init|l) reci reimann round rto(125|[iz]) "\
   "sba search_(check|search) sec(|2(d(eg|hms)|rad|tur)|[dht]?("\
   "inv)?) shc_s(hft2steps|teps2shft(inv)?) sig(m(a[01]|oid(inv"\
   ")?)|n) sin(|__1|c(__1|c|inv)?|d(inv)?|h(inv)?|in(tegral|v)|"\
   "t(inv)?) smooth sq sqinv sqrt(__[123]|x)? square(root)? sta"\
   "ir stts(_(delete|reset)|count|m(a(gic|x)|ean|in|sq)|s(pread"\
   "|tdev(mean)?|um)|var) supercatalan tan([dht]?(inv)?)? temp("\
   "c(2(k|tempf))?|f(2(k|tempc))?|r(2k)?) tgamma(__([123]|stirl"\
   "ing)|double|inv)? topyh1 totient tri(_rand|inv|p)? trunc tu"\
   "r2(deg|rad|sec) uet2(j(2k|d)|kwt) uni_rand versin wm(inv)? "\
   "wp(inv)? ymdhms(2j(2k|d)|_get) zag zeta zig(zag)?"\
   "\n"\
   "   Kw 2-ary Functions: agmean(__1)? ahmean almean amean aqm"\
   "ean atan2([dh]|[tu])? ballots? benford_(cdf|pdf) bess(_(jn|"\
   "yn)|In(_ps)?|J(n(_ps)?|v)|Kn|Y(n(_ps)?|v)) beta(_rand)? bin"\
   "omial(_rand|x)? birthday(inv|x)? bit(s(_(get|set)|hift[lr])"\
   "|wise(and|or|xor)) bkn blackbody carlsonRC cauchy_(cdf|pdf|"\
   "quantile) cd ceil2 chisqr_(cdf|pdf) cir2ell cn cn__1 comb(i"\
   "nation|x)? contraharmonic cs d1diamond_d2 d1lt_d2 d1spiral_"\
   "d2 d1ur_d2 d2diamond_d1 d2hypot_d1 d2lt_d1 d2spiral_d1 d2ur"\
   "_d1 days_in_month dc ddist dist dlog1 dn dn__1 ds ell(2cir|"\
   "ip(se(area|cir(__1)?|ecc|flatness|m)|tic(1i(__1)?|2i(__1)?|"\
   "3(__1)?|Ei|[FP]))) entringer eulerian exp(_(cdf|pdf|quantil"\
   "e)|integraln) factor(ialt)? floor2 fmod[suy]? fmul gamma_(c"\
   "df|pdf) gcda? geo_(cdf|pdf|quantile) ghmean glmean gmean go"\
   "mpertz_rand gqmean has_primitiveroot_f heronianmean hlmean "\
   "hmean hnm hqmean hypot int(_(cdf|pdf|quantile)|s_rand) is(e"\
   "q|ge|gt|le|lt|mult|multl|practical_f|primitiveroot|signsame"\
   "|squarefree_f|ss) jacobiphi jewish_month(begin|length) ks_("\
   "b_cdf|cdf|quantile) lbeta lca(ms?|ntim) lcm lcombx ligamma("\
   "inv)? lmean logistic_(cdf|pdf|quantile) lpermx lqmean max(2"\
   "|abs2?|i) mb_(cdf|pdf) mean min(2|abs2?|i) mobius_f mod(s|u"\
   "lo) nbd_rand nc nd nevilletheta([cd]|[ns]) ns nthroot__1 pa"\
   "reto_rand perm(utation|x)? poi_(cdf|pdf|quantile) poly(a_ra"\
   "nd|cnum|num) powi? pri(me0_f|nt_base_outf?) qmean rand_init"\
   "_array ratio repetendlen rligamma rms round2 rtomsd ruigamm"\
   "a sc sd shc_shftpoles2steps sigma(0_f|1_f)? sn sn__1 spread"\
   "2stdev stdev2spread stirling[12] stts_(copy|downdate|newx|s"\
   "(cale|hift)|update2?) t_cdf(__1)? t_pdf t_quantile(__1)? te"\
   "tra(cnum|num) theta([12]|[34]) Tn topyh totient_f trap_rand"\
   " tri_(cdf|pdf|quantile) uigamma(__1|inv)? Un uni_(cdf|pdf|q"\
   "uantile) variance zeta_(cdf|pdf) zipf_rand znorder(__1)?"\
   "\n"\
   "   Kw 3-ary Functions: aghmean atothenmod[px] beta(_(cdf|pd"\
   "f|quantile)|inc(__1)?) binomial_(cdf|pdf) bits_assign bkbn "\
   "cantor(ll|ul|xx) carlsonR[DF] chebeval clip2x? corr_update "\
   "cossin_ev divi dlogx? elliptic(3i(__1)?|Pi) epdf2cdf f11 f_"\
   "cdf f_quantile(__1)? fibo3 fit(_(ls0?|minmax0?|poly)|x_minm"\
   "ax) fmod2 gompertz_(cdf|pdf|quantile) hms2day horner hypot3"\
   " ifzero is(almostequal|between|betweenx|floorsame|within) j"\
   "ewishymd2jd lv_ellpj max(absoffset|min|well_(boltzmann_(cdf"\
   "|pdf)|juttner_pdf)) minabsoffset n2perm nbd_(cdf|pdf) paret"\
   "o_(cdf|pdf|quantile) pendulum pmean polya_(cdf|pdf) print_k"\
   "evy remquou roundy sigm(a_f|oid3d?) stts_updatex taninv3 tr"\
   "ap_(cdf|pdf|quantile) ymd2(do[wy]|j(2k|d)) zipf_(cdf|pdf|qu"\
   "antile)"\
   "\n"\
   "   Kw 4-ary Functions: carlsonRJ f21 great_circle_distance "\
   "n2comb sphere_d"\
   "\n"\
   "   Kw 5-ary Functions: sphere_distance"\
   "\n"\
   "   Kw 6-ary Functions: circle_solve ecdf ellipsoid_d(estina"\
   "tion|istance) epdf parabola_solve stts_initx?"\
   "\n"
#endif // #ifndef INCLUDED_Kw_h
