#    Copyright (C) 2020 by Kevin D. Woerner
# 2020-08-31 kdw  Created by TMPDIR/objkdw/Kwsun.fwipp.d
#    Copyright C 2017-2020 by Kevin D. Woerner
# 2020-08-29 kdw  Kwplanets:_a[r]r changed to _mt[r]x
# 2020-08-20 kdw  Kwplanets:boolean checks changed
# 2020-08-19 kdw  Kwplanets:comment change
# 2020-08-17 kdw  Kwplanets:macro syntax changed
# 2020-07-27 kdw  Kwplanets:block syntax
# 2020-07-24 kdw  Kwplanets:comment cleanup
# 2020-07-18 kdw  Kwplanets:rmed some imports
# 2020-06-22 kdw  Kwplanets:local-use mved before var decls
# 2020-06-12 kdw  Kwplanets:stern-levison and margot rework
# 2020-06-03 kdw  Kwplanets:writeonly keyword
# 2020-06-01 kdw  Kwplanets:replace "_D" with "_DT"
# 2020-05-30 kdw  Kwplanets:CONST syntax change
# 2020-05-27 kdw  Kwplanets:pl_val func renamd to lf_val
# 2020-05-18 kdw  Kwplanets:block added
# 2020-05-17 kdw  Kwplanets:pl_val func
# 2020-05-13 kdw  Kwplanets:.*_LA[S]T changed to .*_COU[N]T
# 2020-05-12 kdw  Kwplanets:nul rets changed
# 2020-05-11 kdw  Kwplanets:REPL[A]CE replaced with
   #LO[C]AL_CO[N]ST
# 2020-05-05 kdw  Kwplanets:magic check func changed
# 2020-05-04 kdw  Kwplanets:comments added
# 2020-04-28 kdw  Kwplanets:tweaks here and there
# 2020-04-23 kdw  Kwplanets:const format change
# 2020-04-12 kdw  Kwplanets:comment change
# 2020-04-11 kdw  Kwplanets:macro arg format
# 2020-04-08 kdw  Kwplanets:preprocess sigil change
# 2020-04-03 kdw  Kwplanets:uniqify returns
# 2020-03-23 kdw  Kwplanets:added _[a]rr suffix to arrays
# 2020-03-11 kdw  Kwplanets:RE[P]LACE work
# 2020-03-09 kdw  Kwplanets:LO[C]AL_.* keywords
# 2020-03-08 kdw  Kwplanets:PR[I]NTVAL change
# 2020-03-06 kdw  Kwplanets:L[A]NG.* names
# 2020-03-03 kdw  Kwplanets:macro arg name change
# 2020-03-02 kdw  Kwplanets:s/_NE[X]T/_E[N]D/g
# 2020-02-28 kdw  Kwplanets:poly eval work
# 2020-02-27 kdw  Kwplanets:ho[r]ner work
# 2020-02-26 kdw  Kwplanets:comment change
# 2020-02-03 kdw  Kwplanets:.*_LOOP changed
# 2020-01-28 kdw  Kwplanets:updated w/ new ellips.* funcs
# 2020-01-08 kdw  Kwplanets:comment location chagned
# 2019-12-26 kdw  Kwplanets:module name addded to funcs
# 2019-12-18 kdw  Kwplanets:error checking III
# 2019-12-17 kdw  Kwplanets:error checking fixed
# 2019-12-15 kdw  Kwplanets:error checking
# 2019-12-11 kdw  Kwplanets:debugging -- no net change
# 2019-11-17 kdw  Kwplanets:include Macros file
# 2019-10-10 kdw  Kwplanets:replace AIR with AIR_MASS
# 2019-10-08 kdw  Kwplanets:comment change
# 2019-10-04 kdw  Kwplanets:comment removal
# 2019-10-02 kdw  Kwplanets:macro arg format change
# 2019-09-21 kdw  Kwplanets:diff const renam
# 2019-09-10 kdw  Kwplanets:earth-gravity major refactor
# 2019-08-30 kdw  Kwplanets:lv_isa_.* vars; ISA block
# 2019-08-26 kdw  Kwplanets:PRI[N]TS to PR[I]NTSTR
# 2019-08-22 kdw  Kwplanets:comment changed
# 2019-08-17 kdw  Kwplanets:L[O]G to L[N]
# 2019-08-15 kdw  Kwplanets:tweak in pl_helio.*
# 2019-08-14 kdw  Kwplanets:comment change
# 2019-08-13 kdw  Kwplanets:comment shortened
# 2019-08-11 kdw  Kwplanets:comment cleanup
# 2019-08-06 kdw  Kwplanets:added "+" to array values
# 2019-07-05 kdw  Kwplanets:added extra planet defs; pls[e]ttime
# 2019-07-04 kdw  Kwplanets:rmed extra planet defs
# 2019-07-03 kdw  Kwplanets:var renm:"s/ind/_ind/;s/__ind/_ind/"
# 2019-07-02 kdw  Kwplanets:macro renam
# 2019-06-26 kdw  Kwplanets:".*D" to ".*_DT"
# 2019-06-04 kdw  Kwplanets:tur2deg funcs
# 2019-06-02 kdw  Kwplanets:NR_ to RAPHSON_
# 2019-05-31 kdw  Kwplanets:NR_DO to RAPHSON_LOOP; et al
# 2019-05-29 kdw  Kwplanets:comment changed
# 2019-05-28 kdw  Kwplanets:comment changed
# 2019-05-24 kdw  Kwplanets:s/PL_/LC_/g;
# 2019-05-22 kdw  Kwplanets:added "get_" to several vin_.* funcs
# 2019-05-20 kdw  Kwplanets:explicit module for consts
# 2019-05-17 kdw  Kwplanets:pl.* rmed
# 2019-05-14 kdw  Kwplanets:lf_isa_calc, isa_dens funcs; rework
# 2019-05-08 kdw  Kwplanets:func descripts
# 2019-05-07 kdw  Kwplanets:lf_?isa_.* funcs
# 2019-04-30 kdw  Kwplanets:failed experiment
# 2019-04-23 kdw  Kwplanets:e.*_air_[p]ressure() function rework
# 2019-04-22 kdw  Kwplanets:e.*_air_[p]ressure() function
# 2019-03-19 kdw  Kwplanets:re[t]_val to re[t]valu
# 2019-03-18 kdw  Kwplanets:macro syntax changed
# 2019-03-15 kdw  Kwplanets:use to[p]yh1
# 2019-03-08 kdw  Kwplanets:is[e]qual to is[e]q, et al.
# 2019-03-04 kdw  Kwplanets:loop-limit work
# 2019-02-28 kdw  Kwplanets:REP[L]ACE/DE[F]INE work
# 2019-02-19 kdw  Kwplanets:macro syntax
# 2019-02-04 kdw  Kwplanets:pmo macro, et al
# 2019-01-30 kdw  Kwplanets:lv_p[l]_ey var
# 2019-01-27 kdw  Kwplanets:pl-helioc[e]ntric func
# 2019-01-23 kdw  Kwplanets:probs with powers
# 2018-12-12 kdw  Kwplanets:macros.fwip
# 2018-12-10 kdw  Kwplanets:module specific refs
# 2018-11-29 kdw  Kwplanets:upper cased fwip defined funcs
# 2018-11-26 kdw  Kwplanets:PL_ prfxs
# 2018-11-03 kdw  Kwplanets:comment
# 2018-10-27 kdw  Kwplanets:comment change
# 2018-10-04 kdw  Kwplanets:uppercased fwip trig funcs
# 2018-07-19 kdw  Kwplanets:comments; array reformat
# 2018-07-17 kdw  Kwplanets:private lf_.* funcs
# 2018-07-13 kdw  Kwplanets:float number reformt
# 2018-07-10 kdw  Kwplanets:added "+" to exponents
# 2018-05-24 kdw  Kwplanets:eccentric anomaly refactor
# 2018-05-23 kdw  Kwplanets:orbital elements
# 2018-05-23 kdw  Kwplanets:eccentric anomaly func
# 2018-05-22 kdw  Kwplanets:comment change
# 2018-05-17 kdw  Kwplanets:AR[R]AY.* and HOR[N]ER syntax
# 2018-05-16 kdw  Kwplanets:AR[R]AY syntax
# 2018-04-19 kdw  Kwplanets:consts rework
# 2018-04-09 kdw  Kwplanets:[tdr]2[rdt] func renam
# 2018-04-03 kdw  Kwplanets:rm() from return
# 2018-03-26 kdw  Kwplanets:macro redef
# 2018-03-20 kdw  Kwplanets:replaced index w/ "at"replace
# 2018-03-16 kdw  Kwplanets:constant and index format
# 2018-03-12 kdw  Kwplanets:made PP statements not need ";"
# 2018-02-27 kdw  Kwplanets:mass function refactor
# 2018-02-19 kdw  Kwplanets:secant and macro refactor
# 2018-02-17 kdw  Kwplanets:expandnow changed
# 2018-02-14 kdw  Kwplanets:IN[D]EX stuff
# 2018-02-12 kdw  Kwplanets:stern-levison
# 2018-02-10 kdw  Kwplanets:*_B calcd from _A and FLAT
# 2018-02-08 kdw  Kwplanets:*_[ABC] radii
# 2018-01-15 kdw  Kwplanets:margot comments
# 2017-11-24 kdw  Kwplanets:print string changed
# 2017-11-23 kdw  Kwplanets:rm digits from var names
# 2017-11-22 kdw  Kwplanets:var renam
# 2017-11-07 kdw  Kwplanets:perihelion, aphelion spelled out
# 2017-10-23 kdw  Kwplanets:COM[M]ENT syntax
# 2017-10-22 kdw  Kwplanets:peri and ap
# 2017-10-21 kdw  Kwplanets:in[s]ert syntax
# 2017-10-17 kdw  Kwplanets:GM redo; several earth redefd
# 2017-10-15 kdw  Kwplanets:sun mass
# 2017-10-10 kdw  Kwplanets:__B <= __C <= __A
# 2017-10-09 kdw  Kwplanets:suppress units warning with "+-"
# 2017-10-07 kdw  Kwplanets:__C; __RADIUS calc changed
# 2017-10-06 kdw  Kwplanets:mucho refactor(lots of consts)
# 2017-10-04 kdw  Kwplanets:NUS
# 2017-10-03 kdw  Kwplanets:margot  simplified
# 2017-10-02 kdw  Kwplanets:pl* funcs
# 2017-10-02 kdw  Kwplanets:only names
# 2017-10-01 kdw  Kwplanets:_planet_.* reorg
# 2017-09-29 kdw  Kwplanets:_planet_.* created
# 2017-09-29 kdw  Kwplanets:EA[R]THFLAT
# 2017-09-28 kdw  Kwplanets:tropical year
# 2017-09-27 kdw  Kwplanets:EA[R]THGRA[V]ITY[AB]
# 2017-09-26 kdw  Kwplanets:created
#   IIIIIIIIIInsert-Begin ------------------------- Macros.fwip #
#    COPYRIGHT C 2018-2020 by Kevin D. Woerner
# 2020-08-17 kdw  Macros:macro syntax changed
# 2020-07-24 kdw  Macros:comment cleanup
# 2020-06-20 kdw  Macros:comment change
# 2020-04-26 kdw  Macros:block indentation
# 2020-04-23 kdw  Macros:const format change
# 2020-04-12 kdw  Macros:comment change
# 2020-04-11 kdw  Macros:macro arg format
# 2020-04-08 kdw  Macros:preprocess sigil change
# 2020-03-06 kdw  Macros:RE[P]LACE / IN[D]EX changes
# 2020-03-03 kdw  Macros:comment changed:odd chars
# 2020-03-02 kdw  Macros:s/_NE[X]T/_E[N]D/g
# 2020-02-26 kdw  Macros:HO[R]NER rmed
# 2020-02-14 kdw  Macros:incomplete beta work
# 2020-02-03 kdw  Macros:.*_LOOP changed
# 2019-11-19 kdw  Macros:format change
# 2019-10-04 kdw  Macros:comment change
# 2019-10-02 kdw  Macros:macro arg format change
# 2019-08-24 kdw  Macros:for and count loops have from clause
# 2019-08-14 kdw  Macros:comments added
# 2019-08-13 kdw  Macros:reorg ho[r]ner
# 2019-08-06 kdw  Macros:rmed backslashes, macro arg renam
# 2019-06-02 kdw  Macros:NR_ to RAPHSON_
# 2019-05-31 kdw  Macros:NR_DO to RAPHSON_LOOP; et al
# 2019-05-29 kdw  Macros:comment changed
# 2019-05-16 kdw  Macros:loop limit def mved
# 2019-03-18 kdw  Macros:macro syntax changed
# 2019-03-08 kdw  Macros:is[e]qual to is[e]q, et al.
# 2019-03-06 kdw  Macros:is.* funcs changed
# 2019-03-04 kdw  Macros:loop-limit work
# 2019-02-28 kdw  Macros:REP[L]ACE/DE[F]INE work
# 2019-02-19 kdw  Macros:macro syntax
# 2019-02-13 kdw  Macros:comment work
# 2018-12-20 kdw  Macros:work on module specific functions
# 2018-12-12 kdw  Macros:created
# limit for loops
#   IIIIIIIIIInsert-End --------------------------- Macros.fwip #
# basic, usefull things
IMPORT "Kw";
IMPORT "Kwelements";
# need the molecular mass of air for ISA calculation
# http://hpiers.obspm.fr/eop-pc/models/constants.html
# See also https://en.wikipedia.org/wiki/Sidereal_time
# Earths rotational period relative to the vernal equinox
CONST EARTHSIDEREALDAY Kw.DAY / 1.002737909350795;#T
# Earths rotational period relative to the stars IERS
CONST EARTHSTELLARDAY Kw.DAY / 1.00273781191135448;#T
CONST EARTHTROPICALYEAR 365.242190402 * Kw.DAY;#T
CONST EARTHSIDEREALYEAR 365.256363004 * Kw.DAY;#T
CONST EARTHANOMALISTICYEAR 365.259636 * Kw.DAY;#T
CONST SIDEREALYEAR EARTHSIDEREALYEAR;#T
CONST ANOMALISTICYEAR EARTHANOMALISTICYEAR;#T
CONST TROPICALYEAR EARTHTROPICALYEAR;#T
CONST STELLARDAY EARTHSTELLARDAY;#T
CONST SIDEREALDAY EARTHSIDEREALDAY;#T
# use IERS
CONST SUNGMNASA 1.32712440018E+20 * Kw.UNITGM;#L3T-2
CONST SUNGMIERS 1.32712442099E+20 * Kw.UNITGM;#L3T-2
CONST SUNGM SUNGMNASA;#L3T-2
CONST SUNYEAR 0.0 * Kw.DAY;#T
CONST SUNDAY 24.47 * Kw.DAY;#T
CONST SUNFLATNESS 9.0E-6;#1
CONST SUN_A 6.957E+8 * Kw.METER;#L
CONST SUN_C SUN_A;#L
# Calculated consts for SUN
CONST SUN_B SUN_A * (1.0 - SUNFLATNESS);#L
CONST SUNRADIUS 0.333333333333333 * (SUN_A + SUN_B + SUN_C);#L
LANGUAGE_NOT LANG_VB6 LANG_VBDOTNET:# no sqrt in consts
   CONST SUNESCAPE SQRT(2 * SUNGM / SUNRADIUS);#L/T
   CONST SUNOBLATENESS SQRT(SUNFLATNESS * (2.0 - SUNFLATNESS));#1
LANGUAGE_END# no sqrt in consts
CONST SUNGRAVITY SUNGM / (SUNRADIUS * SUNRADIUS);#LT-2
CONST SUNMASS SUNGM / Kw.GRAVITATION;#M
CONST SUNVOLUME 2.0 * Kw.TAU / 3.0 * SUNRADIUS * SUNRADIUS
      * SUNRADIUS;#L3
CONST SUNDENSITY SUNMASS / SUNVOLUME;#ML-3
CONST MERCURYGM 2.2032E+13 * Kw.UNITGM;#M3T-2
CONST MERCURYYEAR 87.9691 * Kw.DAY;#T
CONST MERCURYDAY 58.6462 * Kw.DAY;#T
CONST MERCURYFLATNESS 0.0;#1
CONST MERCURY_A 2.4397E+6 * Kw.METER;#L
CONST MERCURY_C MERCURY_A;#L
# Calculated consts for MERCURY
CONST MERCURY_B MERCURY_A * (1.0 - MERCURYFLATNESS);#L
CONST MERCURYRADIUS 0.333333333333333 * (MERCURY_A + MERCURY_B
      + MERCURY_C);#L
LANGUAGE_NOT LANG_VB6 LANG_VBDOTNET:# no sqrt in consts
   CONST MERCURYESCAPE SQRT(2 * MERCURYGM / MERCURYRADIUS);#L/T
   CONST MERCURYOBLATENESS SQRT(MERCURYFLATNESS * (2.0
         - MERCURYFLATNESS));#1
LANGUAGE_END# no sqrt in consts
CONST MERCURYGRAVITY MERCURYGM / (MERCURYRADIUS
      * MERCURYRADIUS);#LT-2
CONST MERCURYMASS MERCURYGM / Kw.GRAVITATION;#M
CONST MERCURYVOLUME 2.0 * Kw.TAU / 3.0 * MERCURYRADIUS
      * MERCURYRADIUS * MERCURYRADIUS;#L3
CONST MERCURYDENSITY MERCURYMASS / MERCURYVOLUME;#ML-3
CONST VENUSGM 3.24859E+14 * Kw.UNITGM;#M3T-2
CONST VENUSYEAR 224.701 * Kw.DAY;#T
CONST VENUSDAY - 243.018 * Kw.DAY;#T
CONST VENUSFLATNESS 0.0;#1
CONST VENUS_A 6.0518E+6 * Kw.METER;#L
CONST VENUS_C VENUS_A;#L
# Calculated consts for VENUS
CONST VENUS_B VENUS_A * (1.0 - VENUSFLATNESS);#L
CONST VENUSRADIUS 0.333333333333333 * (VENUS_A + VENUS_B
      + VENUS_C);#L
LANGUAGE_NOT LANG_VB6 LANG_VBDOTNET:# no sqrt in consts
   CONST VENUSESCAPE SQRT(2 * VENUSGM / VENUSRADIUS);#L/T
   CONST VENUSOBLATENESS SQRT(VENUSFLATNESS * (2.0
         - VENUSFLATNESS));#1
LANGUAGE_END# no sqrt in consts
CONST VENUSGRAVITY VENUSGM / (VENUSRADIUS * VENUSRADIUS);#LT-2
CONST VENUSMASS VENUSGM / Kw.GRAVITATION;#M
CONST VENUSVOLUME 2.0 * Kw.TAU / 3.0 * VENUSRADIUS
      * VENUSRADIUS * VENUSRADIUS;#L3
CONST VENUSDENSITY VENUSMASS / VENUSVOLUME;#ML-3
CONST EARTHGM 3.986004418E+14 * Kw.UNITGM;#M3T-2
CONST EARTHYEAR EARTHSIDEREALYEAR;#T
CONST EARTHDAY EARTHSTELLARDAY;#T
CONST EARTHFLATNESS 1.0 / 298.257223563;
#1 # WGS84,GPS
CONST EARTH_A 6.378137E+6 * Kw.METER;
#L # WGS84,GPS
CONST EARTH_C EARTH_A;#L
# Calculated consts for EARTH
CONST EARTH_B EARTH_A * (1.0 - EARTHFLATNESS);#L
CONST EARTHRADIUS 0.333333333333333 * (EARTH_A + EARTH_B
      + EARTH_C);#L
LANGUAGE_NOT LANG_VB6 LANG_VBDOTNET:# no sqrt in consts
   CONST EARTHESCAPE SQRT(2 * EARTHGM / EARTHRADIUS);#L/T
   CONST EARTHOBLATENESS SQRT(EARTHFLATNESS * (2.0
         - EARTHFLATNESS));#1
LANGUAGE_END# no sqrt in consts
CONST EARTHGRAVITY EARTHGM / (EARTHRADIUS * EARTHRADIUS);#LT-2
CONST EARTHMASS EARTHGM / Kw.GRAVITATION;#M
CONST EARTHVOLUME 2.0 * Kw.TAU / 3.0 * EARTHRADIUS
      * EARTHRADIUS * EARTHRADIUS;#L3
CONST EARTHDENSITY EARTHMASS / EARTHVOLUME;#ML-3
CONST EARTHPRECESSION 50.28792 * Kw.ARCSEC / Kw.JYEAR;#AT-1
CONST EARTHTHETA_0 0.7790572732640 * Kw.TURN;#A
CONST MARSGM 4.282837E+13 * Kw.UNITGM;#M3T-2
CONST MARSYEAR 686.971 * Kw.DAY;#T
CONST MARSDAY 1.02595676 * Kw.DAY;#T
CONST MARSFLATNESS 1.0 / 169.81;#1
CONST MARS_A 3.3962E+6 * Kw.METER;#L
CONST MARS_C MARS_A;#L
# Calculated consts for MARS
CONST MARS_B MARS_A * (1.0 - MARSFLATNESS);#L
CONST MARSRADIUS 0.333333333333333 * (MARS_A + MARS_B
      + MARS_C);#L
LANGUAGE_NOT LANG_VB6 LANG_VBDOTNET:# no sqrt in consts
   CONST MARSESCAPE SQRT(2 * MARSGM / MARSRADIUS);#L/T
   CONST MARSOBLATENESS SQRT(MARSFLATNESS * (2.0
         - MARSFLATNESS));#1
LANGUAGE_END# no sqrt in consts
CONST MARSGRAVITY MARSGM / (MARSRADIUS * MARSRADIUS);#LT-2
CONST MARSMASS MARSGM / Kw.GRAVITATION;#M
CONST MARSVOLUME 2.0 * Kw.TAU / 3.0 * MARSRADIUS * MARSRADIUS
      * MARSRADIUS;#L3
CONST MARSDENSITY MARSMASS / MARSVOLUME;#ML-3
CONST JUPITERGM 1.26686534E+17 * Kw.UNITGM;#M3T-2
CONST JUPITERYEAR 4332.59 * Kw.DAY;#T
CONST JUPITERDAY 0.41354 * Kw.DAY;#T
CONST JUPITERFLATNESS 1.0 / 15.4144028;#1
CONST JUPITER_A 7.1492E+7 * Kw.METER;#L
CONST JUPITER_C JUPITER_A;#L
# Calculated consts for JUPITER
CONST JUPITER_B JUPITER_A * (1.0 - JUPITERFLATNESS);#L
CONST JUPITERRADIUS 0.333333333333333 * (JUPITER_A + JUPITER_B
      + JUPITER_C);#L
LANGUAGE_NOT LANG_VB6 LANG_VBDOTNET:# no sqrt in consts
   CONST JUPITERESCAPE SQRT(2 * JUPITERGM / JUPITERRADIUS);#L/T
   CONST JUPITEROBLATENESS SQRT(JUPITERFLATNESS * (2.0
         - JUPITERFLATNESS));#1
LANGUAGE_END# no sqrt in consts
CONST JUPITERGRAVITY JUPITERGM / (JUPITERRADIUS
      * JUPITERRADIUS);#LT-2
CONST JUPITERMASS JUPITERGM / Kw.GRAVITATION;#M
CONST JUPITERVOLUME 2.0 * Kw.TAU / 3.0 * JUPITERRADIUS
      * JUPITERRADIUS * JUPITERRADIUS;#L3
CONST JUPITERDENSITY JUPITERMASS / JUPITERVOLUME;#ML-3
CONST SATURNGM 3.7931187E+16 * Kw.UNITGM;#M3T-2
CONST SATURNYEAR 10759.22 * Kw.DAY;#T
CONST SATURNDAY 0.44401 * Kw.DAY;#T
CONST SATURNFLATNESS 1.0 / 10.208;#1
CONST SATURN_A 6.0268E+7 * Kw.METER;#L
CONST SATURN_C SATURN_A;#L
# Calculated consts for SATURN
CONST SATURN_B SATURN_A * (1.0 - SATURNFLATNESS);#L
CONST SATURNRADIUS 0.333333333333333 * (SATURN_A + SATURN_B
      + SATURN_C);#L
LANGUAGE_NOT LANG_VB6 LANG_VBDOTNET:# no sqrt in consts
   CONST SATURNESCAPE SQRT(2 * SATURNGM / SATURNRADIUS);#L/T
   CONST SATURNOBLATENESS SQRT(SATURNFLATNESS * (2.0
         - SATURNFLATNESS));#1
LANGUAGE_END# no sqrt in consts
CONST SATURNGRAVITY SATURNGM / (SATURNRADIUS * SATURNRADIUS);
      #LT-2
CONST SATURNMASS SATURNGM / Kw.GRAVITATION;#M
CONST SATURNVOLUME 2.0 * Kw.TAU / 3.0 * SATURNRADIUS
      * SATURNRADIUS * SATURNRADIUS;#L3
CONST SATURNDENSITY SATURNMASS / SATURNVOLUME;#ML-3
CONST URANUSGM 5.793939E+15 * Kw.UNITGM;#M3T-2
CONST URANUSYEAR 30688.5 * Kw.DAY;#T
CONST URANUSDAY - 0.71833 * Kw.DAY;#T
CONST URANUSFLATNESS 1.0 / 43.61604;#1
CONST URANUS_A 2.5559E+7 * Kw.METER;#L
CONST URANUS_C URANUS_A;#L
# Calculated consts for URANUS
CONST URANUS_B URANUS_A * (1.0 - URANUSFLATNESS);#L
CONST URANUSRADIUS 0.333333333333333 * (URANUS_A + URANUS_B
      + URANUS_C);#L
LANGUAGE_NOT LANG_VB6 LANG_VBDOTNET:# no sqrt in consts
   CONST URANUSESCAPE SQRT(2 * URANUSGM / URANUSRADIUS);#L/T
   CONST URANUSOBLATENESS SQRT(URANUSFLATNESS * (2.0
         - URANUSFLATNESS));#1
LANGUAGE_END# no sqrt in consts
CONST URANUSGRAVITY URANUSGM / (URANUSRADIUS * URANUSRADIUS);
      #LT-2
CONST URANUSMASS URANUSGM / Kw.GRAVITATION;#M
CONST URANUSVOLUME 2.0 * Kw.TAU / 3.0 * URANUSRADIUS
      * URANUSRADIUS * URANUSRADIUS;#L3
CONST URANUSDENSITY URANUSMASS / URANUSVOLUME;#ML-3
CONST NEPTUNEGM 6.836529E+15 * Kw.UNITGM;#M3T-2
CONST NEPTUNEYEAR 6.0182E+4 * Kw.DAY;#T
CONST NEPTUNEDAY 0.67125 * Kw.DAY;#T
CONST NEPTUNEFLATNESS 1.0 / 58.54373;#1
CONST NEPTUNE_A 2.4764E+7 * Kw.METER;#L
CONST NEPTUNE_C NEPTUNE_A;#L
# Calculated consts for NEPTUNE
CONST NEPTUNE_B NEPTUNE_A * (1.0 - NEPTUNEFLATNESS);#L
CONST NEPTUNERADIUS 0.333333333333333 * (NEPTUNE_A + NEPTUNE_B
      + NEPTUNE_C);#L
LANGUAGE_NOT LANG_VB6 LANG_VBDOTNET:# no sqrt in consts
   CONST NEPTUNEESCAPE SQRT(2 * NEPTUNEGM / NEPTUNERADIUS);#L/T
   CONST NEPTUNEOBLATENESS SQRT(NEPTUNEFLATNESS * (2.0
         - NEPTUNEFLATNESS));#1
LANGUAGE_END# no sqrt in consts
CONST NEPTUNEGRAVITY NEPTUNEGM / (NEPTUNERADIUS
      * NEPTUNERADIUS);#LT-2
CONST NEPTUNEMASS NEPTUNEGM / Kw.GRAVITATION;#M
CONST NEPTUNEVOLUME 2.0 * Kw.TAU / 3.0 * NEPTUNERADIUS
      * NEPTUNERADIUS * NEPTUNERADIUS;#L3
CONST NEPTUNEDENSITY NEPTUNEMASS / NEPTUNEVOLUME;#ML-3
CONST PLUTOGM 8.71E+11 * Kw.UNITGM;#M3T-2
CONST PLUTOYEAR 9.056E+4 * Kw.DAY;#T
CONST PLUTODAY 6.38723 * Kw.DAY;#T
CONST PLUTOFLATNESS 0.0;#1
CONST PLUTO_A 1.1899E+6 * Kw.METER;#L
CONST PLUTO_C PLUTO_A;#L
# Calculated consts for PLUTO
CONST PLUTO_B PLUTO_A * (1.0 - PLUTOFLATNESS);#L
CONST PLUTORADIUS 0.333333333333333 * (PLUTO_A + PLUTO_B
      + PLUTO_C);#L
LANGUAGE_NOT LANG_VB6 LANG_VBDOTNET:# no sqrt in consts
   CONST PLUTOESCAPE SQRT(2 * PLUTOGM / PLUTORADIUS);#L/T
   CONST PLUTOOBLATENESS SQRT(PLUTOFLATNESS * (2.0
         - PLUTOFLATNESS));#1
LANGUAGE_END# no sqrt in consts
CONST PLUTOGRAVITY PLUTOGM / (PLUTORADIUS * PLUTORADIUS);#LT-2
CONST PLUTOMASS PLUTOGM / Kw.GRAVITATION;#M
CONST PLUTOVOLUME 2.0 * Kw.TAU / 3.0 * PLUTORADIUS
      * PLUTORADIUS * PLUTORADIUS;#L3
CONST PLUTODENSITY PLUTOMASS / PLUTOVOLUME;#ML-3
CONST MOONGM 4.9048695E+12 * Kw.UNITGM;#M3T-2
CONST MOONYEAR 27.32166155 * Kw.DAY;#T
CONST MOONDAY 27.321661 * Kw.DAY;#T
CONST MOONFLATNESS 1.0 / 827.667;#1
CONST MOON_A 1.7381E+6 * Kw.METER;#L
CONST MOON_C MOON_A;#L
# Calculated consts for MOON
CONST MOON_B MOON_A * (1.0 - MOONFLATNESS);#L
CONST MOONRADIUS 0.333333333333333 * (MOON_A + MOON_B
      + MOON_C);#L
LANGUAGE_NOT LANG_VB6 LANG_VBDOTNET:# no sqrt in consts
   CONST MOONESCAPE SQRT(2 * MOONGM / MOONRADIUS);#L/T
   CONST MOONOBLATENESS SQRT(MOONFLATNESS * (2.0
         - MOONFLATNESS));#1
LANGUAGE_END# no sqrt in consts
CONST MOONGRAVITY MOONGM / (MOONRADIUS * MOONRADIUS);#LT-2
CONST MOONMASS MOONGM / Kw.GRAVITATION;#M
CONST MOONVOLUME 2.0 * Kw.TAU / 3.0 * MOONRADIUS * MOONRADIUS
      * MOONRADIUS;#L3
CONST MOONDENSITY MOONMASS / MOONVOLUME;#ML-3
CONST MOONORBIT 3.843999E+8 * Kw.METER;#L
CONST MOONECCENTRICITY 0.0549;#1
CONST MOONINCLINATION 5.415 * Kw.ARCDEG;#A
CONST CERESGM 6.26325E+10 * Kw.UNITGM;#M3T-2
CONST CERESYEAR 1681.63 * Kw.DAY;#T
CONST CERESDAY 9.074170 * Kw.HOUR;#T
CONST CERESFLATNESS 1.0 / 13.0432;#1
CONST CERES_A 4.826E+5 * Kw.METER;#L
CONST CERES_C 4.806E+5 * Kw.METER;#L
# Calculated consts for CERES
CONST CERES_B CERES_A * (1.0 - CERESFLATNESS);#L
CONST CERESRADIUS 0.333333333333333 * (CERES_A + CERES_B
      + CERES_C);#L
LANGUAGE_NOT LANG_VB6 LANG_VBDOTNET:# no sqrt in consts
   CONST CERESESCAPE SQRT(2 * CERESGM / CERESRADIUS);#L/T
   CONST CERESOBLATENESS SQRT(CERESFLATNESS * (2.0
         - CERESFLATNESS));#1
LANGUAGE_END# no sqrt in consts
CONST CERESGRAVITY CERESGM / (CERESRADIUS * CERESRADIUS);#LT-2
CONST CERESMASS CERESGM / Kw.GRAVITATION;#M
CONST CERESVOLUME 2.0 * Kw.TAU / 3.0 * CERESRADIUS
      * CERESRADIUS * CERESRADIUS;#L3
CONST CERESDENSITY CERESMASS / CERESVOLUME;#ML-3
CONST ERISGM 1.108E+12 * Kw.UNITGM;#M3T-2
CONST ERISYEAR 2.0383E+5 * Kw.DAY;#T
CONST ERISDAY 25.9 * Kw.HOUR;#T
CONST ERISFLATNESS 0.0;#1
CONST ERIS_A 1.163E+6 * Kw.METER;#L
CONST ERIS_C ERIS_A;#L
# Calculated consts for ERIS
CONST ERIS_B ERIS_A * (1.0 - ERISFLATNESS);#L
CONST ERISRADIUS 0.333333333333333 * (ERIS_A + ERIS_B
      + ERIS_C);#L
LANGUAGE_NOT LANG_VB6 LANG_VBDOTNET:# no sqrt in consts
   CONST ERISESCAPE SQRT(2 * ERISGM / ERISRADIUS);#L/T
   CONST ERISOBLATENESS SQRT(ERISFLATNESS * (2.0
         - ERISFLATNESS));#1
LANGUAGE_END# no sqrt in consts
CONST ERISGRAVITY ERISGM / (ERISRADIUS * ERISRADIUS);#LT-2
CONST ERISMASS ERISGM / Kw.GRAVITATION;#M
CONST ERISVOLUME 2.0 * Kw.TAU / 3.0 * ERISRADIUS * ERISRADIUS
      * ERISRADIUS;#L3
CONST ERISDENSITY ERISMASS / ERISVOLUME;#ML-3
CONST MAKEMAKEGM 2.9366E+11 * Kw.UNITGM;#L3T-2
CONST MAKEMAKEYEAR 1.12897E+5 * Kw.DAY;#T
CONST MAKEMAKEDAY 7.771 * Kw.HOUR;#T
CONST MAKEMAKEFLATNESS 1.0 / 30.7917;#1
CONST MAKEMAKE_A 7.39E+5 * Kw.METER;#L
CONST MAKEMAKE_C MAKEMAKE_A;#L
# Calculated consts for MAKEMAKE
CONST MAKEMAKE_B MAKEMAKE_A * (1.0 - MAKEMAKEFLATNESS);#L
CONST MAKEMAKERADIUS 0.333333333333333 * (MAKEMAKE_A
      + MAKEMAKE_B + MAKEMAKE_C);#L
LANGUAGE_NOT LANG_VB6 LANG_VBDOTNET:# no sqrt in consts
   CONST MAKEMAKEESCAPE SQRT(2 * MAKEMAKEGM / MAKEMAKERADIUS);
         #L/T
   CONST MAKEMAKEOBLATENESS SQRT(MAKEMAKEFLATNESS * (2.0
         - MAKEMAKEFLATNESS));#1
LANGUAGE_END# no sqrt in consts
CONST MAKEMAKEGRAVITY MAKEMAKEGM / (MAKEMAKERADIUS
      * MAKEMAKERADIUS);#LT-2
CONST MAKEMAKEMASS MAKEMAKEGM / Kw.GRAVITATION;#M
CONST MAKEMAKEVOLUME 2.0 * Kw.TAU / 3.0 * MAKEMAKERADIUS
      * MAKEMAKERADIUS * MAKEMAKERADIUS;#L3
CONST MAKEMAKEDENSITY MAKEMAKEMASS / MAKEMAKEVOLUME;#ML-3
CONST HAUMEAGM 2.674E+11 * Kw.UNITGM;#L3T-2
CONST HAUMEAYEAR 1.03774E+5 * Kw.DAY;#T
CONST HAUMEADAY 3.9155 * Kw.HOUR;#T
CONST HAUMEAFLATNESS 1.0 / 1.96115;#1
CONST HAUMEA_A 1.161E+6 * Kw.METER;#L
CONST HAUMEA_C 8.52E+5 * Kw.METER;#L
# Calculated consts for HAUMEA
CONST HAUMEA_B HAUMEA_A * (1.0 - HAUMEAFLATNESS);#L
CONST HAUMEARADIUS 0.333333333333333 * (HAUMEA_A + HAUMEA_B
      + HAUMEA_C);#L
LANGUAGE_NOT LANG_VB6 LANG_VBDOTNET:# no sqrt in consts
   CONST HAUMEAESCAPE SQRT(2 * HAUMEAGM / HAUMEARADIUS);#L/T
   CONST HAUMEAOBLATENESS SQRT(HAUMEAFLATNESS * (2.0
         - HAUMEAFLATNESS));#1
LANGUAGE_END# no sqrt in consts
CONST HAUMEAGRAVITY HAUMEAGM / (HAUMEARADIUS * HAUMEARADIUS);
      #LT-2
CONST HAUMEAMASS HAUMEAGM / Kw.GRAVITATION;#M
CONST HAUMEAVOLUME 2.0 * Kw.TAU / 3.0 * HAUMEARADIUS
      * HAUMEARADIUS * HAUMEARADIUS;#L3
CONST HAUMEADENSITY HAUMEAMASS / HAUMEAVOLUME;#ML-3
##    ORBITAL INFORMATION --- ----- ----- ----- ----- ----- -----
# from website https://ssd.jpl.nasa.gov/txt/p_elem_t1.txt
# AU;Eccentricity;Inclination;Longitude;Periapsis;Ascending
# Orbital Elements for SUN
CONST SUNORBIT 0.0 * Kw.AU;#L
CONST SUNECCENTRICITY 0.0;#1
CONST SUNINCLINATION 0.0 * Kw.ARCDEG;#A
CONST SUNLONGITUDE 0.0 * Kw.ARCDEG;#A
CONST SUNPERIAPSIS 0.0 * Kw.ARCDEG;#A
CONST SUNASCENDING 0.0 * Kw.ARCDEG;#A
CONST SUNORBIT_DT 0.0 * Kw.AU / Kw.JC;#LT-1
CONST SUNECCENTRICITY_DT 0.0 / Kw.JC;#T-1
CONST SUNINCLINATION_DT 0.0 * Kw.ARCDEG / Kw.JC;#AT-1
CONST SUNLONGITUDE_DT 0.0 * Kw.ARCDEG / Kw.JC;#AT-1
CONST SUNPERIAPSIS_DT 0.0 * Kw.ARCDEG / Kw.JC;#AT-1
CONST SUNASCENDING_DT 0.0 * Kw.ARCDEG / Kw.JC;#AT-1
# Orbital Elements for EARTH
CONST EARTHORBIT 1.00000261 * Kw.AU;#L
CONST EARTHECCENTRICITY 0.01671123;#1
CONST EARTHINCLINATION 359.99998469 * Kw.ARCDEG;#A
CONST EARTHLONGITUDE 100.46457166 * Kw.ARCDEG;#A
CONST EARTHPERIAPSIS 102.93768193 * Kw.ARCDEG;#A
CONST EARTHASCENDING 0.0 * Kw.ARCDEG;#A
CONST EARTHORBIT_DT 0.00000562 * Kw.AU / Kw.JC;#LT-1
CONST EARTHECCENTRICITY_DT - 0.00004392 / Kw.JC;#T-1
CONST EARTHINCLINATION_DT - 0.01294668 * Kw.ARCDEG / Kw.JC;#AT-1
CONST EARTHLONGITUDE_DT 35999.37244981 * Kw.ARCDEG / Kw.JC;#AT-1
CONST EARTHPERIAPSIS_DT 0.32327364 * Kw.ARCDEG / Kw.JC;#AT-1
CONST EARTHASCENDING_DT 0.0 * Kw.ARCDEG / Kw.JC;#AT-1
# Orbital Elements for MERCURY
CONST MERCURYORBIT 0.38709927 * Kw.AU;#L
CONST MERCURYECCENTRICITY 0.20563593;#1
CONST MERCURYINCLINATION 7.00497902 * Kw.ARCDEG;#A
CONST MERCURYLONGITUDE 252.25032350 * Kw.ARCDEG;#A
CONST MERCURYPERIAPSIS 77.45779628 * Kw.ARCDEG;#A
CONST MERCURYASCENDING 48.33076593 * Kw.ARCDEG;#A
CONST MERCURYORBIT_DT 0.00000037 * Kw.AU / Kw.JC;#LT-1
CONST MERCURYECCENTRICITY_DT 0.00001906 / Kw.JC;#T-1
CONST MERCURYINCLINATION_DT - 0.00594749 * Kw.ARCDEG / Kw.JC;
      #AT-1
CONST MERCURYLONGITUDE_DT 149472.67411175 * Kw.ARCDEG / Kw.JC;
      #AT-1
CONST MERCURYPERIAPSIS_DT 0.16047689 * Kw.ARCDEG / Kw.JC;#AT-1
CONST MERCURYASCENDING_DT - 0.12534081 * Kw.ARCDEG / Kw.JC;#AT-1
# Orbital Elements for VENUS
CONST VENUSORBIT 0.72333566 * Kw.AU;#L
CONST VENUSECCENTRICITY 0.00677672;#1
CONST VENUSINCLINATION 3.39467605 * Kw.ARCDEG;#A
CONST VENUSLONGITUDE 181.97909950 * Kw.ARCDEG;#A
CONST VENUSPERIAPSIS 131.60246718 * Kw.ARCDEG;#A
CONST VENUSASCENDING 76.67984255 * Kw.ARCDEG;#A
CONST VENUSORBIT_DT 0.00000390 * Kw.AU / Kw.JC;#LT-1
CONST VENUSECCENTRICITY_DT - 0.00004107 / Kw.JC;#T-1
CONST VENUSINCLINATION_DT - 0.00078890 * Kw.ARCDEG / Kw.JC;#AT-1
CONST VENUSLONGITUDE_DT 58517.81538729 * Kw.ARCDEG / Kw.JC;#AT-1
CONST VENUSPERIAPSIS_DT 0.00268329 * Kw.ARCDEG / Kw.JC;#AT-1
CONST VENUSASCENDING_DT - 0.27769418 * Kw.ARCDEG / Kw.JC;#AT-1
# Orbital Elements for MARS
CONST MARSORBIT 1.52371034 * Kw.AU;#L
CONST MARSECCENTRICITY 0.09339410;#1
CONST MARSINCLINATION 1.84969142 * Kw.ARCDEG;#A
CONST MARSLONGITUDE 355.44656795 * Kw.ARCDEG;#A
CONST MARSPERIAPSIS 336.05637041 * Kw.ARCDEG;#A
CONST MARSASCENDING 49.55953891 * Kw.ARCDEG;#A
CONST MARSORBIT_DT 0.00001847 * Kw.AU / Kw.JC;#LT-1
CONST MARSECCENTRICITY_DT 0.00007882 / Kw.JC;#T-1
CONST MARSINCLINATION_DT - 0.00813131 * Kw.ARCDEG / Kw.JC;#AT-1
CONST MARSLONGITUDE_DT 19140.30268499 * Kw.ARCDEG / Kw.JC;#AT-1
CONST MARSPERIAPSIS_DT 0.44441088 * Kw.ARCDEG / Kw.JC;#AT-1
CONST MARSASCENDING_DT - 0.29257343 * Kw.ARCDEG / Kw.JC;#AT-1
# Orbital Elements for JUPITER
CONST JUPITERORBIT 5.20288700 * Kw.AU;#L
CONST JUPITERECCENTRICITY 0.04838624;#1
CONST JUPITERINCLINATION 1.30439695 * Kw.ARCDEG;#A
CONST JUPITERLONGITUDE 34.39644051 * Kw.ARCDEG;#A
CONST JUPITERPERIAPSIS 14.72847983 * Kw.ARCDEG;#A
CONST JUPITERASCENDING 100.47390909 * Kw.ARCDEG;#A
CONST JUPITERORBIT_DT - 0.00011607 * Kw.AU / Kw.JC;#LT-1
CONST JUPITERECCENTRICITY_DT - 0.00013253 / Kw.JC;#T-1
CONST JUPITERINCLINATION_DT - 0.00183714 * Kw.ARCDEG / Kw.JC;
      #AT-1
CONST JUPITERLONGITUDE_DT 3034.74612775 * Kw.ARCDEG / Kw.JC;#AT-1
CONST JUPITERPERIAPSIS_DT 0.21252668 * Kw.ARCDEG / Kw.JC;#AT-1
CONST JUPITERASCENDING_DT 0.20469106 * Kw.ARCDEG / Kw.JC;#AT-1
# Orbital Elements for SATURN
CONST SATURNORBIT 9.53667594 * Kw.AU;#L
CONST SATURNECCENTRICITY 0.05386179;#1
CONST SATURNINCLINATION 2.48599187 * Kw.ARCDEG;#A
CONST SATURNLONGITUDE 49.95424423 * Kw.ARCDEG;#A
CONST SATURNPERIAPSIS 92.59887831 * Kw.ARCDEG;#A
CONST SATURNASCENDING 113.66242448 * Kw.ARCDEG;#A
CONST SATURNORBIT_DT - 0.00125060 * Kw.AU / Kw.JC;#LT-1
CONST SATURNECCENTRICITY_DT - 0.00050991 / Kw.JC;#T-1
CONST SATURNINCLINATION_DT 0.00193609 * Kw.ARCDEG / Kw.JC;#AT-1
CONST SATURNLONGITUDE_DT 1222.49362201 * Kw.ARCDEG / Kw.JC;#AT-1
CONST SATURNPERIAPSIS_DT - 0.41897216 * Kw.ARCDEG / Kw.JC;#AT-1
CONST SATURNASCENDING_DT - 0.28867794 * Kw.ARCDEG / Kw.JC;#AT-1
# Orbital Elements for URANUS
CONST URANUSORBIT 19.18916464 * Kw.AU;#L
CONST URANUSECCENTRICITY 0.04725744;#1
CONST URANUSINCLINATION 0.77263783 * Kw.ARCDEG;#A
CONST URANUSLONGITUDE 313.23810451 * Kw.ARCDEG;#A
CONST URANUSPERIAPSIS 170.95427630 * Kw.ARCDEG;#A
CONST URANUSASCENDING 74.01692503 * Kw.ARCDEG;#A
CONST URANUSORBIT_DT - 0.00196176 * Kw.AU / Kw.JC;#LT-1
CONST URANUSECCENTRICITY_DT - 0.00004397 / Kw.JC;#T-1
CONST URANUSINCLINATION_DT - 0.00242939 * Kw.ARCDEG / Kw.JC;#AT-1
CONST URANUSLONGITUDE_DT 428.48202785 * Kw.ARCDEG / Kw.JC;#AT-1
CONST URANUSPERIAPSIS_DT 0.40805281 * Kw.ARCDEG / Kw.JC;#AT-1
CONST URANUSASCENDING_DT 0.04240589 * Kw.ARCDEG / Kw.JC;#AT-1
# Orbital Elements for NEPTUNE
CONST NEPTUNEORBIT 30.06992276 * Kw.AU;#L
CONST NEPTUNEECCENTRICITY 0.00859048;#1
CONST NEPTUNEINCLINATION 1.77004347 * Kw.ARCDEG;#A
CONST NEPTUNELONGITUDE 304.87997031 * Kw.ARCDEG;#A
CONST NEPTUNEPERIAPSIS 44.96476227 * Kw.ARCDEG;#A
CONST NEPTUNEASCENDING 131.78422574 * Kw.ARCDEG;#A
CONST NEPTUNEORBIT_DT 0.00026291 * Kw.AU / Kw.JC;#LT-1
CONST NEPTUNEECCENTRICITY_DT 0.00005105 / Kw.JC;#T-1
CONST NEPTUNEINCLINATION_DT 0.00035372 * Kw.ARCDEG / Kw.JC;#AT-1
CONST NEPTUNELONGITUDE_DT 218.45945325 * Kw.ARCDEG / Kw.JC;#AT-1
CONST NEPTUNEPERIAPSIS_DT - 0.32241464 * Kw.ARCDEG / Kw.JC;#AT-1
CONST NEPTUNEASCENDING_DT - 0.00508664 * Kw.ARCDEG / Kw.JC;#AT-1
# Orbital Elements for PLUTO
CONST PLUTOORBIT 39.48211675 * Kw.AU;#L
CONST PLUTOECCENTRICITY 0.24882730;#1
CONST PLUTOINCLINATION 17.14001206 * Kw.ARCDEG;#A
CONST PLUTOLONGITUDE 238.92903833 * Kw.ARCDEG;#A
CONST PLUTOPERIAPSIS 224.06891629 * Kw.ARCDEG;#A
CONST PLUTOASCENDING 110.30393684 * Kw.ARCDEG;#A
CONST PLUTOORBIT_DT - 0.00031596 * Kw.AU / Kw.JC;#LT-1
CONST PLUTOECCENTRICITY_DT 0.00005170 / Kw.JC;#T-1
CONST PLUTOINCLINATION_DT 0.00004818 * Kw.ARCDEG / Kw.JC;#AT-1
CONST PLUTOLONGITUDE_DT 145.20780515 * Kw.ARCDEG / Kw.JC;#AT-1
CONST PLUTOPERIAPSIS_DT - 0.04062942 * Kw.ARCDEG / Kw.JC;#AT-1
CONST PLUTOASCENDING_DT - 0.01183482 * Kw.ARCDEG / Kw.JC;#AT-1
# Orbital Elements for CERES
CONST CERESORBIT 2.76740933 * Kw.AU;#L
CONST CERESECCENTRICITY 0.07560729;#1
CONST CERESINCLINATION 10.59321706 * Kw.ARCDEG;#A
CONST CERESLONGITUDE 102.82668 * Kw.ARCDEG;#A
CONST CERESPERIAPSIS 73.023742647 * Kw.ARCDEG;#A
CONST CERESASCENDING 80.308882612359 * Kw.ARCDEG;#A
CONST CERESORBIT_DT 0.0 * Kw.AU / Kw.JC;#LT-1
CONST CERESECCENTRICITY_DT 0.0 / Kw.JC;#T-1
CONST CERESINCLINATION_DT 0.0 * Kw.ARCDEG / Kw.JC;#AT-1
CONST CERESLONGITUDE_DT 0.0 * Kw.ARCDEG / Kw.JC;#AT-1
CONST CERESPERIAPSIS_DT 0.0 * Kw.ARCDEG / Kw.JC;#AT-1
CONST CERESASCENDING_DT 0.0 * Kw.ARCDEG / Kw.JC;#AT-1
# Orbital Elements for ERIS
CONST ERISORBIT 67.781 * Kw.AU;#L
CONST ERISECCENTRICITY 0.44068;#1
CONST ERISINCLINATION 44.0445 * Kw.ARCDEG;#A
CONST ERISLONGITUDE 32.4926663 * Kw.ARCDEG;#A
CONST ERISPERIAPSIS 151.60371236817 * Kw.ARCDEG;#A
CONST ERISASCENDING 35.87992471211 * Kw.ARCDEG;#A
CONST ERISORBIT_DT 0.0 * Kw.AU / Kw.JC;#LT-1
CONST ERISECCENTRICITY_DT 0.0 / Kw.JC;#T-1
CONST ERISINCLINATION_DT 0.0 * Kw.ARCDEG / Kw.JC;#AT-1
CONST ERISLONGITUDE_DT 0.0 * Kw.ARCDEG / Kw.JC;#AT-1
CONST ERISPERIAPSIS_DT 0.0 * Kw.ARCDEG / Kw.JC;#AT-1
CONST ERISASCENDING_DT 0.0 * Kw.ARCDEG / Kw.JC;#AT-1
# Orbital Elements for MAKEMAKE
CONST MAKEMAKEORBIT 45.715 * Kw.AU;#L
CONST MAKEMAKEECCENTRICITY 0.15586;#1
CONST MAKEMAKEINCLINATION 29.00685 * Kw.ARCDEG;#A
CONST MAKEMAKELONGITUDE 177.2966805 * Kw.ARCDEG;#A
CONST MAKEMAKEPERIAPSIS 295.642772002 * Kw.ARCDEG;#A
CONST MAKEMAKEASCENDING 79.616805978978 * Kw.ARCDEG;#A
CONST MAKEMAKEORBIT_DT 0.0 * Kw.AU / Kw.JC;#LT-1
CONST MAKEMAKEECCENTRICITY_DT 0.0 / Kw.JC;#T-1
CONST MAKEMAKEINCLINATION_DT 0.0 * Kw.ARCDEG / Kw.JC;#AT-1
CONST MAKEMAKELONGITUDE_DT 0.0 * Kw.ARCDEG / Kw.JC;#AT-1
CONST MAKEMAKEPERIAPSIS_DT 0.0 * Kw.ARCDEG / Kw.JC;#AT-1
CONST MAKEMAKEASCENDING_DT 0.0 * Kw.ARCDEG / Kw.JC;#AT-1
# Orbital Elements for HAUMEA
CONST HAUMEAORBIT 43.218 * Kw.AU;#L
CONST HAUMEAECCENTRICITY 0.19126;#1
CONST HAUMEAINCLINATION 28.19 * Kw.ARCDEG;#A
CONST HAUMEALONGITUDE 215.687315 * Kw.ARCDEG;#A
CONST HAUMEAPERIAPSIS 238.69440821915 * Kw.ARCDEG;#A
CONST HAUMEAASCENDING 122.01840302632 * Kw.ARCDEG;#A
CONST HAUMEAORBIT_DT 0.0 * Kw.AU / Kw.JC;#LT-1
CONST HAUMEAECCENTRICITY_DT 0.0 / Kw.JC;#T-1
CONST HAUMEAINCLINATION_DT 0.0 * Kw.ARCDEG / Kw.JC;#AT-1
CONST HAUMEALONGITUDE_DT 0.0 * Kw.ARCDEG / Kw.JC;#AT-1
CONST HAUMEAPERIAPSIS_DT 0.0 * Kw.ARCDEG / Kw.JC;#AT-1
CONST HAUMEAASCENDING_DT 0.0 * Kw.ARCDEG / Kw.JC;#AT-1
#   FFFFFFFFFFunction ---------------------------------- margot #
FUNC DBL margot(DBL pmass
      , DBL porbit):
   # the const, k, in the following routine equals
   #   k = sqrt(3) * (100 * Tsun)**0.75 * AU**1.125
   #         / (SUNMASS * C**1.5)
   #   k = T**0.75*L**1.125/(M*L**1.5)
   #   where:
   #      C = 2*sqrt(3) HillRadius
   #      HillRadius = _ORBIT * cbrt(_MASS / (3 * SUNMASS))
   #      Tsun = 1E+10 year = lifetime of sun
   #      T_star = (2.5E+108 s kg**3) / starMASS**3
   #   planets have a value much greater than 1, and
   #   dwarf planets have a value much less than 1
   DBL retvalu;
   IF pmass <= 0.0 OR porbit <= 0.0:
      retvalu = 0.0;
   ELSE:
      retvalu = 5.0401742E-10 * pmass / EXP(LN(porbit) * 1.125);
   IF_END
   RETURN retvalu;
FUNC_END
#   FFFFFFFFFFunction ---------------------------- sternlevison #
FUNC DBL sternlevison(DBL pmass
      , DBL porbit):
   # the const, k, in the following routine equals
   #   k=1.53E+5 * AU**1.5 / EARTHMASS**2
   #   planets have a value much larger than 1, and
   #   dwarf planets have a value much less than 1
   DBL retvalu;
   DBL xx;
   IF pmass <= 0.0 OR porbit <= 0.0:
      retvalu = 0.0;
   ELSE:
      xx = 2.0 * LN(pmass) - 1.5 * LN(porbit);
      retvalu = 2.482E-28 * EXP(xx);
   IF_END
   RETURN retvalu;
FUNC_END
BLOCK:# SUN must be < 2**15 for VB6 VBDOTNET
   BLOCK_DEF CONST LC_P1_PREV_PL - 1;
   # 1
   BLOCK_DEF CONST LC_P1_SUN 0;
   # 1
   BLOCK_DEF CONST LC_P1_MERCURY 1;
   # 1
   BLOCK_DEF CONST LC_P1_VENUS 2;
   # 1
   BLOCK_DEF CONST LC_P1_EARTH 3;
   # 1
   BLOCK_DEF CONST LC_P1_MARS 4;
   # 1
   BLOCK_DEF CONST LC_P1_JUPITER 5;
   # 1
   BLOCK_DEF CONST LC_P1_SATURN 6;
   # 1
   BLOCK_DEF CONST LC_P1_URANUS 7;
   # 1
   BLOCK_DEF CONST LC_P1_NEPTUNE 8;
   # 1
   BLOCK_DEF CONST LC_P1_PLUTO 9;
   # 1
   BLOCK_DEF CONST LC_P1_CERES 10;
   # 1
   BLOCK_DEF CONST LC_P1_ERIS 11;
   # 1
   BLOCK_DEF CONST LC_P1_MAKEMAKE 12;
   # 1
   BLOCK_DEF CONST LC_P1_HAUMEA 13;
   # 1
   BLOCK_DEF CONST LC_P1_COUNT LC_P1_HAUMEA + 1;
   # 1
   BLOCK_DEF CONST LC_P1_ERR - 1;
   # 1
   BLOCK_DEF CONST LC_P2_GM 0;
   BLOCK_DEF CONST LC_P2_DAY 1;
   BLOCK_DEF CONST LC_P2_FLATNESS 2;
   BLOCK_DEF CONST LC_P2_A 3;
   BLOCK_DEF CONST LC_P2_C 4;
   BLOCK_DEF CONST LC_P2_YEAR 5;
   BLOCK_DEF CONST LC_P2_ORB 6;
   BLOCK_DEF CONST LC_P2_ECC 7;
   BLOCK_DEF CONST LC_P2_INC 8;
   BLOCK_DEF CONST LC_P2_LON 9;
   BLOCK_DEF CONST LC_P2_PER 10;
   BLOCK_DEF CONST LC_P2_ASC 11;
   BLOCK_DEF CONST LC_P2_ORB_DT 12;
   BLOCK_DEF CONST LC_P2_ECC_DT 13;
   BLOCK_DEF CONST LC_P2_INC_DT 14;
   BLOCK_DEF CONST LC_P2_LON_DT 15;
   BLOCK_DEF CONST LC_P2_PER_DT 16;
   BLOCK_DEF CONST LC_P2_ASC_DT 17;
   BLOCK_DEF CONST LC_P2_COUNT 18;
   BLOCK_DEF DBL lv_pl_helio_arr[3];
   BLOCK_DEF DBL lv_pl_geo_arr[3];
   BLOCK_DEF INT lv_pl_ind = LC_P1_PREV_PL;
   BLOCK_DEF DBL lv_pl_mtrx[LC_P1_COUNT][LC_P2_COUNT];
   BLOCK_DEF DBL lv_pl_earth_year = EARTHYEAR;
   BLOCK_DEF DBL lv_pl_jtwoktime = 1.0 / 64.0;
   # setup macro
   #   FFFFFFFFFFunction --------------------------- lf_pl_init #
   BLOCK_DEF FUNC INT lf_pl_init(INT plnt):
      BLOCK_USE lv_pl_ind;
      BLOCK_USE lv_pl_mtrx[];
      IF lv_pl_ind < 0:
         lv_pl_mtrx[LC_P1_SUN][LC_P2_GM] = SUNGM;
         lv_pl_mtrx[LC_P1_SUN][LC_P2_DAY] = SUNDAY;
         lv_pl_mtrx[LC_P1_SUN][LC_P2_FLATNESS] = SUNFLATNESS;
         lv_pl_mtrx[LC_P1_SUN][LC_P2_A] = SUN_A;
         lv_pl_mtrx[LC_P1_SUN][LC_P2_C] = SUN_C;
         lv_pl_mtrx[LC_P1_SUN][LC_P2_YEAR] = SUNYEAR;
         lv_pl_mtrx[LC_P1_SUN][LC_P2_ORB] = SUNORBIT;
         lv_pl_mtrx[LC_P1_SUN][LC_P2_ECC] = SUNECCENTRICITY;
         lv_pl_mtrx[LC_P1_SUN][LC_P2_INC] = SUNINCLINATION;
         lv_pl_mtrx[LC_P1_SUN][LC_P2_LON] = SUNLONGITUDE;
         lv_pl_mtrx[LC_P1_SUN][LC_P2_PER] = SUNPERIAPSIS;
         lv_pl_mtrx[LC_P1_SUN][LC_P2_ASC] = SUNASCENDING;
         lv_pl_mtrx[LC_P1_SUN][LC_P2_ORB_DT] = SUNORBIT_DT;
         lv_pl_mtrx[LC_P1_SUN][LC_P2_ECC_DT]
               = SUNECCENTRICITY_DT;
         lv_pl_mtrx[LC_P1_SUN][LC_P2_INC_DT] = SUNINCLINATION_DT;
         lv_pl_mtrx[LC_P1_SUN][LC_P2_LON_DT] = SUNLONGITUDE_DT;
         lv_pl_mtrx[LC_P1_SUN][LC_P2_PER_DT] = SUNPERIAPSIS_DT;
         lv_pl_mtrx[LC_P1_SUN][LC_P2_ASC_DT] = SUNASCENDING_DT;
         lv_pl_mtrx[LC_P1_MERCURY][LC_P2_GM] = MERCURYGM;
         lv_pl_mtrx[LC_P1_MERCURY][LC_P2_DAY] = MERCURYDAY;
         lv_pl_mtrx[LC_P1_MERCURY][LC_P2_FLATNESS]
               = MERCURYFLATNESS;
         lv_pl_mtrx[LC_P1_MERCURY][LC_P2_A] = MERCURY_A;
         lv_pl_mtrx[LC_P1_MERCURY][LC_P2_C] = MERCURY_C;
         lv_pl_mtrx[LC_P1_MERCURY][LC_P2_YEAR] = MERCURYYEAR;
         lv_pl_mtrx[LC_P1_MERCURY][LC_P2_ORB] = MERCURYORBIT;
         lv_pl_mtrx[LC_P1_MERCURY][LC_P2_ECC]
               = MERCURYECCENTRICITY;
         lv_pl_mtrx[LC_P1_MERCURY][LC_P2_INC]
               = MERCURYINCLINATION;
         lv_pl_mtrx[LC_P1_MERCURY][LC_P2_LON] = MERCURYLONGITUDE;
         lv_pl_mtrx[LC_P1_MERCURY][LC_P2_PER] = MERCURYPERIAPSIS;
         lv_pl_mtrx[LC_P1_MERCURY][LC_P2_ASC] = MERCURYASCENDING;
         lv_pl_mtrx[LC_P1_MERCURY][LC_P2_ORB_DT]
               = MERCURYORBIT_DT;
         lv_pl_mtrx[LC_P1_MERCURY][LC_P2_ECC_DT]
               = MERCURYECCENTRICITY_DT;
         lv_pl_mtrx[LC_P1_MERCURY][LC_P2_INC_DT]
               = MERCURYINCLINATION_DT;
         lv_pl_mtrx[LC_P1_MERCURY][LC_P2_LON_DT]
               = MERCURYLONGITUDE_DT;
         lv_pl_mtrx[LC_P1_MERCURY][LC_P2_PER_DT]
               = MERCURYPERIAPSIS_DT;
         lv_pl_mtrx[LC_P1_MERCURY][LC_P2_ASC_DT]
               = MERCURYASCENDING_DT;
         lv_pl_mtrx[LC_P1_VENUS][LC_P2_GM] = VENUSGM;
         lv_pl_mtrx[LC_P1_VENUS][LC_P2_DAY] = VENUSDAY;
         lv_pl_mtrx[LC_P1_VENUS][LC_P2_FLATNESS] = VENUSFLATNESS;
         lv_pl_mtrx[LC_P1_VENUS][LC_P2_A] = VENUS_A;
         lv_pl_mtrx[LC_P1_VENUS][LC_P2_C] = VENUS_C;
         lv_pl_mtrx[LC_P1_VENUS][LC_P2_YEAR] = VENUSYEAR;
         lv_pl_mtrx[LC_P1_VENUS][LC_P2_ORB] = VENUSORBIT;
         lv_pl_mtrx[LC_P1_VENUS][LC_P2_ECC] = VENUSECCENTRICITY;
         lv_pl_mtrx[LC_P1_VENUS][LC_P2_INC] = VENUSINCLINATION;
         lv_pl_mtrx[LC_P1_VENUS][LC_P2_LON] = VENUSLONGITUDE;
         lv_pl_mtrx[LC_P1_VENUS][LC_P2_PER] = VENUSPERIAPSIS;
         lv_pl_mtrx[LC_P1_VENUS][LC_P2_ASC] = VENUSASCENDING;
         lv_pl_mtrx[LC_P1_VENUS][LC_P2_ORB_DT] = VENUSORBIT_DT;
         lv_pl_mtrx[LC_P1_VENUS][LC_P2_ECC_DT]
               = VENUSECCENTRICITY_DT;
         lv_pl_mtrx[LC_P1_VENUS][LC_P2_INC_DT]
               = VENUSINCLINATION_DT;
         lv_pl_mtrx[LC_P1_VENUS][LC_P2_LON_DT]
               = VENUSLONGITUDE_DT;
         lv_pl_mtrx[LC_P1_VENUS][LC_P2_PER_DT]
               = VENUSPERIAPSIS_DT;
         lv_pl_mtrx[LC_P1_VENUS][LC_P2_ASC_DT]
               = VENUSASCENDING_DT;
         lv_pl_mtrx[LC_P1_EARTH][LC_P2_GM] = EARTHGM;
         lv_pl_mtrx[LC_P1_EARTH][LC_P2_DAY] = EARTHDAY;
         lv_pl_mtrx[LC_P1_EARTH][LC_P2_FLATNESS] = EARTHFLATNESS;
         lv_pl_mtrx[LC_P1_EARTH][LC_P2_A] = EARTH_A;
         lv_pl_mtrx[LC_P1_EARTH][LC_P2_C] = EARTH_C;
         lv_pl_mtrx[LC_P1_EARTH][LC_P2_YEAR] = EARTHYEAR;
         lv_pl_mtrx[LC_P1_EARTH][LC_P2_ORB] = EARTHORBIT;
         lv_pl_mtrx[LC_P1_EARTH][LC_P2_ECC] = EARTHECCENTRICITY;
         lv_pl_mtrx[LC_P1_EARTH][LC_P2_INC] = EARTHINCLINATION;
         lv_pl_mtrx[LC_P1_EARTH][LC_P2_LON] = EARTHLONGITUDE;
         lv_pl_mtrx[LC_P1_EARTH][LC_P2_PER] = EARTHPERIAPSIS;
         lv_pl_mtrx[LC_P1_EARTH][LC_P2_ASC] = EARTHASCENDING;
         lv_pl_mtrx[LC_P1_EARTH][LC_P2_ORB_DT] = EARTHORBIT_DT;
         lv_pl_mtrx[LC_P1_EARTH][LC_P2_ECC_DT]
               = EARTHECCENTRICITY_DT;
         lv_pl_mtrx[LC_P1_EARTH][LC_P2_INC_DT]
               = EARTHINCLINATION_DT;
         lv_pl_mtrx[LC_P1_EARTH][LC_P2_LON_DT]
               = EARTHLONGITUDE_DT;
         lv_pl_mtrx[LC_P1_EARTH][LC_P2_PER_DT]
               = EARTHPERIAPSIS_DT;
         lv_pl_mtrx[LC_P1_EARTH][LC_P2_ASC_DT]
               = EARTHASCENDING_DT;
         lv_pl_mtrx[LC_P1_MARS][LC_P2_GM] = MARSGM;
         lv_pl_mtrx[LC_P1_MARS][LC_P2_DAY] = MARSDAY;
         lv_pl_mtrx[LC_P1_MARS][LC_P2_FLATNESS] = MARSFLATNESS;
         lv_pl_mtrx[LC_P1_MARS][LC_P2_A] = MARS_A;
         lv_pl_mtrx[LC_P1_MARS][LC_P2_C] = MARS_C;
         lv_pl_mtrx[LC_P1_MARS][LC_P2_YEAR] = MARSYEAR;
         lv_pl_mtrx[LC_P1_MARS][LC_P2_ORB] = MARSORBIT;
         lv_pl_mtrx[LC_P1_MARS][LC_P2_ECC] = MARSECCENTRICITY;
         lv_pl_mtrx[LC_P1_MARS][LC_P2_INC] = MARSINCLINATION;
         lv_pl_mtrx[LC_P1_MARS][LC_P2_LON] = MARSLONGITUDE;
         lv_pl_mtrx[LC_P1_MARS][LC_P2_PER] = MARSPERIAPSIS;
         lv_pl_mtrx[LC_P1_MARS][LC_P2_ASC] = MARSASCENDING;
         lv_pl_mtrx[LC_P1_MARS][LC_P2_ORB_DT] = MARSORBIT_DT;
         lv_pl_mtrx[LC_P1_MARS][LC_P2_ECC_DT]
               = MARSECCENTRICITY_DT;
         lv_pl_mtrx[LC_P1_MARS][LC_P2_INC_DT]
               = MARSINCLINATION_DT;
         lv_pl_mtrx[LC_P1_MARS][LC_P2_LON_DT] = MARSLONGITUDE_DT;
         lv_pl_mtrx[LC_P1_MARS][LC_P2_PER_DT] = MARSPERIAPSIS_DT;
         lv_pl_mtrx[LC_P1_MARS][LC_P2_ASC_DT] = MARSASCENDING_DT;
         lv_pl_mtrx[LC_P1_JUPITER][LC_P2_GM] = JUPITERGM;
         lv_pl_mtrx[LC_P1_JUPITER][LC_P2_DAY] = JUPITERDAY;
         lv_pl_mtrx[LC_P1_JUPITER][LC_P2_FLATNESS]
               = JUPITERFLATNESS;
         lv_pl_mtrx[LC_P1_JUPITER][LC_P2_A] = JUPITER_A;
         lv_pl_mtrx[LC_P1_JUPITER][LC_P2_C] = JUPITER_C;
         lv_pl_mtrx[LC_P1_JUPITER][LC_P2_YEAR] = JUPITERYEAR;
         lv_pl_mtrx[LC_P1_JUPITER][LC_P2_ORB] = JUPITERORBIT;
         lv_pl_mtrx[LC_P1_JUPITER][LC_P2_ECC]
               = JUPITERECCENTRICITY;
         lv_pl_mtrx[LC_P1_JUPITER][LC_P2_INC]
               = JUPITERINCLINATION;
         lv_pl_mtrx[LC_P1_JUPITER][LC_P2_LON] = JUPITERLONGITUDE;
         lv_pl_mtrx[LC_P1_JUPITER][LC_P2_PER] = JUPITERPERIAPSIS;
         lv_pl_mtrx[LC_P1_JUPITER][LC_P2_ASC] = JUPITERASCENDING;
         lv_pl_mtrx[LC_P1_JUPITER][LC_P2_ORB_DT]
               = JUPITERORBIT_DT;
         lv_pl_mtrx[LC_P1_JUPITER][LC_P2_ECC_DT]
               = JUPITERECCENTRICITY_DT;
         lv_pl_mtrx[LC_P1_JUPITER][LC_P2_INC_DT]
               = JUPITERINCLINATION_DT;
         lv_pl_mtrx[LC_P1_JUPITER][LC_P2_LON_DT]
               = JUPITERLONGITUDE_DT;
         lv_pl_mtrx[LC_P1_JUPITER][LC_P2_PER_DT]
               = JUPITERPERIAPSIS_DT;
         lv_pl_mtrx[LC_P1_JUPITER][LC_P2_ASC_DT]
               = JUPITERASCENDING_DT;
         lv_pl_mtrx[LC_P1_SATURN][LC_P2_GM] = SATURNGM;
         lv_pl_mtrx[LC_P1_SATURN][LC_P2_DAY] = SATURNDAY;
         lv_pl_mtrx[LC_P1_SATURN][LC_P2_FLATNESS]
               = SATURNFLATNESS;
         lv_pl_mtrx[LC_P1_SATURN][LC_P2_A] = SATURN_A;
         lv_pl_mtrx[LC_P1_SATURN][LC_P2_C] = SATURN_C;
         lv_pl_mtrx[LC_P1_SATURN][LC_P2_YEAR] = SATURNYEAR;
         lv_pl_mtrx[LC_P1_SATURN][LC_P2_ORB] = SATURNORBIT;
         lv_pl_mtrx[LC_P1_SATURN][LC_P2_ECC]
               = SATURNECCENTRICITY;
         lv_pl_mtrx[LC_P1_SATURN][LC_P2_INC] = SATURNINCLINATION;
         lv_pl_mtrx[LC_P1_SATURN][LC_P2_LON] = SATURNLONGITUDE;
         lv_pl_mtrx[LC_P1_SATURN][LC_P2_PER] = SATURNPERIAPSIS;
         lv_pl_mtrx[LC_P1_SATURN][LC_P2_ASC] = SATURNASCENDING;
         lv_pl_mtrx[LC_P1_SATURN][LC_P2_ORB_DT] = SATURNORBIT_DT;
         lv_pl_mtrx[LC_P1_SATURN][LC_P2_ECC_DT]
               = SATURNECCENTRICITY_DT;
         lv_pl_mtrx[LC_P1_SATURN][LC_P2_INC_DT]
               = SATURNINCLINATION_DT;
         lv_pl_mtrx[LC_P1_SATURN][LC_P2_LON_DT]
               = SATURNLONGITUDE_DT;
         lv_pl_mtrx[LC_P1_SATURN][LC_P2_PER_DT]
               = SATURNPERIAPSIS_DT;
         lv_pl_mtrx[LC_P1_SATURN][LC_P2_ASC_DT]
               = SATURNASCENDING_DT;
         lv_pl_mtrx[LC_P1_URANUS][LC_P2_GM] = URANUSGM;
         lv_pl_mtrx[LC_P1_URANUS][LC_P2_DAY] = URANUSDAY;
         lv_pl_mtrx[LC_P1_URANUS][LC_P2_FLATNESS]
               = URANUSFLATNESS;
         lv_pl_mtrx[LC_P1_URANUS][LC_P2_A] = URANUS_A;
         lv_pl_mtrx[LC_P1_URANUS][LC_P2_C] = URANUS_C;
         lv_pl_mtrx[LC_P1_URANUS][LC_P2_YEAR] = URANUSYEAR;
         lv_pl_mtrx[LC_P1_URANUS][LC_P2_ORB] = URANUSORBIT;
         lv_pl_mtrx[LC_P1_URANUS][LC_P2_ECC]
               = URANUSECCENTRICITY;
         lv_pl_mtrx[LC_P1_URANUS][LC_P2_INC] = URANUSINCLINATION;
         lv_pl_mtrx[LC_P1_URANUS][LC_P2_LON] = URANUSLONGITUDE;
         lv_pl_mtrx[LC_P1_URANUS][LC_P2_PER] = URANUSPERIAPSIS;
         lv_pl_mtrx[LC_P1_URANUS][LC_P2_ASC] = URANUSASCENDING;
         lv_pl_mtrx[LC_P1_URANUS][LC_P2_ORB_DT] = URANUSORBIT_DT;
         lv_pl_mtrx[LC_P1_URANUS][LC_P2_ECC_DT]
               = URANUSECCENTRICITY_DT;
         lv_pl_mtrx[LC_P1_URANUS][LC_P2_INC_DT]
               = URANUSINCLINATION_DT;
         lv_pl_mtrx[LC_P1_URANUS][LC_P2_LON_DT]
               = URANUSLONGITUDE_DT;
         lv_pl_mtrx[LC_P1_URANUS][LC_P2_PER_DT]
               = URANUSPERIAPSIS_DT;
         lv_pl_mtrx[LC_P1_URANUS][LC_P2_ASC_DT]
               = URANUSASCENDING_DT;
         lv_pl_mtrx[LC_P1_NEPTUNE][LC_P2_GM] = NEPTUNEGM;
         lv_pl_mtrx[LC_P1_NEPTUNE][LC_P2_DAY] = NEPTUNEDAY;
         lv_pl_mtrx[LC_P1_NEPTUNE][LC_P2_FLATNESS]
               = NEPTUNEFLATNESS;
         lv_pl_mtrx[LC_P1_NEPTUNE][LC_P2_A] = NEPTUNE_A;
         lv_pl_mtrx[LC_P1_NEPTUNE][LC_P2_C] = NEPTUNE_C;
         lv_pl_mtrx[LC_P1_NEPTUNE][LC_P2_YEAR] = NEPTUNEYEAR;
         lv_pl_mtrx[LC_P1_NEPTUNE][LC_P2_ORB] = NEPTUNEORBIT;
         lv_pl_mtrx[LC_P1_NEPTUNE][LC_P2_ECC]
               = NEPTUNEECCENTRICITY;
         lv_pl_mtrx[LC_P1_NEPTUNE][LC_P2_INC]
               = NEPTUNEINCLINATION;
         lv_pl_mtrx[LC_P1_NEPTUNE][LC_P2_LON] = NEPTUNELONGITUDE;
         lv_pl_mtrx[LC_P1_NEPTUNE][LC_P2_PER] = NEPTUNEPERIAPSIS;
         lv_pl_mtrx[LC_P1_NEPTUNE][LC_P2_ASC] = NEPTUNEASCENDING;
         lv_pl_mtrx[LC_P1_NEPTUNE][LC_P2_ORB_DT]
               = NEPTUNEORBIT_DT;
         lv_pl_mtrx[LC_P1_NEPTUNE][LC_P2_ECC_DT]
               = NEPTUNEECCENTRICITY_DT;
         lv_pl_mtrx[LC_P1_NEPTUNE][LC_P2_INC_DT]
               = NEPTUNEINCLINATION_DT;
         lv_pl_mtrx[LC_P1_NEPTUNE][LC_P2_LON_DT]
               = NEPTUNELONGITUDE_DT;
         lv_pl_mtrx[LC_P1_NEPTUNE][LC_P2_PER_DT]
               = NEPTUNEPERIAPSIS_DT;
         lv_pl_mtrx[LC_P1_NEPTUNE][LC_P2_ASC_DT]
               = NEPTUNEASCENDING_DT;
         lv_pl_mtrx[LC_P1_PLUTO][LC_P2_GM] = PLUTOGM;
         lv_pl_mtrx[LC_P1_PLUTO][LC_P2_DAY] = PLUTODAY;
         lv_pl_mtrx[LC_P1_PLUTO][LC_P2_FLATNESS] = PLUTOFLATNESS;
         lv_pl_mtrx[LC_P1_PLUTO][LC_P2_A] = PLUTO_A;
         lv_pl_mtrx[LC_P1_PLUTO][LC_P2_C] = PLUTO_C;
         lv_pl_mtrx[LC_P1_PLUTO][LC_P2_YEAR] = PLUTOYEAR;
         lv_pl_mtrx[LC_P1_PLUTO][LC_P2_ORB] = PLUTOORBIT;
         lv_pl_mtrx[LC_P1_PLUTO][LC_P2_ECC] = PLUTOECCENTRICITY;
         lv_pl_mtrx[LC_P1_PLUTO][LC_P2_INC] = PLUTOINCLINATION;
         lv_pl_mtrx[LC_P1_PLUTO][LC_P2_LON] = PLUTOLONGITUDE;
         lv_pl_mtrx[LC_P1_PLUTO][LC_P2_PER] = PLUTOPERIAPSIS;
         lv_pl_mtrx[LC_P1_PLUTO][LC_P2_ASC] = PLUTOASCENDING;
         lv_pl_mtrx[LC_P1_PLUTO][LC_P2_ORB_DT] = PLUTOORBIT_DT;
         lv_pl_mtrx[LC_P1_PLUTO][LC_P2_ECC_DT]
               = PLUTOECCENTRICITY_DT;
         lv_pl_mtrx[LC_P1_PLUTO][LC_P2_INC_DT]
               = PLUTOINCLINATION_DT;
         lv_pl_mtrx[LC_P1_PLUTO][LC_P2_LON_DT]
               = PLUTOLONGITUDE_DT;
         lv_pl_mtrx[LC_P1_PLUTO][LC_P2_PER_DT]
               = PLUTOPERIAPSIS_DT;
         lv_pl_mtrx[LC_P1_PLUTO][LC_P2_ASC_DT]
               = PLUTOASCENDING_DT;
         lv_pl_mtrx[LC_P1_CERES][LC_P2_GM] = CERESGM;
         lv_pl_mtrx[LC_P1_CERES][LC_P2_DAY] = CERESDAY;
         lv_pl_mtrx[LC_P1_CERES][LC_P2_FLATNESS] = CERESFLATNESS;
         lv_pl_mtrx[LC_P1_CERES][LC_P2_A] = CERES_A;
         lv_pl_mtrx[LC_P1_CERES][LC_P2_C] = CERES_C;
         lv_pl_mtrx[LC_P1_CERES][LC_P2_YEAR] = CERESYEAR;
         lv_pl_mtrx[LC_P1_CERES][LC_P2_ORB] = CERESORBIT;
         lv_pl_mtrx[LC_P1_CERES][LC_P2_ECC] = CERESECCENTRICITY;
         lv_pl_mtrx[LC_P1_CERES][LC_P2_INC] = CERESINCLINATION;
         lv_pl_mtrx[LC_P1_CERES][LC_P2_LON] = CERESLONGITUDE;
         lv_pl_mtrx[LC_P1_CERES][LC_P2_PER] = CERESPERIAPSIS;
         lv_pl_mtrx[LC_P1_CERES][LC_P2_ASC] = CERESASCENDING;
         lv_pl_mtrx[LC_P1_CERES][LC_P2_ORB_DT] = CERESORBIT_DT;
         lv_pl_mtrx[LC_P1_CERES][LC_P2_ECC_DT]
               = CERESECCENTRICITY_DT;
         lv_pl_mtrx[LC_P1_CERES][LC_P2_INC_DT]
               = CERESINCLINATION_DT;
         lv_pl_mtrx[LC_P1_CERES][LC_P2_LON_DT]
               = CERESLONGITUDE_DT;
         lv_pl_mtrx[LC_P1_CERES][LC_P2_PER_DT]
               = CERESPERIAPSIS_DT;
         lv_pl_mtrx[LC_P1_CERES][LC_P2_ASC_DT]
               = CERESASCENDING_DT;
         lv_pl_mtrx[LC_P1_ERIS][LC_P2_GM] = ERISGM;
         lv_pl_mtrx[LC_P1_ERIS][LC_P2_DAY] = ERISDAY;
         lv_pl_mtrx[LC_P1_ERIS][LC_P2_FLATNESS] = ERISFLATNESS;
         lv_pl_mtrx[LC_P1_ERIS][LC_P2_A] = ERIS_A;
         lv_pl_mtrx[LC_P1_ERIS][LC_P2_C] = ERIS_C;
         lv_pl_mtrx[LC_P1_ERIS][LC_P2_YEAR] = ERISYEAR;
         lv_pl_mtrx[LC_P1_ERIS][LC_P2_ORB] = ERISORBIT;
         lv_pl_mtrx[LC_P1_ERIS][LC_P2_ECC] = ERISECCENTRICITY;
         lv_pl_mtrx[LC_P1_ERIS][LC_P2_INC] = ERISINCLINATION;
         lv_pl_mtrx[LC_P1_ERIS][LC_P2_LON] = ERISLONGITUDE;
         lv_pl_mtrx[LC_P1_ERIS][LC_P2_PER] = ERISPERIAPSIS;
         lv_pl_mtrx[LC_P1_ERIS][LC_P2_ASC] = ERISASCENDING;
         lv_pl_mtrx[LC_P1_ERIS][LC_P2_ORB_DT] = ERISORBIT_DT;
         lv_pl_mtrx[LC_P1_ERIS][LC_P2_ECC_DT]
               = ERISECCENTRICITY_DT;
         lv_pl_mtrx[LC_P1_ERIS][LC_P2_INC_DT]
               = ERISINCLINATION_DT;
         lv_pl_mtrx[LC_P1_ERIS][LC_P2_LON_DT] = ERISLONGITUDE_DT;
         lv_pl_mtrx[LC_P1_ERIS][LC_P2_PER_DT] = ERISPERIAPSIS_DT;
         lv_pl_mtrx[LC_P1_ERIS][LC_P2_ASC_DT] = ERISASCENDING_DT;
         lv_pl_mtrx[LC_P1_MAKEMAKE][LC_P2_GM] = MAKEMAKEGM;
         lv_pl_mtrx[LC_P1_MAKEMAKE][LC_P2_DAY] = MAKEMAKEDAY;
         lv_pl_mtrx[LC_P1_MAKEMAKE][LC_P2_FLATNESS]
               = MAKEMAKEFLATNESS;
         lv_pl_mtrx[LC_P1_MAKEMAKE][LC_P2_A] = MAKEMAKE_A;
         lv_pl_mtrx[LC_P1_MAKEMAKE][LC_P2_C] = MAKEMAKE_C;
         lv_pl_mtrx[LC_P1_MAKEMAKE][LC_P2_YEAR] = MAKEMAKEYEAR;
         lv_pl_mtrx[LC_P1_MAKEMAKE][LC_P2_ORB] = MAKEMAKEORBIT;
         lv_pl_mtrx[LC_P1_MAKEMAKE][LC_P2_ECC]
               = MAKEMAKEECCENTRICITY;
         lv_pl_mtrx[LC_P1_MAKEMAKE][LC_P2_INC]
               = MAKEMAKEINCLINATION;
         lv_pl_mtrx[LC_P1_MAKEMAKE][LC_P2_LON]
               = MAKEMAKELONGITUDE;
         lv_pl_mtrx[LC_P1_MAKEMAKE][LC_P2_PER]
               = MAKEMAKEPERIAPSIS;
         lv_pl_mtrx[LC_P1_MAKEMAKE][LC_P2_ASC]
               = MAKEMAKEASCENDING;
         lv_pl_mtrx[LC_P1_MAKEMAKE][LC_P2_ORB_DT]
               = MAKEMAKEORBIT_DT;
         lv_pl_mtrx[LC_P1_MAKEMAKE][LC_P2_ECC_DT]
               = MAKEMAKEECCENTRICITY_DT;
         lv_pl_mtrx[LC_P1_MAKEMAKE][LC_P2_INC_DT]
               = MAKEMAKEINCLINATION_DT;
         lv_pl_mtrx[LC_P1_MAKEMAKE][LC_P2_LON_DT]
               = MAKEMAKELONGITUDE_DT;
         lv_pl_mtrx[LC_P1_MAKEMAKE][LC_P2_PER_DT]
               = MAKEMAKEPERIAPSIS_DT;
         lv_pl_mtrx[LC_P1_MAKEMAKE][LC_P2_ASC_DT]
               = MAKEMAKEASCENDING_DT;
         lv_pl_mtrx[LC_P1_HAUMEA][LC_P2_GM] = HAUMEAGM;
         lv_pl_mtrx[LC_P1_HAUMEA][LC_P2_DAY] = HAUMEADAY;
         lv_pl_mtrx[LC_P1_HAUMEA][LC_P2_FLATNESS]
               = HAUMEAFLATNESS;
         lv_pl_mtrx[LC_P1_HAUMEA][LC_P2_A] = HAUMEA_A;
         lv_pl_mtrx[LC_P1_HAUMEA][LC_P2_C] = HAUMEA_C;
         lv_pl_mtrx[LC_P1_HAUMEA][LC_P2_YEAR] = HAUMEAYEAR;
         lv_pl_mtrx[LC_P1_HAUMEA][LC_P2_ORB] = HAUMEAORBIT;
         lv_pl_mtrx[LC_P1_HAUMEA][LC_P2_ECC]
               = HAUMEAECCENTRICITY;
         lv_pl_mtrx[LC_P1_HAUMEA][LC_P2_INC] = HAUMEAINCLINATION;
         lv_pl_mtrx[LC_P1_HAUMEA][LC_P2_LON] = HAUMEALONGITUDE;
         lv_pl_mtrx[LC_P1_HAUMEA][LC_P2_PER] = HAUMEAPERIAPSIS;
         lv_pl_mtrx[LC_P1_HAUMEA][LC_P2_ASC] = HAUMEAASCENDING;
         lv_pl_mtrx[LC_P1_HAUMEA][LC_P2_ORB_DT] = HAUMEAORBIT_DT;
         lv_pl_mtrx[LC_P1_HAUMEA][LC_P2_ECC_DT]
               = HAUMEAECCENTRICITY_DT;
         lv_pl_mtrx[LC_P1_HAUMEA][LC_P2_INC_DT]
               = HAUMEAINCLINATION_DT;
         lv_pl_mtrx[LC_P1_HAUMEA][LC_P2_LON_DT]
               = HAUMEALONGITUDE_DT;
         lv_pl_mtrx[LC_P1_HAUMEA][LC_P2_PER_DT]
               = HAUMEAPERIAPSIS_DT;
         lv_pl_mtrx[LC_P1_HAUMEA][LC_P2_ASC_DT]
               = HAUMEAASCENDING_DT;
         IF 0 < lv_pl_jtwoktime AND lv_pl_jtwoktime < 1.0 / 32.0:
            CALL plsettime(Kw.uet2j2k(Kw.timee()));
         IF_END
         lv_pl_earth_year = EARTHYEAR;
      IF_END
      IF LC_P1_SUN <= plnt AND plnt < LC_P1_COUNT:
         lv_pl_ind = plnt;
      ELSIF plnt == LC_P1_PREV_PL:
         IF lv_pl_ind < 0:
            lv_pl_ind = LC_P1_EARTH;
         IF_END
      ELSE:
         lv_pl_ind = LC_P1_PREV_PL;
      IF_END
      RETURN lv_pl_ind;
   FUNC_END
   #   FFFFFFFFFFunction ------------------------------- lf_val #
   BLOCK_DEF FUNC DBL lf_val(INT pa_ind, INT pb_bb, INT pb_bbd):
      INT pl_ind;
      DBL retvalu;
      IF pa_ind < LC_P1_PREV_PL OR LC_P1_COUNT <= pa_ind:
         retvalu = LC_P1_ERR;
      ELSE:
         pl_ind = pl(pa_ind);
         retvalu = (lv_pl_mtrx[pl_ind][pb_bb] + lv_pl_jtwoktime
               * lv_pl_mtrx[pl_ind][pb_bbd]);
      IF_END
      RETURN retvalu;
   FUNC_END
   #   FFFFFFFFFFunction ----------------------------------- pl #
   FUNC INT pl(INT plnt):
      # set the selected planet to PLNT
      RETURN lf_pl_init(plnt);
   FUNC_END
   #   FFFFFFFFFFunction ---------------------------- plsettime #
   FUNC DBL plsettime(DBL jtwokdate):
      # set the planet-time to the JTWOKDATE
      lv_pl_jtwoktime = jtwokdate * Kw.JD;
      RETURN lv_pl_jtwoktime;
   FUNC_END
   #   FFFFFFFFFFunction -------------------------------- pl_gm #
   FUNC DBL pl_gm(INT plnt):
      # the gm of planet PLNT
      BLOCK_USE lv_pl_mtrx[];
      BLOCK_USE lv_pl_ind;
      DBL retvalu;
      CALL lf_pl_init(plnt);
      IF LC_P1_SUN <= plnt AND plnt < LC_P1_COUNT:
         retvalu = lv_pl_mtrx[plnt][LC_P2_GM];
      ELSIF plnt == LC_P1_PREV_PL:
         retvalu = lv_pl_mtrx[lv_pl_ind][LC_P2_GM];
      ELSE:
         retvalu = LC_P1_ERR;
      IF_END
      RETURN retvalu;
   FUNC_END
   #   FFFFFFFFFFunction --------------------------------- plgm #
   FUNC DBL plgm(NUL):
      # the gm of the previous selected planet
      BLOCK_USE lv_pl_ind;
      RETURN pl_gm(LC_P1_PREV_PL);
   FUNC_END
   #   FFFFFFFFFFunction ------------------------------ pl_year #
   FUNC DBL pl_year(INT plnt):
      # the year of planet PLNT
      BLOCK_USE lv_pl_mtrx[];
      BLOCK_USE lv_pl_ind;
      DBL retvalu;
      CALL lf_pl_init(plnt);
      IF LC_P1_SUN <= plnt AND plnt < LC_P1_COUNT:
         retvalu = lv_pl_mtrx[plnt][LC_P2_YEAR];
      ELSIF plnt == LC_P1_PREV_PL:
         retvalu = lv_pl_mtrx[lv_pl_ind][LC_P2_YEAR];
      ELSE:
         retvalu = LC_P1_ERR;
      IF_END
      RETURN retvalu;
   FUNC_END
   #   FFFFFFFFFFunction ------------------------------- plyear #
   FUNC DBL plyear(NUL):
      # the year of the previous selected planet
      BLOCK_USE lv_pl_ind;
      RETURN pl_year(LC_P1_PREV_PL);
   FUNC_END
   #   FFFFFFFFFFunction ------------------------------- pl_day #
   FUNC DBL pl_day(INT plnt):
      # the day of planet PLNT
      BLOCK_USE lv_pl_mtrx[];
      BLOCK_USE lv_pl_ind;
      DBL retvalu;
      CALL lf_pl_init(plnt);
      IF LC_P1_SUN <= plnt AND plnt < LC_P1_COUNT:
         retvalu = lv_pl_mtrx[plnt][LC_P2_DAY];
      ELSIF plnt == LC_P1_PREV_PL:
         retvalu = lv_pl_mtrx[lv_pl_ind][LC_P2_DAY];
      ELSE:
         retvalu = LC_P1_ERR;
      IF_END
      RETURN retvalu;
   FUNC_END
   #   FFFFFFFFFFunction -------------------------------- plday #
   FUNC DBL plday(NUL):
      # the day of the previous selected planet
      BLOCK_USE lv_pl_ind;
      RETURN pl_day(LC_P1_PREV_PL);
   FUNC_END
   #   FFFFFFFFFFunction -------------------------- pl_flatness #
   FUNC DBL pl_flatness(INT plnt):
      # the flatness of planet PLNT
      BLOCK_USE lv_pl_mtrx[];
      BLOCK_USE lv_pl_ind;
      DBL retvalu;
      CALL lf_pl_init(plnt);
      IF LC_P1_SUN <= plnt AND plnt < LC_P1_COUNT:
         retvalu = lv_pl_mtrx[plnt][LC_P2_FLATNESS];
      ELSIF plnt == LC_P1_PREV_PL:
         retvalu = lv_pl_mtrx[lv_pl_ind][LC_P2_FLATNESS];
      ELSE:
         retvalu = LC_P1_ERR;
      IF_END
      RETURN retvalu;
   FUNC_END
   #   FFFFFFFFFFunction --------------------------- plflatness #
   FUNC DBL plflatness(NUL):
      # the flatness of the previous selected planet
      BLOCK_USE lv_pl_ind;
      RETURN pl_flatness(LC_P1_PREV_PL);
   FUNC_END
   #   FFFFFFFFFFunction --------------------------------- pl_a #
   FUNC DBL pl_a(INT plnt):
      # the a of planet PLNT
      BLOCK_USE lv_pl_mtrx[];
      BLOCK_USE lv_pl_ind;
      DBL retvalu;
      CALL lf_pl_init(plnt);
      IF LC_P1_SUN <= plnt AND plnt < LC_P1_COUNT:
         retvalu = lv_pl_mtrx[plnt][LC_P2_A];
      ELSIF plnt == LC_P1_PREV_PL:
         retvalu = lv_pl_mtrx[lv_pl_ind][LC_P2_A];
      ELSE:
         retvalu = LC_P1_ERR;
      IF_END
      RETURN retvalu;
   FUNC_END
   #   FFFFFFFFFFunction ---------------------------------- pla #
   FUNC DBL pla(NUL):
      # the a of the previous selected planet
      BLOCK_USE lv_pl_ind;
      RETURN pl_a(LC_P1_PREV_PL);
   FUNC_END
   #   FFFFFFFFFFunction --------------------------------- pl_c #
   FUNC DBL pl_c(INT plnt):
      # the c of planet PLNT
      BLOCK_USE lv_pl_mtrx[];
      BLOCK_USE lv_pl_ind;
      DBL retvalu;
      CALL lf_pl_init(plnt);
      IF LC_P1_SUN <= plnt AND plnt < LC_P1_COUNT:
         retvalu = lv_pl_mtrx[plnt][LC_P2_C];
      ELSIF plnt == LC_P1_PREV_PL:
         retvalu = lv_pl_mtrx[lv_pl_ind][LC_P2_C];
      ELSE:
         retvalu = LC_P1_ERR;
      IF_END
      RETURN retvalu;
   FUNC_END
   #   FFFFFFFFFFunction ---------------------------------- plc #
   FUNC DBL plc(NUL):
      # the c of the previous selected planet
      BLOCK_USE lv_pl_ind;
      RETURN pl_c(LC_P1_PREV_PL);
   FUNC_END
   #   FFFFFFFFFFunction ----------------------------- pl_orbit #
   FUNC DBL pl_orbit(INT plnt):
      # compute orbital orbit of planet PLNT
      RETURN lf_val(plnt, LC_P2_ORB, LC_P2_ORB_DT);
   FUNC_END
   #   FFFFFFFFFFunction ------------------------------ plorbit #
   FUNC DBL plorbit(NUL):
      # the orbit of the previous selected planet
      BLOCK_USE lv_pl_ind;
      RETURN pl_orbit(LC_P1_PREV_PL);
   FUNC_END
   #   FFFFFFFFFFunction ---------------------- pl_eccentricity #
   FUNC DBL pl_eccentricity(INT plnt):
      # compute orbital eccentricity of planet PLNT
      RETURN lf_val(plnt, LC_P2_ECC, LC_P2_ECC_DT);
   FUNC_END
   #   FFFFFFFFFFunction ----------------------- pleccentricity #
   FUNC DBL pleccentricity(NUL):
      # the eccentricity of the previous selected planet
      BLOCK_USE lv_pl_ind;
      RETURN pl_eccentricity(LC_P1_PREV_PL);
   FUNC_END
   #   FFFFFFFFFFunction ----------------------- pl_inclination #
   FUNC DBL pl_inclination(INT plnt):
      # compute orbital inclination of planet PLNT
      RETURN lf_val(plnt, LC_P2_INC, LC_P2_INC_DT);
   FUNC_END
   #   FFFFFFFFFFunction ------------------------ plinclination #
   FUNC DBL plinclination(NUL):
      # the inclination of the previous selected planet
      BLOCK_USE lv_pl_ind;
      RETURN pl_inclination(LC_P1_PREV_PL);
   FUNC_END
   #   FFFFFFFFFFunction ------------------------- pl_longitude #
   FUNC DBL pl_longitude(INT plnt):
      # compute orbital longitude of planet PLNT
      RETURN lf_val(plnt, LC_P2_LON, LC_P2_LON_DT);
   FUNC_END
   #   FFFFFFFFFFunction -------------------------- pllongitude #
   FUNC DBL pllongitude(NUL):
      # the longitude of the previous selected planet
      BLOCK_USE lv_pl_ind;
      RETURN pl_longitude(LC_P1_PREV_PL);
   FUNC_END
   #   FFFFFFFFFFunction ------------------------- pl_periapsis #
   FUNC DBL pl_periapsis(INT plnt):
      # compute orbital periapsis of planet PLNT
      RETURN lf_val(plnt, LC_P2_PER, LC_P2_PER_DT);
   FUNC_END
   #   FFFFFFFFFFunction -------------------------- plperiapsis #
   FUNC DBL plperiapsis(NUL):
      # the periapsis of the previous selected planet
      BLOCK_USE lv_pl_ind;
      RETURN pl_periapsis(LC_P1_PREV_PL);
   FUNC_END
   #   FFFFFFFFFFunction ------------------------- pl_ascending #
   FUNC DBL pl_ascending(INT plnt):
      # compute orbital ascending of planet PLNT
      RETURN lf_val(plnt, LC_P2_ASC, LC_P2_ASC_DT);
   FUNC_END
   #   FFFFFFFFFFunction -------------------------- plascending #
   FUNC DBL plascending(NUL):
      # the ascending of the previous selected planet
      BLOCK_USE lv_pl_ind;
      RETURN pl_ascending(LC_P1_PREV_PL);
   FUNC_END
   #   FFFFFFFFFFunction ------------------------------ pl_mass #
   FUNC DBL pl_mass(INT plnt):
      # The Mass kg of planet PLNT
      DBL retvalu;
      IF plnt < LC_P1_PREV_PL OR LC_P1_COUNT <= plnt:
         retvalu = LC_P1_ERR;
      ELSE:
         retvalu = pl_gm(plnt) / Kw.GRAVITATION;
      IF_END
      RETURN retvalu;
   FUNC_END
   #   FFFFFFFFFFunction ------------------------------- plmass #
   FUNC DBL plmass(NUL):
      # the mass of the previous selected planet
      BLOCK_USE lv_pl_ind;
      RETURN pl_mass(LC_P1_PREV_PL);
   FUNC_END
   #   FFFFFFFFFFunction --------------------------------- pl_b #
   FUNC DBL pl_b(INT plnt):
      # The polar radius m of planet PLNT
      DBL retvalu;
      IF plnt < LC_P1_PREV_PL OR LC_P1_COUNT <= plnt:
         retvalu = LC_P1_ERR;
      ELSE:
         retvalu = (1.0 - pl_flatness(plnt)) * pl_a(plnt);
      IF_END
      RETURN retvalu;
   FUNC_END
   #   FFFFFFFFFFunction ---------------------------------- plb #
   FUNC DBL plb(NUL):
      # the b of the previous selected planet
      BLOCK_USE lv_pl_ind;
      RETURN pl_b(LC_P1_PREV_PL);
   FUNC_END
   #   FFFFFFFFFFunction ---------------------------- pl_radius #
   FUNC DBL pl_radius(INT plnt):
      # The average radius m of planet PLNT
      DBL retvalu;
      IF plnt < LC_P1_PREV_PL OR LC_P1_COUNT <= plnt:
         retvalu = LC_P1_ERR;
      ELSE:
         retvalu = (pl_a(plnt) + pl_b(plnt) + pl_c(plnt)) / 3.0;
      IF_END
      RETURN retvalu;
   FUNC_END
   #   FFFFFFFFFFunction ----------------------------- plradius #
   FUNC DBL plradius(NUL):
      # the radius of the previous selected planet
      BLOCK_USE lv_pl_ind;
      RETURN pl_radius(LC_P1_PREV_PL);
   FUNC_END
   #   FFFFFFFFFFunction --------------------------- pl_gravity #
   FUNC DBL pl_gravity(INT plnt):
      # The mean surface gravity(m/s**2) of planet PLNT
      #   GM / RADIUS**2
      DBL retvalu;
      IF plnt < LC_P1_PREV_PL OR LC_P1_COUNT <= plnt:
         retvalu = LC_P1_ERR;
      ELSE:
         retvalu = pl_gm(plnt) / Kw.square(pl_radius(plnt));
      IF_END
      RETURN retvalu;
   FUNC_END
   #   FFFFFFFFFFunction ---------------------------- plgravity #
   FUNC DBL plgravity(NUL):
      # the gravity of the previous selected planet
      BLOCK_USE lv_pl_ind;
      RETURN pl_gravity(LC_P1_PREV_PL);
   FUNC_END
   #   FFFFFFFFFFunction ----------------------- pl_meananomaly #
   FUNC DBL pl_meananomaly(INT plnt):
      # The mean anomaly of planet PLNT
      DBL retvalu;
      IF plnt < LC_P1_PREV_PL OR LC_P1_COUNT <= plnt:
         retvalu = LC_P1_ERR;
      ELSE:
         retvalu = Kw.fmodu(pl_longitude(plnt)
               - pl_periapsis(plnt), Kw.TAU);
      IF_END
      RETURN retvalu;
   FUNC_END
   #   FFFFFFFFFFunction ------------------------ plmeananomaly #
   FUNC DBL plmeananomaly(NUL):
      # the meananomaly of the previous selected planet
      BLOCK_USE lv_pl_ind;
      RETURN pl_meananomaly(LC_P1_PREV_PL);
   FUNC_END
   #   FFFFFFFFFFunction ---------------------------- pl_escape #
   FUNC DBL pl_escape(INT plnt):
      # The mean escape velocity(m/s) of planet PLNT
      #    SQRT(2.0 * GM / RADIUS);
      DBL retvalu;
      IF plnt < LC_P1_PREV_PL OR LC_P1_COUNT <= plnt:
         retvalu = LC_P1_ERR;
      ELSE:
         retvalu = SQRT(2.0 * pl_gm(plnt) / pl_radius(plnt));
      IF_END
      RETURN retvalu;
   FUNC_END
   #   FFFFFFFFFFunction ----------------------------- plescape #
   FUNC DBL plescape(NUL):
      # the escape of the previous selected planet
      BLOCK_USE lv_pl_ind;
      RETURN pl_escape(LC_P1_PREV_PL);
   FUNC_END
   #   FFFFFFFFFFunction --------------------------- pl_synodic #
   FUNC DBL pl_synodic(INT plnt):
      # the synodic period s of planet PLNT
      #    PL_YEAR * EARTHYEAR / (PL_YEAR - EARTHYEAR)
      BLOCK_USE lv_pl_earth_year;
      DBL yra;
      DBL retvalu;
      IF plnt < LC_P1_PREV_PL OR LC_P1_COUNT <= plnt:
         retvalu = LC_P1_ERR;
      ELSE:
         yra = pl_year(plnt);
         retvalu = Kw.divi(yra * lv_pl_earth_year, ABS(yra
               - lv_pl_earth_year), 0.0);
      IF_END
      RETURN retvalu;
   FUNC_END
   #   FFFFFFFFFFunction ---------------------------- plsynodic #
   FUNC DBL plsynodic(NUL):
      # the synodic of the previous selected planet
      BLOCK_USE lv_pl_ind;
      RETURN pl_synodic(LC_P1_PREV_PL);
   FUNC_END
   #   FFFFFFFFFFunction ---------------------------- pl_volume #
   FUNC DBL pl_volume(INT plnt):
      # The volume(m**3) of planet PLNT
      DBL retvalu;
      IF plnt < LC_P1_PREV_PL OR LC_P1_COUNT <= plnt:
         retvalu = LC_P1_ERR;
      ELSE:
         retvalu = 2.0 * Kw.TAU * pl_a(plnt) * pl_b(plnt)
               * pl_c(plnt) / 3.0;
      IF_END
      RETURN retvalu;
   FUNC_END
   #   FFFFFFFFFFunction ----------------------------- plvolume #
   FUNC DBL plvolume(NUL):
      # the volume of the previous selected planet
      BLOCK_USE lv_pl_ind;
      RETURN pl_volume(LC_P1_PREV_PL);
   FUNC_END
   #   FFFFFFFFFFunction --------------------------- pl_density #
   FUNC DBL pl_density(INT plnt):
      # The density(kg/m**3) of planet PLNT
      DBL retvalu;
      IF plnt < LC_P1_PREV_PL OR LC_P1_COUNT <= plnt:
         retvalu = LC_P1_ERR;
      ELSE:
         retvalu = pl_mass(plnt) / pl_volume(plnt);
      IF_END
      RETURN retvalu;
   FUNC_END
   #   FFFFFFFFFFunction ---------------------------- pldensity #
   FUNC DBL pldensity(NUL):
      # the density of the previous selected planet
      BLOCK_USE lv_pl_ind;
      RETURN pl_density(LC_P1_PREV_PL);
   FUNC_END
   #   FFFFFFFFFFunction -------------------------- pl_argument #
   FUNC DBL pl_argument(INT plnt):
      # The argument of perihelion of planet PLNT
      DBL retvalu;
      IF plnt < LC_P1_PREV_PL OR LC_P1_COUNT <= plnt:
         retvalu = LC_P1_ERR;
      ELSE:
         retvalu = pl_periapsis(plnt) - pl_ascending(plnt);
      IF_END
      RETURN retvalu;
   FUNC_END
   #   FFFFFFFFFFunction --------------------------- plargument #
   FUNC DBL plargument(NUL):
      # the argument of the previous selected planet
      BLOCK_USE lv_pl_ind;
      RETURN pl_argument(LC_P1_PREV_PL);
   FUNC_END
   #   FFFFFFFFFFunction ---------------------------- pl_margot #
   FUNC DBL pl_margot(INT plnt):
      # Margot parameter for the given planet
      DBL retvalu;
      IF plnt < LC_P1_PREV_PL OR LC_P1_COUNT <= plnt:
         retvalu = LC_P1_ERR;
      ELSE:
         retvalu = margot(pl_mass(plnt), pl_orbit(plnt));
      IF_END
      RETURN retvalu;
   FUNC_END
   #   FFFFFFFFFFunction ----------------------------- plmargot #
   FUNC DBL plmargot(NUL):
      # the margot of the previous selected planet
      BLOCK_USE lv_pl_ind;
      RETURN pl_margot(LC_P1_PREV_PL);
   FUNC_END
   #   FFFFFFFFFFunction ---------------------- pl_sternlevison #
   FUNC DBL pl_sternlevison(INT plnt):
      # Stern-Levison parameter for the given planet
      DBL retvalu;
      IF plnt < LC_P1_PREV_PL OR LC_P1_COUNT <= plnt:
         retvalu = LC_P1_ERR;
      ELSE:
         retvalu = sternlevison(pl_mass(plnt), pl_orbit(plnt));
      IF_END
      RETURN retvalu;
   FUNC_END
   #   FFFFFFFFFFunction ----------------------- plsternlevison #
   FUNC DBL plsternlevison(NUL):
      # the sternlevison of the previous selected planet
      BLOCK_USE lv_pl_ind;
      RETURN pl_sternlevison(LC_P1_PREV_PL);
   FUNC_END
   #   FFFFFFFFFFunction ------------------------ pl_perihelion #
   FUNC DBL pl_perihelion(INT plnt):
      # The perihelion distance m of planet PLNT
      DBL retvalu;
      IF plnt < LC_P1_PREV_PL OR LC_P1_COUNT <= plnt:
         retvalu = LC_P1_ERR;
      ELSE:
         retvalu = pl_orbit(plnt) * (1.0
               - pl_eccentricity(plnt));
      IF_END
      RETURN retvalu;
   FUNC_END
   #   FFFFFFFFFFunction ------------------------- plperihelion #
   FUNC DBL plperihelion(NUL):
      # the perihelion of the previous selected planet
      BLOCK_USE lv_pl_ind;
      RETURN pl_perihelion(LC_P1_PREV_PL);
   FUNC_END
   #   FFFFFFFFFFunction -------------------------- pl_aphelion #
   FUNC DBL pl_aphelion(INT plnt):
      # The aphelion distance m of planet PLNT
      DBL retvalu;
      IF plnt < LC_P1_PREV_PL OR LC_P1_COUNT <= plnt:
         retvalu = LC_P1_ERR;
      ELSE:
         retvalu = pl_orbit(plnt) * (1.0
               + pl_eccentricity(plnt));
      IF_END
      RETURN retvalu;
   FUNC_END
   #   FFFFFFFFFFunction --------------------------- plaphelion #
   FUNC DBL plaphelion(NUL):
      # the aphelion of the previous selected planet
      BLOCK_USE lv_pl_ind;
      RETURN pl_aphelion(LC_P1_PREV_PL);
   FUNC_END
   #   FFFFFFFFFFunction -------------------- eccentric_anomaly #
   FUNC DBL eccentric_anomaly(DBL mean_ano_rad
         , DBL eccen):
      # solve 0 = EA - ECCEN * sin(EA) - MEAN_ANO_RAD for EA
      #   using the Newton-Raphson method
      DBL mrad;
      DBL xrad;
      INT nrvx_ii;
      DBL nrvx_yy;
      DBL nrvx_xx;
      DBL nrvx_dy;
      DBL nrvx_xp;
      mrad = Kw.fmodu(mean_ano_rad, Kw.tur2rad(1.0));
      xrad = mrad + eccen * SIN(mrad);
      # init guess
      # return XX where
      #    nrvx_xx - eccen * SIN(nrvx_xx) - mean_ano_rad(XX) == 0
      # BEG Newton-Raphson Calculation
      nrvx_xx = xrad;
      FOR nrvx_ii FROM 0 TO 20:
         nrvx_xp = nrvx_xx;
         nrvx_dy = 1.0 - eccen * COS(nrvx_xx);
         IF Kw.iszero(nrvx_dy):
            FOR_EXIT;
         IF_END
         nrvx_yy = nrvx_xx - eccen * SIN(nrvx_xx) - mean_ano_rad;
         nrvx_xx -= nrvx_yy / nrvx_dy;
         IF Kw.iseq(nrvx_xp, nrvx_xx):
            FOR_EXIT;
         IF_END
      FOR_END
      # END Newton-Raphson Calculation
      RETURN nrvx_xx;
   FUNC_END
   #   FFFFFFFFFFunction ------------------ pl_eccentricanomaly #
   FUNC DBL pl_eccentricanomaly(INT plnt):
      # the eccentric anomaly of planet PLNT
      DBL retvalu;
      IF plnt < LC_P1_PREV_PL OR LC_P1_COUNT <= plnt:
         retvalu = LC_P1_ERR;
      ELSE:
         retvalu = eccentric_anomaly(pl_meananomaly(plnt)
               , pl_eccentricity(plnt));
      IF_END
      RETURN retvalu;
   FUNC_END
   #   FFFFFFFFFFunction ------------------- pleccentricanomaly #
   FUNC DBL pleccentricanomaly(NUL):
      # the eccentricanomaly of the previous selected planet
      BLOCK_USE lv_pl_ind;
      RETURN pl_eccentricanomaly(LC_P1_PREV_PL);
   FUNC_END
   #   FFFFFFFFFFunction ---------------------- pl_heliocentric #
   FUNC DBL pl_heliocentric(INT plnt
         , DBL jtwok):
      # compute the heliocentric(and geocentric) coordinates
      # for planet PLNT at the given J2K time.
      # use with functions plgeo, plhelio
      BLOCK_USE lv_pl_helio_arr[];
      BLOCK_USE lv_pl_geo_arr[];
      DBL orb_m;
      DBL eccen;
      DBL inc_rad;
      DBL lon_rad;
      DBL per_rad;
      DBL asc_rad;
      DBL arg_rad;
      DBL mean_anomaly_rad;
      DBL eano_rad;
      DBL dxx_m;
      DBL dyy_m;
      DBL ci;
      DBL co;
      DBL cw;
      DBL si;
      DBL so;
      DBL sw;
      DBL swci;
      DBL cwci;
      DBL obl_rad;
      DBL retvalu;
      IF lf_pl_init(plnt) < 0:
         retvalu = LC_P1_ERR;
      ELSE:
         CALL plsettime(jtwok);
         orb_m = plorbit();
         eccen = pleccentricity();
         inc_rad = plinclination();
         lon_rad = pllongitude();
         per_rad = plperiapsis();
         asc_rad = plascending();
         # step 2: compute argument of perihelion, mean anomaly
         arg_rad = per_rad - asc_rad;
         mean_anomaly_rad = Kw.fmod(lon_rad - per_rad
               , Kw.tur2rad(1.0));
         # step 3: calculate the eccentric anomaly
         eano_rad = eccentric_anomaly(mean_anomaly_rad, eccen);
         # step 4: compute planets heliocentric coordinates
         dxx_m = orb_m * (COS(eano_rad) - eccen);
         dyy_m = orb_m * Kw.topyh1(eccen) * SIN(eano_rad);
         # step 5: compute J2000 eliptic plane, x axis = equinox
         cw = COS(arg_rad);
         sw = SIN(arg_rad);
         co = COS(asc_rad);
         so = SIN(asc_rad);
         ci = COS(inc_rad);
         si = SIN(inc_rad);
         swci = sw * ci;
         cwci = cw * ci;
         lv_pl_helio_arr[0] = (dxx_m * (cw * co - swci * so)
               - dyy_m * (sw * co + cwci * so));
         lv_pl_helio_arr[1] = (dxx_m * (cw * so + swci * co)
               - dyy_m * (sw * so - cwci * co));
         lv_pl_helio_arr[2] = (dxx_m * (sw * si) + dyy_m * (cw
               * si));
         # step 6 -- convert to ICRF frame or J2000 frame
         obl_rad = earth_obliquity(jtwok);
         co = COS(obl_rad);
         so = SIN(obl_rad);
         lv_pl_geo_arr[0] = lv_pl_helio_arr[0];
         lv_pl_geo_arr[1] = co * lv_pl_helio_arr[1] - so
               * lv_pl_helio_arr[2];
         lv_pl_geo_arr[2] = so * lv_pl_helio_arr[1] + co
               * lv_pl_helio_arr[2];
         retvalu = Kw.hypot3(lv_pl_helio_arr[0]
               , lv_pl_helio_arr[1], lv_pl_helio_arr[2]);
      IF_END
      RETURN retvalu;
   FUNC_END
   #   FFFFFFFFFFunction ------------------------------ plhelio #
   FUNC DBL plhelio(INT indd):
      # heliocentric distance, in m, computed by the
      #    previous call to pl_heliocentric
      BLOCK_USE lv_pl_helio_arr[];
      DBL ret_val;
      IF 0 <= indd AND indd < 3:
         ret_val = lv_pl_helio_arr[indd];
      ELSE:
         ret_val = 0;
      IF_END
      RETURN ret_val;
   FUNC_END
   #   FFFFFFFFFFunction -------------------------------- plgeo #
   FUNC DBL plgeo(INT indd):
      # geocentric distance, in m, computed by the
      #    previous call to pl_heliocentric
      BLOCK_USE lv_pl_geo_arr[];
      DBL ret_val;
      IF 0 <= indd AND indd < 3:
         ret_val = lv_pl_geo_arr[indd];
      ELSE:
         ret_val = 0;
      IF_END
      RETURN ret_val;
   FUNC_END
   #   FFFFFFFFFFunction ------------------------------ pl_name #
   FUNC INT pl_name(INT plnt):
      # print the name of planet PLNT
      INT plnt_ind;
      plnt_ind = lf_pl_init(plnt);
      IF plnt_ind == LC_P1_SUN:
         PRINTSTR("SUN      ");
      ELSIF plnt_ind == LC_P1_MERCURY:
         PRINTSTR("MERCURY  ");
      ELSIF plnt_ind == LC_P1_VENUS:
         PRINTSTR("VENUS    ");
      ELSIF plnt_ind == LC_P1_EARTH:
         PRINTSTR("EARTH    ");
      ELSIF plnt_ind == LC_P1_MARS:
         PRINTSTR("MARS     ");
      ELSIF plnt_ind == LC_P1_JUPITER:
         PRINTSTR("JUPITER  ");
      ELSIF plnt_ind == LC_P1_SATURN:
         PRINTSTR("SATURN   ");
      ELSIF plnt_ind == LC_P1_URANUS:
         PRINTSTR("URANUS   ");
      ELSIF plnt_ind == LC_P1_NEPTUNE:
         PRINTSTR("NEPTUNE  ");
      ELSIF plnt_ind == LC_P1_PLUTO:
         PRINTSTR("PLUTO    ");
      ELSIF plnt_ind == LC_P1_CERES:
         PRINTSTR("CERES    ");
      ELSIF plnt_ind == LC_P1_ERIS:
         PRINTSTR("ERIS     ");
      ELSIF plnt_ind == LC_P1_MAKEMAKE:
         PRINTSTR("MAKEMAKE ");
      ELSIF plnt_ind == LC_P1_HAUMEA:
         PRINTSTR("HAUMEA   ");
      ELSE:
         PRINTSTR("UNKNOWN");
         PRINTVAL(plnt_ind);
      IF_END
      RETURN plnt_ind;
   FUNC_END
   #   FFFFFFFFFFunction ------------------------------- plname #
   FUNC DBL plname(NUL):
      # the name of the previous selected planet
      BLOCK_USE lv_pl_ind;
      RETURN pl_name(LC_P1_PREV_PL);
   FUNC_END
   #   FFFFFFFFFFunction ------------------------- earth_radius #
   FUNC DBL earth_radius(DBL lat_deg):
      # earth radius, in meters, at geoditic latitiude lat_deg
      RETURN pl_aradius(LC_P1_EARTH, lat_deg);
   FUNC_END
BLOCK_END
      #   FFFFFFFFFFunction ----------------------
   #earth_tropicalyear #
FUNC DBL earth_tropicalyear(DBL jtwokdate):
   # tropical year length(in days) for given JTWOK date
   DBL jy;
   jy = jtwokdate * Kw.DAY / Kw.JYEAR;
   RETURN ((((2.64E-16) * jy - 7.29E-14) * jy - 6.15359E-8)
         * jy + 365.2421896698);
FUNC_END
#   FFFFFFFFFFunction -------------------------- earth_distance #
FUNC DBL earth_distance(DBL lata_deg
      , DBL lona_deg
      , DBL latb_deg
      , DBL lonb_deg):
   # compute the great circle distance on the earth
   # between the two sets of latitude and longitude
   RETURN (Kw.great_circle_distance(Kw.deg2rad(lata_deg)
         , Kw.deg2rad(lona_deg), Kw.deg2rad(latb_deg)
         , Kw.deg2rad(lonb_deg)) * EARTH_A);
FUNC_END
#   FFFFFFFFFFunction ------------------------------- plaradius #
FUNC DBL plaradius(DBL lat_deg):
   # radius, in meters, at geoditic latitiude lat_deg
   DBL calat;
   DBL sblat;
   DBL aa;
   DBL bb;
   aa = Kw.square(pla());
   bb = Kw.square(plb());
   calat = Kw.square(pla() * Kw.cosd(lat_deg));
   sblat = Kw.square(plb() * Kw.sind(lat_deg));
   RETURN SQRT((aa * calat + bb * sblat) / (calat + sblat));
FUNC_END
#   FFFFFFFFFFunction ------------------------------ pl_aradius #
FUNC DBL pl_aradius(INT plnt
      , DBL lat_deg):
   # radius, in meters, at geoditic latitiude lat_deg
   CALL pl(plnt);
   RETURN plaradius(lat_deg);
FUNC_END
#   FFFFFFFFFFunction ------------------------- earth_obliquity #
FUNC DBL earth_obliquity(DBL jtwok):
   # OBLIQUITY -- time in JD2000 days, result in radians
   DBL obl_rad;
   obl_rad = (((-1.24828E-16) * jtwok - 3.56226633E-7) * jtwok
         + 23.4392889);
   RETURN Kw.deg2rad(obl_rad);
FUNC_END
#   FFFFFFFFFFunction --------------------------- earth_gravity #
FUNC DBL earth_gravity(DBL lat_deg):
   # earth gravity, in m/s**2, at geoditic latitiude LAT_DEG
   # using the Somigliana formula with WGS-84 parameters
   # See https://en.wikipedia.org/wiki/Normal_gravity_formula
   DBL slatsq;
   DBL obltsq;
   DBL kk;
   slatsq = Kw.square(Kw.sind(lat_deg));
   # the following two variables are actually constants given
   # the earth flatness, gravitya, and gravityb
   # oblateness is calculated as
   #    oblateness = sqrt(flatness * (2 - flatness))
   obltsq = EARTHFLATNESS * (2.0 - EARTHFLATNESS);
   kk = (((1.0 - EARTHFLATNESS) * Kw.EARTHGRAVITYB)
         - Kw.EARTHGRAVITYA);
   RETURN (Kw.EARTHGRAVITYA + kk * slatsq) / SQRT(1.0 - obltsq
         * slatsq);
FUNC_END
#   FFFFFFFFFFunction -------------------- earth_gravity_height #
FUNC DBL earth_gravity_height(DBL lat_deg
      , DBL height_m):
   # earth gravity, in m/s**2, at geoditic latititude LAT_DEG
   # at an elevation of HEIGHT_M meters
   RETURN (earth_gravity(lat_deg) - height_m * 2.0 * EARTHGM
         / Kw.cube(EARTH_A));
FUNC_END
BLOCK:# ISA atmosphere
   BLOCK_DEF CONST LC_ISA_TEMPERATURE 0;
   BLOCK_DEF CONST LC_ISA_PRESSURE 1;
   BLOCK_DEF CONST LC_ISA_DENSITY 2;
   BLOCK_DEF CONST LC_ISA_XHEIGHT 0;
   BLOCK_DEF CONST LC_ISA_XTEMPERATURE 1;
   BLOCK_DEF CONST LC_ISA_XLAPSERATE 2;
   BLOCK_DEF CONST LC_ISA_XPRESSURE 3;
   BLOCK_DEF CONST LC_ISA_XDENSITY 4;
   BLOCK_DEF DBL lv_isa_mtrx[7][5];
   BLOCK_DEF DBL lv_isa_magic = 0.0;
   #   FFFFFFFFFFunction -------------------------- lf_isa_calc #
   BLOCK_DEF FUNC DBL lf_isa_calc(DBL height_m, INT state_x):
      BLOCK_USE lv_isa_mtrx[];
      BLOCK_USE lv_isa_magic;
      INT h_ind;
      DBL air_k_per_m;
      DBL expon;
      DBL this_temp;
      DBL delta_h;
      DBL ret_val;
      IF NOT Kw.ismagic(lv_isa_magic):
         # from https://en.wikipedia.org/wiki/Barometric_formula
         lv_isa_mtrx[0][LC_ISA_XHEIGHT] = 0;
         lv_isa_mtrx[0][LC_ISA_XTEMPERATURE] = 288.15;
         lv_isa_mtrx[0][LC_ISA_XLAPSERATE] = -0.0065;
         lv_isa_mtrx[0][LC_ISA_XPRESSURE] = Kw.ATM;
         lv_isa_mtrx[0][LC_ISA_XDENSITY] = 1.2250;
         lv_isa_mtrx[1][LC_ISA_XHEIGHT] = 11000;
         lv_isa_mtrx[1][LC_ISA_XTEMPERATURE] = 216.65;
         lv_isa_mtrx[1][LC_ISA_XLAPSERATE] = +0.0;
         lv_isa_mtrx[1][LC_ISA_XPRESSURE] = 22632.10;
         lv_isa_mtrx[1][LC_ISA_XDENSITY] = 0.36391;
         lv_isa_mtrx[2][LC_ISA_XHEIGHT] = 20000;
         lv_isa_mtrx[2][LC_ISA_XTEMPERATURE] = 216.65;
         lv_isa_mtrx[2][LC_ISA_XLAPSERATE] = +0.001;
         lv_isa_mtrx[2][LC_ISA_XPRESSURE] = 5474.89;
         lv_isa_mtrx[2][LC_ISA_XDENSITY] = 0.08803;
         lv_isa_mtrx[3][LC_ISA_XHEIGHT] = 32000;
         lv_isa_mtrx[3][LC_ISA_XTEMPERATURE] = 228.65;
         lv_isa_mtrx[3][LC_ISA_XLAPSERATE] = +0.0028;
         lv_isa_mtrx[3][LC_ISA_XPRESSURE] = 868.02;
         lv_isa_mtrx[3][LC_ISA_XDENSITY] = 0.01322;
         lv_isa_mtrx[4][LC_ISA_XHEIGHT] = 47000;
         lv_isa_mtrx[4][LC_ISA_XTEMPERATURE] = 270.65;
         lv_isa_mtrx[4][LC_ISA_XLAPSERATE] = +0.0;
         lv_isa_mtrx[4][LC_ISA_XPRESSURE] = 110.91;
         lv_isa_mtrx[4][LC_ISA_XDENSITY] = 0.00143;
         lv_isa_mtrx[5][LC_ISA_XHEIGHT] = 51000;
         lv_isa_mtrx[5][LC_ISA_XTEMPERATURE] = 270.65;
         lv_isa_mtrx[5][LC_ISA_XLAPSERATE] = -0.0028;
         lv_isa_mtrx[5][LC_ISA_XPRESSURE] = 66.94;
         lv_isa_mtrx[5][LC_ISA_XDENSITY] = 8.6E-4;
         lv_isa_mtrx[6][LC_ISA_XHEIGHT] = 71000;
         lv_isa_mtrx[6][LC_ISA_XTEMPERATURE] = 214.65;
         lv_isa_mtrx[6][LC_ISA_XLAPSERATE] = -0.002;
         lv_isa_mtrx[6][LC_ISA_XPRESSURE] = 3.96;
         lv_isa_mtrx[6][LC_ISA_XDENSITY] = 6.4E-5;
         #                 m;      K;    K/m; Pa; kg/m**3
         lv_isa_magic = Kw.magicset();
      IF_END
      h_ind = 6;
      WHILE height_m < lv_isa_mtrx[h_ind][0] AND 0 < h_ind:
         h_ind -= 1;
      WHILE_END
      delta_h = height_m - lv_isa_mtrx[h_ind][LC_ISA_XHEIGHT];
      this_temp = lv_isa_mtrx[h_ind][LC_ISA_XTEMPERATURE]
            + lv_isa_mtrx[h_ind][LC_ISA_XLAPSERATE] * delta_h;
      IF state_x == LC_ISA_TEMPERATURE:
         ret_val = this_temp;
      ELSE:
         air_k_per_m = Kw.GRAVITY * Kwelements.AIR_MASS / Kw.GAS;
         IF Kw.iszero(lv_isa_mtrx[h_ind][LC_ISA_XLAPSERATE]):
            ret_val = EXP(-air_k_per_m * delta_h
                  / lv_isa_mtrx[h_ind][LC_ISA_XTEMPERATURE]);
         ELSE:
            expon = air_k_per_m
                  / lv_isa_mtrx[h_ind][LC_ISA_XLAPSERATE];
            IF state_x == LC_ISA_DENSITY:
               expon += 1;
            IF_END
            ret_val
                  = POW(lv_isa_mtrx[h_ind][LC_ISA_XTEMPERATURE]
                  / this_temp, expon);
         IF_END
         IF state_x == LC_ISA_PRESSURE:
            ret_val *= lv_isa_mtrx[h_ind][LC_ISA_XPRESSURE];
         ELSE:
            ret_val *= lv_isa_mtrx[h_ind][LC_ISA_XDENSITY];
         IF_END
      IF_END
      RETURN ret_val;
   FUNC_END
   #   FFFFFFFFFFunction ----------------------------- isa_temp #
   FUNC DBL isa_temp(DBL height_m):
      # the temperature(in K) at a height HEIGHT_M
      # of the International Standard Atmosphere
      RETURN lf_isa_calc(height_m, LC_ISA_TEMPERATURE);
   FUNC_END
   #   FFFFFFFFFFunction ----------------------------- isa_pres #
   FUNC DBL isa_pres(DBL height_m):
      # the pressure(in pascals) at a height HEIGHT_M
      # of the International Standard Atmosphere
      RETURN lf_isa_calc(height_m, LC_ISA_PRESSURE);
   FUNC_END
   #   FFFFFFFFFFunction ----------------------------- isa_dens #
   FUNC DBL isa_dens(DBL height_m):
      # the density(in kg/m**3) at a height HEIGHT_M
      # of the International Standard Atmosphere
      RETURN lf_isa_calc(height_m, LC_ISA_DENSITY);
   FUNC_END
BLOCK_END# ISA atmosphere
# Thinly veiled wrappers around several ellipsoid_.* functions
# with args in familiar degrees
#   FFFFFFFFFFunction ---------------------------- vin_distance #
FUNC DBL vin_distance(DBL lata_deg
      , DBL lona_deg
      , DBL latb_deg
      , DBL lonb_deg
      , WRITEONLY DBL ret_bearings_arr_p[]):
   # the distance meters from(LATA, LONA) to(LATB, LONB)
   # RET_BEARINGS_ARR_P[0] = bearing from A to B degrees
   # RET_BEARINGS_ARR_P[1] = bearing from B to A degrees
   DBL retvalu;
   DBL rad_arr[2];
   retvalu = EARTH_A * Kw.ellipsoid_distance(EARTHFLATNESS
         , Kw.deg2rad(lata_deg), Kw.deg2rad(lona_deg)
         , Kw.deg2rad(latb_deg), Kw.deg2rad(lonb_deg)
         , rad_arr[]) / Kw.METER;
   ret_bearings_arr_p[0] = Kw.rad2deg(rad_arr[0]);
   ret_bearings_arr_p[1] = Kw.rad2deg(rad_arr[1]);
   RETURN retvalu;
FUNC_END
#   FFFFFFFFFFunction ------------------------- vin_destination #
FUNC DBL vin_destination(DBL lata_deg
      , DBL lona_deg
      , DBL heading_deg
      , DBL dist_m
      , WRITEONLY DBL ret_dest_arr_p[]):
   # the bearing(degree CCW from North)
   # from(LATA, LONA) to point(LATB, LONB)
   # RET_DEST_ARR_P[0] = Latitude of destination degrees
   # RET_DEST_ARR_P[1] = Longitude of destination degrees
   DBL fltnss;
   DBL retvalu;
   DBL rad_arr[2];
   fltnss = EARTHFLATNESS;
   retvalu = Kw.rad2deg(Kw.ellipsoid_destination(fltnss
         , Kw.deg2rad(lata_deg), Kw.deg2rad(lona_deg)
         , Kw.deg2rad(heading_deg), dist_m * Kw.METER / EARTH_A
         , rad_arr[]));
   ret_dest_arr_p[0] = Kw.rad2deg(rad_arr[0]);
   ret_dest_arr_p[1] = Kw.rad2deg(rad_arr[1]);
   RETURN retvalu;
FUNC_END
