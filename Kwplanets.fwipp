#    Copyright (C) 2021 by Kevin D. Woerner
# 2021-05-14 kdw  Created by TMPDIR/objkdw/Tm_Const.fwipp.d
#    Copyright C 2017-2021 by Kevin D. Woerner
# 2021-04-15 kdw  Kwplanets:indent work
# 2021-04-14 kdw  Kwplanets:earth obliq and ecc formulas changed
# 2021-04-13 kdw  Kwplanets:indent work
# 2021-04-11 kdw  Kwplanets:indent work
# 2021-04-09 kdw  Kwplanets:indent work
# 2021-04-06 kdw  Kwplanets:orbit(gm)?_v funcs
# 2021-03-20 kdw  Kwplanets:sidereal and stellar const renam
# 2021-03-18 kdw  Kwplanets:const work
# 2021-03-16 kdw  Kwplanets:major rework
# 2021-03-15 kdw  Kwplanets:lx_.* const names
# 2021-03-14 kdw  Kwplanets:const name renam
# 2021-03-13 kdw  Kwplanets:line length upped to 77 II
# 2021-03-05 kdw  Kwplanets:line length upped to 77
# 2021-02-13 kdw  Kwplanets:various
# 2021-02-05 kdw  Kwplanets:spacing
# 2021-02-03 kdw  Kwplanets:no real net change
# 2021-01-11 kdw  Kwplanets:isa index problem
# 2021-01-10 kdw  Kwplanets:isa extensions
# 2020-12-08 kdw  Kwplanets:synodic constant work
# 2020-12-03 kdw  Kwplanets:float explicit const work
# 2020-11-28 kdw  Kwplanets:macro syntax overhaul
# 2020-11-23 kdw  Kwplanets:number reformat
# 2020-11-22 kdw  Kwplanets:language comments changed
# 2020-10-01 kdw  Kwplanets:water-boiling func
# 2020-09-29 kdw  Kwplanets:comments changed
# 2020-09-27 kdw  Kwplanets:PREM model
# 2020-09-25 kdw  Kwplanets:surface area
# 2020-08-29 kdw  Kwplanets:_a[r]r changed to _mt[r]x
# 2020-08-20 kdw  Kwplanets:boolean checks changed
# 2020-08-19 kdw  Kwplanets:comment change
# 2020-08-17 kdw  Kwplanets:macro syntax changed
# 2020-07-27 kdw  Kwplanets:block syntax
# 2020-07-24 kdw  Kwplanets:comment cleanup
# 2020-07-18 kdw  Kwplanets:rmed some imports
# 2020-06-22 kdw  Kwplanets:local-use mved before var decls
# 2020-06-12 kdw  Kwplanets:stern-levison and margot rework
# 2020-06-03 kdw  Kwplanets:writeonly keyword
# 2020-06-01 kdw  Kwplanets:replace "_D" with "_DT"
# 2020-05-30 kdw  Kwplanets:CONST syntax change
# 2020-05-27 kdw  Kwplanets:pl_val func renamd to lf_val
# 2020-05-18 kdw  Kwplanets:block added
# 2020-05-17 kdw  Kwplanets:pl_val func
# 2020-05-13 kdw  Kwplanets:.*_LA[S]T changed to .*_COU[N]T
# 2020-05-12 kdw  Kwplanets:nul rets changed
# 2020-05-11 kdw  Kwplanets:REPL[A]CE replaced with LO[C]AL_CO[N]ST
# 2020-05-05 kdw  Kwplanets:magic check func changed
# 2020-05-04 kdw  Kwplanets:comments added
# 2020-04-28 kdw  Kwplanets:tweaks here and there
# 2020-04-23 kdw  Kwplanets:const format change
# 2020-04-12 kdw  Kwplanets:comment change
# 2020-04-11 kdw  Kwplanets:macro arg format
# 2020-04-08 kdw  Kwplanets:preprocess sigil change
# 2020-04-03 kdw  Kwplanets:uniqify returns
# 2020-03-23 kdw  Kwplanets:added _[a]rr suffix to arrays
# 2020-03-11 kdw  Kwplanets:RE[P]LACE work
# 2020-03-09 kdw  Kwplanets:LO[C]AL_.* keywords
# 2020-03-08 kdw  Kwplanets:PR[I]NTVAL change
# 2020-03-06 kdw  Kwplanets:L[A]NG.* names
# 2020-03-03 kdw  Kwplanets:macro arg name change
# 2020-03-02 kdw  Kwplanets:s/_NE[X]T/_E[N]D/g
# 2020-02-28 kdw  Kwplanets:poly eval work
# 2020-02-27 kdw  Kwplanets:ho[r]ner work
# 2020-02-26 kdw  Kwplanets:comment change
# 2020-02-03 kdw  Kwplanets:.*_LOOP changed
# 2020-01-28 kdw  Kwplanets:updated w/ new ellips.* funcs
# 2020-01-08 kdw  Kwplanets:comment location chagned
# 2019-12-26 kdw  Kwplanets:module name addded to funcs
# 2019-12-18 kdw  Kwplanets:error checking III
# 2019-12-17 kdw  Kwplanets:error checking fixed
# 2019-12-15 kdw  Kwplanets:error checking
# 2019-12-11 kdw  Kwplanets:debugging -- no net change
# 2019-11-17 kdw  Kwplanets:include Macros file
# 2019-10-10 kdw  Kwplanets:replace AIR with AIR_MASS
# 2019-10-08 kdw  Kwplanets:comment change
# 2019-10-04 kdw  Kwplanets:comment removal
# 2019-10-02 kdw  Kwplanets:macro arg format change
# 2019-09-21 kdw  Kwplanets:diff const renam
# 2019-09-10 kdw  Kwplanets:earth-gravity major refactor
# 2019-08-30 kdw  Kwplanets:lv_isa_.* vars; ISA block
# 2019-08-26 kdw  Kwplanets:PRI[N]TS to PR[I]NTSTR
# 2019-08-22 kdw  Kwplanets:comment changed
# 2019-08-17 kdw  Kwplanets:L[O]G to L[N]
# 2019-08-15 kdw  Kwplanets:tweak in pl_helio.*
# 2019-08-14 kdw  Kwplanets:comment change
# 2019-08-13 kdw  Kwplanets:comment shortened
# 2019-08-11 kdw  Kwplanets:comment cleanup
# 2019-08-06 kdw  Kwplanets:added "+" to array values
# 2019-07-05 kdw  Kwplanets:added extra planet defs; pls[e]ttime
# 2019-07-04 kdw  Kwplanets:rmed extra planet defs
# 2019-07-03 kdw  Kwplanets:var renm:"s/ind/_ind/;s/__ind/_ind/"
# 2019-07-02 kdw  Kwplanets:macro renam
# 2019-06-26 kdw  Kwplanets:".*D" to ".*_DT"
# 2019-06-04 kdw  Kwplanets:tur2deg funcs
# 2019-06-02 kdw  Kwplanets:NR_ to RAPHSON_
# 2019-05-31 kdw  Kwplanets:NR_DO to RAPHSON_LOOP; et al
# 2019-05-29 kdw  Kwplanets:comment changed
# 2019-05-28 kdw  Kwplanets:comment changed
# 2019-05-24 kdw  Kwplanets:s/PL_/LC_/g;
# 2019-05-22 kdw  Kwplanets:added "get_" to several vin_.* funcs
# 2019-05-20 kdw  Kwplanets:explicit module for consts
# 2019-05-17 kdw  Kwplanets:pl.* rmed
# 2019-05-14 kdw  Kwplanets:lf_isa_calc, isa_dens funcs; rework
# 2019-05-08 kdw  Kwplanets:func descripts
# 2019-05-07 kdw  Kwplanets:isa_.* funcs
# 2019-04-30 kdw  Kwplanets:failed experiment
# 2019-04-23 kdw  Kwplanets:e.*_air_[p]ressure() function rework
# 2019-04-22 kdw  Kwplanets:e.*_air_[p]ressure() function
# 2019-03-19 kdw  Kwplanets:re[t]_val to re[t]valu
# 2019-03-18 kdw  Kwplanets:macro syntax changed
# 2019-03-15 kdw  Kwplanets:use to[p]yh1
# 2019-03-08 kdw  Kwplanets:is[e]qual to is[e]q, et al.
# 2019-03-04 kdw  Kwplanets:loop-limit work
# 2019-02-28 kdw  Kwplanets:REP[L]ACE/DE[F]INE work
# 2019-02-19 kdw  Kwplanets:macro syntax
# 2019-02-04 kdw  Kwplanets:pmo macro, et al
# 2019-01-30 kdw  Kwplanets:lv_p[l]_ey var
# 2019-01-27 kdw  Kwplanets:pl-helioc[e]ntric func
# 2019-01-23 kdw  Kwplanets:probs with powers
# 2018-12-12 kdw  Kwplanets:macros.fwip
# 2018-12-10 kdw  Kwplanets:module specific refs
# 2018-11-29 kdw  Kwplanets:upper cased fwip defined funcs
# 2018-11-26 kdw  Kwplanets:PL_ prfxs
# 2018-11-03 kdw  Kwplanets:comment
# 2018-10-27 kdw  Kwplanets:comment change
# 2018-10-04 kdw  Kwplanets:uppercased fwip trig funcs
# 2018-07-19 kdw  Kwplanets:comments; array reformat
# 2018-07-17 kdw  Kwplanets:private lf_.* funcs
# 2018-07-13 kdw  Kwplanets:float number reformt
# 2018-07-10 kdw  Kwplanets:added "+" to exponents
# 2018-05-24 kdw  Kwplanets:eccentric anomaly refactor
# 2018-05-23 kdw  Kwplanets:orbital elements
# 2018-05-23 kdw  Kwplanets:eccentric anomaly func
# 2018-05-22 kdw  Kwplanets:comment change
# 2018-05-17 kdw  Kwplanets:AR[R]AY.* and HOR[N]ER syntax
# 2018-05-16 kdw  Kwplanets:AR[R]AY syntax
# 2018-04-19 kdw  Kwplanets:consts rework
# 2018-04-09 kdw  Kwplanets:[tdr]2[rdt] func renam
# 2018-04-03 kdw  Kwplanets:rm() from return
# 2018-03-26 kdw  Kwplanets:macro redef
# 2018-03-20 kdw  Kwplanets:replaced index w/ "at"replace
# 2018-03-16 kdw  Kwplanets:constant and index format
# 2018-03-12 kdw  Kwplanets:made PP statements not need ";"
# 2018-02-27 kdw  Kwplanets:mass function refactor
# 2018-02-19 kdw  Kwplanets:secant and macro refactor
# 2018-02-17 kdw  Kwplanets:expandnow changed
# 2018-02-14 kdw  Kwplanets:IN[D]EX stuff
# 2018-02-12 kdw  Kwplanets:stern-levison
# 2018-02-10 kdw  Kwplanets:*_B calcd from _A and FLAT
# 2018-02-08 kdw  Kwplanets:*_[ABC] radii
# 2018-01-15 kdw  Kwplanets:margot comments
# 2017-11-24 kdw  Kwplanets:print string changed
# 2017-11-23 kdw  Kwplanets:rm digits from var names
# 2017-11-22 kdw  Kwplanets:var renam
# 2017-11-07 kdw  Kwplanets:perihelion, aphelion spelled out
# 2017-10-23 kdw  Kwplanets:COM[M]ENT syntax
# 2017-10-22 kdw  Kwplanets:peri and ap
# 2017-10-21 kdw  Kwplanets:in[s]ert syntax
# 2017-10-17 kdw  Kwplanets:GM redo; several earth redefd
# 2017-10-15 kdw  Kwplanets:sun mass
# 2017-10-10 kdw  Kwplanets:__B <= __C <= __A
# 2017-10-09 kdw  Kwplanets:suppress units warning with "+-"
# 2017-10-07 kdw  Kwplanets:__C; __RADIUS calc changed
# 2017-10-06 kdw  Kwplanets:mucho refactor(lots of consts)
# 2017-10-04 kdw  Kwplanets:NUS
# 2017-10-03 kdw  Kwplanets:margot  simplified
# 2017-10-02 kdw  Kwplanets:pl* funcs
# 2017-10-02 kdw  Kwplanets:only names
# 2017-10-01 kdw  Kwplanets:_planet_.* reorg
# 2017-09-29 kdw  Kwplanets:_planet_.* created
# 2017-09-29 kdw  Kwplanets:EA[R]THFLAT
# 2017-09-28 kdw  Kwplanets:tropical year
# 2017-09-27 kdw  Kwplanets:EA[R]THGRA[V]ITY[AB]
# 2017-09-26 kdw  Kwplanets:created
#   IIIIIIIIIInsert-Begin ##################################### Macros.fwip #
#    COPYRIGHT C 2018-2021 by Kevin D. Woerner
# 2021-05-11 kdw  Macros:secant loop simplified
# 2021-04-14 kdw  Macros:macro reformat
# 2020-11-28 kdw  Macros:macro syntax overhaul
# 2020-08-17 kdw  Macros:macro syntax changed
# 2020-07-24 kdw  Macros:comment cleanup
# 2020-06-20 kdw  Macros:comment change
# 2020-04-26 kdw  Macros:block indentation
# 2020-04-23 kdw  Macros:const format change
# 2020-04-12 kdw  Macros:comment change
# 2020-04-11 kdw  Macros:macro arg format
# 2020-04-08 kdw  Macros:preprocess sigil change
# 2020-03-06 kdw  Macros:RE[P]LACE / IN[D]EX changes
# 2020-03-03 kdw  Macros:comment changed:odd chars
# 2020-03-02 kdw  Macros:s/_NE[X]T/_E[N]D/g
# 2020-02-26 kdw  Macros:HO[R]NER rmed
# 2020-02-14 kdw  Macros:incomplete beta work
# 2020-02-03 kdw  Macros:.*_LOOP changed
# 2019-11-19 kdw  Macros:format change
# 2019-10-04 kdw  Macros:comment change
# 2019-10-02 kdw  Macros:macro arg format change
# 2019-08-24 kdw  Macros:for and count loops have from clause
# 2019-08-14 kdw  Macros:comments added
# 2019-08-13 kdw  Macros:reorg ho[r]ner
# 2019-08-06 kdw  Macros:rmed backslashes, macro arg renam
# 2019-06-02 kdw  Macros:NR_ to RAPHSON_
# 2019-05-31 kdw  Macros:NR_DO to RAPHSON_LOOP; et al
# 2019-05-29 kdw  Macros:comment changed
# 2019-05-16 kdw  Macros:loop limit def mved
# 2019-03-18 kdw  Macros:macro syntax changed
# 2019-03-08 kdw  Macros:is[e]qual to is[e]q, et al.
# 2019-03-06 kdw  Macros:is.* funcs changed
# 2019-03-04 kdw  Macros:loop-limit work
# 2019-02-28 kdw  Macros:REP[L]ACE/DE[F]INE work
# 2019-02-19 kdw  Macros:macro syntax
# 2019-02-13 kdw  Macros:comment work
# 2018-12-20 kdw  Macros:work on module specific functions
# 2018-12-12 kdw  Macros:created
# limit for loops
#   IIIIIIIIIInsert-End ####################################### Macros.fwip #
# basic, usefull things
IMPORT "Kw";
IMPORT "Kwelements";
# need molecular mass of air for ISA calculation
#           NAME; GM; YEAR(DAYS); DAY(DAYS)
CONST SUN_GM 1.32712440018E+20 * Kw.UNITGM;
#L3T-2
CONST SUN_YEAR 0.0 * Kw.DAY;
#T
CONST SUN_DAY 24.47 * Kw.DAY;
#T
CONST MERCURY_GM 2.2032E+13 * Kw.UNITGM;
#L3T-2
CONST MERCURY_YEAR 87.9691 * Kw.DAY;
#T
CONST MERCURY_DAY 58.6462 * Kw.DAY;
#T
CONST VENUS_GM 3.24859E+14 * Kw.UNITGM;
#L3T-2
CONST VENUS_YEAR 224.701 * Kw.DAY;
#T
CONST VENUS_DAY - 243.018 * Kw.DAY;
#T
CONST MARS_GM 4.282837E+13 * Kw.UNITGM;
#L3T-2
CONST MARS_YEAR 686.971 * Kw.DAY;
#T
CONST MARS_DAY 1.02595676 * Kw.DAY;
#T
CONST EARTH_GM 3.986004418E+14 * Kw.UNITGM;
#L3T-2
CONST EARTH_YEAR 365.256363004 * Kw.DAY;
#T
CONST EARTH_DAY 1.0 / 1.00273781191135448 * Kw.DAY;
#T
CONST JUPITER_GM 1.26686534E+17 * Kw.UNITGM;
#L3T-2
CONST JUPITER_YEAR 4332.59 * Kw.DAY;
#T
CONST JUPITER_DAY 0.41354 * Kw.DAY;
#T
CONST SATURN_GM 3.7931187E+16 * Kw.UNITGM;
#L3T-2
CONST SATURN_YEAR 10759.22 * Kw.DAY;
#T
CONST SATURN_DAY 0.44401 * Kw.DAY;
#T
CONST URANUS_GM 5.793939E+15 * Kw.UNITGM;
#L3T-2
CONST URANUS_YEAR 30688.5 * Kw.DAY;
#T
CONST URANUS_DAY - 0.71833 * Kw.DAY;
#T
CONST NEPTUNE_GM 6.836529E+15 * Kw.UNITGM;
#L3T-2
CONST NEPTUNE_YEAR 6.0182E+4 * Kw.DAY;
#T
CONST NEPTUNE_DAY 0.67125 * Kw.DAY;
#T
CONST PLUTO_GM 8.71E+11 * Kw.UNITGM;
#L3T-2
CONST PLUTO_YEAR 9.056E+4 * Kw.DAY;
#T
CONST PLUTO_DAY 6.38723 * Kw.DAY;
#T
CONST MOON_GM 4.9048695E+12 * Kw.UNITGM;
#L3T-2
CONST MOON_YEAR 27.32166155 * Kw.DAY;
#T
CONST MOON_DAY 27.321661 * Kw.DAY;
#T
CONST CERES_GM 6.26325E+10 * Kw.UNITGM;
#L3T-2
CONST CERES_YEAR 1681.63 * Kw.DAY;
#T
CONST CERES_DAY 0.378090 * Kw.DAY;
#T
CONST ERIS_GM 1.108E+12 * Kw.UNITGM;
#L3T-2
CONST ERIS_YEAR 2.0383E+5 * Kw.DAY;
#T
CONST ERIS_DAY 1.0792 * Kw.DAY;
#T
CONST MAKEMAKE_GM 2.9366E+11 * Kw.UNITGM;
#L3T-2
CONST MAKEMAKE_YEAR 1.12897E+5 * Kw.DAY;
#T
CONST MAKEMAKE_DAY 0.32379 * Kw.DAY;
#T
CONST HAUMEA_GM 2.674E+11 * Kw.UNITGM;
#L3T-2
CONST HAUMEA_YEAR 1.03774E+5 * Kw.DAY;
#T
CONST HAUMEA_DAY 0.16314585 * Kw.DAY;
#T
LANGUAGE_NOT LANG_VB6 LANG_VBDOTNET:
   # DAY is a function
   CONST EARTH_SOLARDAY Kw.DAY;
   #T
LANGUAGE_END
# DAY is a function
# http://hpiers.obspm.fr/eop-pc /models/constants.html
# See also Wikipedia::Sidereal_time
# Earths rotational period relative to vernal equinox
CONST EARTH_SIDEREALDAY Kw.DAY / 1.002737909350795;
#T
# Earths rotational period relative to stars(IERS)
CONST EARTH_STELLARDAY EARTH_DAY;
CONST EARTH_TROPICALYEAR 365.242190402 * Kw.DAY;
#T
CONST EARTH_SIDEREALYEAR EARTH_YEAR;
#T
CONST EARTH_ANOMALISTICYEAR 365.259636 * Kw.DAY;
#T
CONST SIDEREALYEAR EARTH_SIDEREALYEAR;
#T
CONST ANOMALISTICYEAR EARTH_ANOMALISTICYEAR;
#T
CONST TROPICALYEAR EARTH_TROPICALYEAR;
#T
CONST SUN_FLATNESS 9.0E-6;
#1
CONST SUN_A 6.957E+8 * Kw.METER;
#L
CONST SUN_C SUN_A;
#L
CONST MERCURY_FLATNESS 0.0;
#1
CONST MERCURY_A 2.4397E+6 * Kw.METER;
#L
CONST MERCURY_C MERCURY_A;
#L
CONST VENUS_FLATNESS 0.0;
#1
CONST VENUS_A 6.0518E+6 * Kw.METER;
#L
CONST VENUS_C VENUS_A;
#L
CONST EARTH_FLATNESS 1.0 / 298.257223563;
#1
CONST EARTH_A 6.378137E+6 * Kw.METER;
#L
CONST EARTH_C EARTH_A;
#L # WGS84
CONST MARS_FLATNESS 1.0 / 169.81;
#1
CONST MARS_A 3.3962E+6 * Kw.METER;
#L
CONST MARS_C MARS_A;
#L
CONST JUPITER_FLATNESS 1.0 / 15.4144028;
#1
CONST JUPITER_A 7.1492E+7 * Kw.METER;
#L
CONST JUPITER_C JUPITER_A;
#L
CONST SATURN_FLATNESS 1.0 / 10.208;
#1
CONST SATURN_A 6.0268E+7 * Kw.METER;
#L
CONST SATURN_C SATURN_A;
#L
CONST URANUS_FLATNESS 1.0 / 43.61604;
#1
CONST URANUS_A 2.5559E+7 * Kw.METER;
#L
CONST URANUS_C URANUS_A;
#L
CONST NEPTUNE_FLATNESS 1.0 / 58.54373;
#1
CONST NEPTUNE_A 2.4764E+7 * Kw.METER;
#L
CONST NEPTUNE_C NEPTUNE_A;
#L
CONST PLUTO_FLATNESS 0.0;
#1
CONST PLUTO_A 1.1899E+6 * Kw.METER;
#L
CONST PLUTO_C PLUTO_A;
#L
CONST MOON_FLATNESS 1.0 / 827.667;
#1
CONST MOON_A 1.7381E+6 * Kw.METER;
#L
CONST MOON_C MOON_A;
#L
CONST CERES_FLATNESS 1.0 / 13.0432;
#1
CONST CERES_A 4.826E+5 * Kw.METER;
#L
CONST CERES_C 4.806E+5 * Kw.METER;
#L
CONST ERIS_FLATNESS 0.0;
#1
CONST ERIS_A 1.163E+6 * Kw.METER;
#L
CONST ERIS_C ERIS_A;
#L
CONST MAKEMAKE_FLATNESS 1.0 / 30.7917;
#1
CONST MAKEMAKE_A 7.39E+5 * Kw.METER;
#L
CONST MAKEMAKE_C MAKEMAKE_A;
#L
CONST HAUMEA_FLATNESS 1.0 / 1.96115;
#1
CONST HAUMEA_A 1.161E+6 * Kw.METER;
#L
CONST HAUMEA_C 8.52E+5 * Kw.METER;
#L
# Calculated consts for SUN
CONST SUN_B SUN_A * (1.0 - SUN_FLATNESS);
#L
CONST SUN_RADIUS (SUN_A + SUN_B + SUN_C) / 3.0;
#L
LANGUAGE_NOT LANG_VB6 LANG_VBDOTNET:
   # VB no sqrt in consts
   CONST SUN_ESCAPE SQRT(2.0 * SUN_GM / SUN_RADIUS);
   #L/T
   CONST SUN_OBLATENESS SQRT(SUN_FLATNESS * (2.0 + - SUN_FLATNESS));
   #1
LANGUAGE_END
# VB no sqrt in consts
CONST SUN_GRAVITY SUN_GM / (SUN_RADIUS * SUN_RADIUS);
#LT-2
CONST SUN_MASS SUN_GM / Kw.GRAVITATION;
#M
CONST SUN_VOLUME 2.0 * Kw.TAU / 3.0 * SUN_RADIUS * SUN_RADIUS * SUN_RADIUS;
#L3
CONST SUN_SURFACE 2.0 * Kw.TAU * SUN_RADIUS * SUN_RADIUS;
#L2
CONST SUN_DENSITY SUN_MASS / SUN_VOLUME;
#ML-3
# Calculated consts for EARTH
CONST EARTH_B EARTH_A * (1.0 - EARTH_FLATNESS);
#L
CONST EARTH_RADIUS (EARTH_A + EARTH_B + EARTH_C) / 3.0;
#L
LANGUAGE_NOT LANG_VB6 LANG_VBDOTNET:
   # VB no sqrt in consts
   CONST EARTH_ESCAPE SQRT(2.0 * EARTH_GM / EARTH_RADIUS);
   #L/T
   CONST EARTH_OBLATENESS SQRT(EARTH_FLATNESS * (2.0 + - EARTH_FLATNESS));
   #1
LANGUAGE_END
# VB no sqrt in consts
CONST EARTH_GRAVITY EARTH_GM / (EARTH_RADIUS * EARTH_RADIUS);
#LT-2
CONST EARTH_MASS EARTH_GM / Kw.GRAVITATION;
#M
CONST EARTH_VOLUME 2.0 * Kw.TAU / 3.0 * EARTH_RADIUS * EARTH_RADIUS
         * EARTH_RADIUS;
#L3
CONST EARTH_SURFACE 2.0 * Kw.TAU * EARTH_RADIUS * EARTH_RADIUS;
#L2
CONST EARTH_DENSITY EARTH_MASS / EARTH_VOLUME;
#ML-3
# Calculated consts for MERCURY
CONST MERCURY_B MERCURY_A * (1.0 - MERCURY_FLATNESS);
#L
CONST MERCURY_RADIUS (MERCURY_A + MERCURY_B + MERCURY_C) / 3.0;
#L
LANGUAGE_NOT LANG_VB6 LANG_VBDOTNET:
   # VB no sqrt in consts
   CONST MERCURY_ESCAPE SQRT(2.0 * MERCURY_GM / MERCURY_RADIUS);
   #L/T
   CONST MERCURY_OBLATENESS SQRT(MERCURY_FLATNESS * (2.0 +
            - MERCURY_FLATNESS));
   #1
LANGUAGE_END
# VB no sqrt in consts
CONST MERCURY_GRAVITY MERCURY_GM / (MERCURY_RADIUS * MERCURY_RADIUS);
#LT-2
CONST MERCURY_MASS MERCURY_GM / Kw.GRAVITATION;
#M
CONST MERCURY_VOLUME 2.0 * Kw.TAU / 3.0 * MERCURY_RADIUS * MERCURY_RADIUS
         * MERCURY_RADIUS;
#L3
CONST MERCURY_SURFACE 2.0 * Kw.TAU * MERCURY_RADIUS * MERCURY_RADIUS;
#L2
CONST MERCURY_DENSITY MERCURY_MASS / MERCURY_VOLUME;
#ML-3
CONST MERCURY_SYNODIC EARTH_SIDEREALYEAR * MERCURY_YEAR / (MERCURY_YEAR +
         - EARTH_SIDEREALYEAR);
#T
# Calculated consts for VENUS
CONST VENUS_B VENUS_A * (1.0 - VENUS_FLATNESS);
#L
CONST VENUS_RADIUS (VENUS_A + VENUS_B + VENUS_C) / 3.0;
#L
LANGUAGE_NOT LANG_VB6 LANG_VBDOTNET:
   # VB no sqrt in consts
   CONST VENUS_ESCAPE SQRT(2.0 * VENUS_GM / VENUS_RADIUS);
   #L/T
   CONST VENUS_OBLATENESS SQRT(VENUS_FLATNESS * (2.0 + - VENUS_FLATNESS));
   #1
LANGUAGE_END
# VB no sqrt in consts
CONST VENUS_GRAVITY VENUS_GM / (VENUS_RADIUS * VENUS_RADIUS);
#LT-2
CONST VENUS_MASS VENUS_GM / Kw.GRAVITATION;
#M
CONST VENUS_VOLUME 2.0 * Kw.TAU / 3.0 * VENUS_RADIUS * VENUS_RADIUS
         * VENUS_RADIUS;
#L3
CONST VENUS_SURFACE 2.0 * Kw.TAU * VENUS_RADIUS * VENUS_RADIUS;
#L2
CONST VENUS_DENSITY VENUS_MASS / VENUS_VOLUME;
#ML-3
CONST VENUS_SYNODIC EARTH_SIDEREALYEAR * VENUS_YEAR / (VENUS_YEAR +
         - EARTH_SIDEREALYEAR);
#T
# Calculated consts for MARS
CONST MARS_B MARS_A * (1.0 - MARS_FLATNESS);
#L
CONST MARS_RADIUS (MARS_A + MARS_B + MARS_C) / 3.0;
#L
LANGUAGE_NOT LANG_VB6 LANG_VBDOTNET:
   # VB no sqrt in consts
   CONST MARS_ESCAPE SQRT(2.0 * MARS_GM / MARS_RADIUS);
   #L/T
   CONST MARS_OBLATENESS SQRT(MARS_FLATNESS * (2.0 + - MARS_FLATNESS));
   #1
LANGUAGE_END
# VB no sqrt in consts
CONST MARS_GRAVITY MARS_GM / (MARS_RADIUS * MARS_RADIUS);
#LT-2
CONST MARS_MASS MARS_GM / Kw.GRAVITATION;
#M
CONST MARS_VOLUME 2.0 * Kw.TAU / 3.0 * MARS_RADIUS * MARS_RADIUS
         * MARS_RADIUS;
#L3
CONST MARS_SURFACE 2.0 * Kw.TAU * MARS_RADIUS * MARS_RADIUS;
#L2
CONST MARS_DENSITY MARS_MASS / MARS_VOLUME;
#ML-3
CONST MARS_SYNODIC EARTH_SIDEREALYEAR * MARS_YEAR / (MARS_YEAR +
         - EARTH_SIDEREALYEAR);
#T
# Calculated consts for JUPITER
CONST JUPITER_B JUPITER_A * (1.0 - JUPITER_FLATNESS);
#L
CONST JUPITER_RADIUS (JUPITER_A + JUPITER_B + JUPITER_C) / 3.0;
#L
LANGUAGE_NOT LANG_VB6 LANG_VBDOTNET:
   # VB no sqrt in consts
   CONST JUPITER_ESCAPE SQRT(2.0 * JUPITER_GM / JUPITER_RADIUS);
   #L/T
   CONST JUPITER_OBLATENESS SQRT(JUPITER_FLATNESS * (2.0 +
            - JUPITER_FLATNESS));
   #1
LANGUAGE_END
# VB no sqrt in consts
CONST JUPITER_GRAVITY JUPITER_GM / (JUPITER_RADIUS * JUPITER_RADIUS);
#LT-2
CONST JUPITER_MASS JUPITER_GM / Kw.GRAVITATION;
#M
CONST JUPITER_VOLUME 2.0 * Kw.TAU / 3.0 * JUPITER_RADIUS * JUPITER_RADIUS
         * JUPITER_RADIUS;
#L3
CONST JUPITER_SURFACE 2.0 * Kw.TAU * JUPITER_RADIUS * JUPITER_RADIUS;
#L2
CONST JUPITER_DENSITY JUPITER_MASS / JUPITER_VOLUME;
#ML-3
CONST JUPITER_SYNODIC EARTH_SIDEREALYEAR * JUPITER_YEAR / (JUPITER_YEAR +
         - EARTH_SIDEREALYEAR);
#T
# Calculated consts for SATURN
CONST SATURN_B SATURN_A * (1.0 - SATURN_FLATNESS);
#L
CONST SATURN_RADIUS (SATURN_A + SATURN_B + SATURN_C) / 3.0;
#L
LANGUAGE_NOT LANG_VB6 LANG_VBDOTNET:
   # VB no sqrt in consts
   CONST SATURN_ESCAPE SQRT(2.0 * SATURN_GM / SATURN_RADIUS);
   #L/T
   CONST SATURN_OBLATENESS SQRT(SATURN_FLATNESS * (2.0 + - SATURN_FLATNESS));
   #1
LANGUAGE_END
# VB no sqrt in consts
CONST SATURN_GRAVITY SATURN_GM / (SATURN_RADIUS * SATURN_RADIUS);
#LT-2
CONST SATURN_MASS SATURN_GM / Kw.GRAVITATION;
#M
CONST SATURN_VOLUME 2.0 * Kw.TAU / 3.0 * SATURN_RADIUS * SATURN_RADIUS
         * SATURN_RADIUS;
#L3
CONST SATURN_SURFACE 2.0 * Kw.TAU * SATURN_RADIUS * SATURN_RADIUS;
#L2
CONST SATURN_DENSITY SATURN_MASS / SATURN_VOLUME;
#ML-3
CONST SATURN_SYNODIC EARTH_SIDEREALYEAR * SATURN_YEAR / (SATURN_YEAR +
         - EARTH_SIDEREALYEAR);
#T
# Calculated consts for URANUS
CONST URANUS_B URANUS_A * (1.0 - URANUS_FLATNESS);
#L
CONST URANUS_RADIUS (URANUS_A + URANUS_B + URANUS_C) / 3.0;
#L
LANGUAGE_NOT LANG_VB6 LANG_VBDOTNET:
   # VB no sqrt in consts
   CONST URANUS_ESCAPE SQRT(2.0 * URANUS_GM / URANUS_RADIUS);
   #L/T
   CONST URANUS_OBLATENESS SQRT(URANUS_FLATNESS * (2.0 + - URANUS_FLATNESS));
   #1
LANGUAGE_END
# VB no sqrt in consts
CONST URANUS_GRAVITY URANUS_GM / (URANUS_RADIUS * URANUS_RADIUS);
#LT-2
CONST URANUS_MASS URANUS_GM / Kw.GRAVITATION;
#M
CONST URANUS_VOLUME 2.0 * Kw.TAU / 3.0 * URANUS_RADIUS * URANUS_RADIUS
         * URANUS_RADIUS;
#L3
CONST URANUS_SURFACE 2.0 * Kw.TAU * URANUS_RADIUS * URANUS_RADIUS;
#L2
CONST URANUS_DENSITY URANUS_MASS / URANUS_VOLUME;
#ML-3
CONST URANUS_SYNODIC EARTH_SIDEREALYEAR * URANUS_YEAR / (URANUS_YEAR +
         - EARTH_SIDEREALYEAR);
#T
# Calculated consts for NEPTUNE
CONST NEPTUNE_B NEPTUNE_A * (1.0 - NEPTUNE_FLATNESS);
#L
CONST NEPTUNE_RADIUS (NEPTUNE_A + NEPTUNE_B + NEPTUNE_C) / 3.0;
#L
LANGUAGE_NOT LANG_VB6 LANG_VBDOTNET:
   # VB no sqrt in consts
   CONST NEPTUNE_ESCAPE SQRT(2.0 * NEPTUNE_GM / NEPTUNE_RADIUS);
   #L/T
   CONST NEPTUNE_OBLATENESS SQRT(NEPTUNE_FLATNESS * (2.0 +
            - NEPTUNE_FLATNESS));
   #1
LANGUAGE_END
# VB no sqrt in consts
CONST NEPTUNE_GRAVITY NEPTUNE_GM / (NEPTUNE_RADIUS * NEPTUNE_RADIUS);
#LT-2
CONST NEPTUNE_MASS NEPTUNE_GM / Kw.GRAVITATION;
#M
CONST NEPTUNE_VOLUME 2.0 * Kw.TAU / 3.0 * NEPTUNE_RADIUS * NEPTUNE_RADIUS
         * NEPTUNE_RADIUS;
#L3
CONST NEPTUNE_SURFACE 2.0 * Kw.TAU * NEPTUNE_RADIUS * NEPTUNE_RADIUS;
#L2
CONST NEPTUNE_DENSITY NEPTUNE_MASS / NEPTUNE_VOLUME;
#ML-3
CONST NEPTUNE_SYNODIC EARTH_SIDEREALYEAR * NEPTUNE_YEAR / (NEPTUNE_YEAR +
         - EARTH_SIDEREALYEAR);
#T
# Calculated consts for PLUTO
CONST PLUTO_B PLUTO_A * (1.0 - PLUTO_FLATNESS);
#L
CONST PLUTO_RADIUS (PLUTO_A + PLUTO_B + PLUTO_C) / 3.0;
#L
LANGUAGE_NOT LANG_VB6 LANG_VBDOTNET:
   # VB no sqrt in consts
   CONST PLUTO_ESCAPE SQRT(2.0 * PLUTO_GM / PLUTO_RADIUS);
   #L/T
   CONST PLUTO_OBLATENESS SQRT(PLUTO_FLATNESS * (2.0 + - PLUTO_FLATNESS));
   #1
LANGUAGE_END
# VB no sqrt in consts
CONST PLUTO_GRAVITY PLUTO_GM / (PLUTO_RADIUS * PLUTO_RADIUS);
#LT-2
CONST PLUTO_MASS PLUTO_GM / Kw.GRAVITATION;
#M
CONST PLUTO_VOLUME 2.0 * Kw.TAU / 3.0 * PLUTO_RADIUS * PLUTO_RADIUS
         * PLUTO_RADIUS;
#L3
CONST PLUTO_SURFACE 2.0 * Kw.TAU * PLUTO_RADIUS * PLUTO_RADIUS;
#L2
CONST PLUTO_DENSITY PLUTO_MASS / PLUTO_VOLUME;
#ML-3
CONST PLUTO_SYNODIC EARTH_SIDEREALYEAR * PLUTO_YEAR / (PLUTO_YEAR +
         - EARTH_SIDEREALYEAR);
#T
# Calculated consts for MOON
CONST MOON_B MOON_A * (1.0 - MOON_FLATNESS);
#L
CONST MOON_RADIUS (MOON_A + MOON_B + MOON_C) / 3.0;
#L
LANGUAGE_NOT LANG_VB6 LANG_VBDOTNET:
   # VB no sqrt in consts
   CONST MOON_ESCAPE SQRT(2.0 * MOON_GM / MOON_RADIUS);
   #L/T
   CONST MOON_OBLATENESS SQRT(MOON_FLATNESS * (2.0 + - MOON_FLATNESS));
   #1
LANGUAGE_END
# VB no sqrt in consts
CONST MOON_GRAVITY MOON_GM / (MOON_RADIUS * MOON_RADIUS);
#LT-2
CONST MOON_MASS MOON_GM / Kw.GRAVITATION;
#M
CONST MOON_VOLUME 2.0 * Kw.TAU / 3.0 * MOON_RADIUS * MOON_RADIUS
         * MOON_RADIUS;
#L3
CONST MOON_SURFACE 2.0 * Kw.TAU * MOON_RADIUS * MOON_RADIUS;
#L2
CONST MOON_DENSITY MOON_MASS / MOON_VOLUME;
#ML-3
CONST MOON_SYNODIC EARTH_SIDEREALYEAR * MOON_YEAR / (MOON_YEAR +
         - EARTH_SIDEREALYEAR);
#T
# Calculated consts for CERES
CONST CERES_B CERES_A * (1.0 - CERES_FLATNESS);
#L
CONST CERES_RADIUS (CERES_A + CERES_B + CERES_C) / 3.0;
#L
LANGUAGE_NOT LANG_VB6 LANG_VBDOTNET:
   # VB no sqrt in consts
   CONST CERES_ESCAPE SQRT(2.0 * CERES_GM / CERES_RADIUS);
   #L/T
   CONST CERES_OBLATENESS SQRT(CERES_FLATNESS * (2.0 + - CERES_FLATNESS));
   #1
LANGUAGE_END
# VB no sqrt in consts
CONST CERES_GRAVITY CERES_GM / (CERES_RADIUS * CERES_RADIUS);
#LT-2
CONST CERES_MASS CERES_GM / Kw.GRAVITATION;
#M
CONST CERES_VOLUME 2.0 * Kw.TAU / 3.0 * CERES_RADIUS * CERES_RADIUS
         * CERES_RADIUS;
#L3
CONST CERES_SURFACE 2.0 * Kw.TAU * CERES_RADIUS * CERES_RADIUS;
#L2
CONST CERES_DENSITY CERES_MASS / CERES_VOLUME;
#ML-3
CONST CERES_SYNODIC EARTH_SIDEREALYEAR * CERES_YEAR / (CERES_YEAR +
         - EARTH_SIDEREALYEAR);
#T
# Calculated consts for ERIS
CONST ERIS_B ERIS_A * (1.0 - ERIS_FLATNESS);
#L
CONST ERIS_RADIUS (ERIS_A + ERIS_B + ERIS_C) / 3.0;
#L
LANGUAGE_NOT LANG_VB6 LANG_VBDOTNET:
   # VB no sqrt in consts
   CONST ERIS_ESCAPE SQRT(2.0 * ERIS_GM / ERIS_RADIUS);
   #L/T
   CONST ERIS_OBLATENESS SQRT(ERIS_FLATNESS * (2.0 + - ERIS_FLATNESS));
   #1
LANGUAGE_END
# VB no sqrt in consts
CONST ERIS_GRAVITY ERIS_GM / (ERIS_RADIUS * ERIS_RADIUS);
#LT-2
CONST ERIS_MASS ERIS_GM / Kw.GRAVITATION;
#M
CONST ERIS_VOLUME 2.0 * Kw.TAU / 3.0 * ERIS_RADIUS * ERIS_RADIUS
         * ERIS_RADIUS;
#L3
CONST ERIS_SURFACE 2.0 * Kw.TAU * ERIS_RADIUS * ERIS_RADIUS;
#L2
CONST ERIS_DENSITY ERIS_MASS / ERIS_VOLUME;
#ML-3
CONST ERIS_SYNODIC EARTH_SIDEREALYEAR * ERIS_YEAR / (ERIS_YEAR +
         - EARTH_SIDEREALYEAR);
#T
# Calculated consts for MAKEMAKE
CONST MAKEMAKE_B MAKEMAKE_A * (1.0 - MAKEMAKE_FLATNESS);
#L
CONST MAKEMAKE_RADIUS (MAKEMAKE_A + MAKEMAKE_B + MAKEMAKE_C) / 3.0;
#L
LANGUAGE_NOT LANG_VB6 LANG_VBDOTNET:
   # VB no sqrt in consts
   CONST MAKEMAKE_ESCAPE SQRT(2.0 * MAKEMAKE_GM / MAKEMAKE_RADIUS);
   #L/T
   CONST MAKEMAKE_OBLATENESS SQRT(MAKEMAKE_FLATNESS * (2.0 +
            - MAKEMAKE_FLATNESS));
   #1
LANGUAGE_END
# VB no sqrt in consts
CONST MAKEMAKE_GRAVITY MAKEMAKE_GM / (MAKEMAKE_RADIUS * MAKEMAKE_RADIUS);
#LT-2
CONST MAKEMAKE_MASS MAKEMAKE_GM / Kw.GRAVITATION;
#M
CONST MAKEMAKE_VOLUME 2.0 * Kw.TAU / 3.0 * MAKEMAKE_RADIUS
         * MAKEMAKE_RADIUS * MAKEMAKE_RADIUS;
#L3
CONST MAKEMAKE_SURFACE 2.0 * Kw.TAU * MAKEMAKE_RADIUS * MAKEMAKE_RADIUS;
#L2
CONST MAKEMAKE_DENSITY MAKEMAKE_MASS / MAKEMAKE_VOLUME;
#ML-3
CONST MAKEMAKE_SYNODIC EARTH_SIDEREALYEAR * MAKEMAKE_YEAR / (MAKEMAKE_YEAR
         + - EARTH_SIDEREALYEAR);
#T
# Calculated consts for HAUMEA
CONST HAUMEA_B HAUMEA_A * (1.0 - HAUMEA_FLATNESS);
#L
CONST HAUMEA_RADIUS (HAUMEA_A + HAUMEA_B + HAUMEA_C) / 3.0;
#L
LANGUAGE_NOT LANG_VB6 LANG_VBDOTNET:
   # VB no sqrt in consts
   CONST HAUMEA_ESCAPE SQRT(2.0 * HAUMEA_GM / HAUMEA_RADIUS);
   #L/T
   CONST HAUMEA_OBLATENESS SQRT(HAUMEA_FLATNESS * (2.0 + - HAUMEA_FLATNESS));
   #1
LANGUAGE_END
# VB no sqrt in consts
CONST HAUMEA_GRAVITY HAUMEA_GM / (HAUMEA_RADIUS * HAUMEA_RADIUS);
#LT-2
CONST HAUMEA_MASS HAUMEA_GM / Kw.GRAVITATION;
#M
CONST HAUMEA_VOLUME 2.0 * Kw.TAU / 3.0 * HAUMEA_RADIUS * HAUMEA_RADIUS
         * HAUMEA_RADIUS;
#L3
CONST HAUMEA_SURFACE 2.0 * Kw.TAU * HAUMEA_RADIUS * HAUMEA_RADIUS;
#L2
CONST HAUMEA_DENSITY HAUMEA_MASS / HAUMEA_VOLUME;
#ML-3
CONST HAUMEA_SYNODIC EARTH_SIDEREALYEAR * HAUMEA_YEAR / (HAUMEA_YEAR +
         - EARTH_SIDEREALYEAR);
#T
CONST SUN_GMIERS 1.32712442099E+20 * Kw.UNITGM;
#L3T-2
CONST SUN_GMNASA SUN_GM;
#L3T-2
CONST EARTH_THETA_0 0.7790572732640 * Kw.TURN;
#A
##    ORBITAL INFORMATION --- ----- ----- ----- ----- ----- ----- ----- -----
CONST MOON_ORBIT 3.843999E+8 * Kw.METER;
#L
CONST MOON_ECCENTRICITY 0.0549;
#1
CONST MOON_INCLINATION 5.415 * Kw.ARCDEG;
#A
# from website https://ssd.jpl.nasa.gov /txt/p_elem_t1.txt
# AU; Eccentricity; Inclination; Longitude; Periapsis; Ascending
# Orbital Elements for SUN
CONST SUN_ORBIT 0.0 * Kw.AU;
#L
CONST SUN_ECCENTRICITY 0.0;
#1
CONST SUN_INCLINATION 0.0 * Kw.ARCDEG;
#A
CONST SUN_LONGITUDE 0.0 * Kw.ARCDEG;
#A
CONST SUN_PERIAPSIS 0.0 * Kw.ARCDEG;
#A
CONST SUN_ASCENDING 0.0 * Kw.ARCDEG;
#A
CONST SUN_ORBIT_DT 0.0 * Kw.AU / Kw.JCENTURY;
#LT-1
CONST SUN_ECCENTRICITY_DT 0.0 / Kw.JCENTURY;
#T-1
CONST SUN_INCLINATION_DT 0.0 * Kw.ARCDEG / Kw.JCENTURY;
#AT-1
CONST SUN_LONGITUDE_DT 0.0 * Kw.ARCDEG / Kw.JCENTURY;
#AT-1
CONST SUN_PERIAPSIS_DT 0.0 * Kw.ARCDEG / Kw.JCENTURY;
#AT-1
CONST SUN_ASCENDING_DT 0.0 * Kw.ARCDEG / Kw.JCENTURY;
#AT-1
# Orbital Elements for EARTH
CONST EARTH_ORBIT 1.00000261 * Kw.AU;
#L
CONST EARTH_ECCENTRICITY 0.01671123;
#1
CONST EARTH_INCLINATION 359.99998469 * Kw.ARCDEG;
#A
CONST EARTH_LONGITUDE 100.46457166 * Kw.ARCDEG;
#A
CONST EARTH_PERIAPSIS 102.93768193 * Kw.ARCDEG;
#A
CONST EARTH_ASCENDING 0.0 * Kw.ARCDEG;
#A
CONST EARTH_ORBIT_DT 0.00000562 * Kw.AU / Kw.JCENTURY;
#LT-1
CONST EARTH_ECCENTRICITY_DT - 0.00004392 / Kw.JCENTURY;
#T-1
CONST EARTH_INCLINATION_DT - 0.01294668 * Kw.ARCDEG / Kw.JCENTURY;
#AT-1
CONST EARTH_LONGITUDE_DT 35999.37244981 * Kw.ARCDEG / Kw.JCENTURY;
#AT-1
CONST EARTH_PERIAPSIS_DT 0.32327364 * Kw.ARCDEG / Kw.JCENTURY;
#AT-1
CONST EARTH_ASCENDING_DT 0.0 * Kw.ARCDEG / Kw.JCENTURY;
#AT-1
# Orbital Elements for MERCURY
CONST MERCURY_ORBIT 0.38709927 * Kw.AU;
#L
CONST MERCURY_ECCENTRICITY 0.20563593;
#1
CONST MERCURY_INCLINATION 7.00497902 * Kw.ARCDEG;
#A
CONST MERCURY_LONGITUDE 252.25032350 * Kw.ARCDEG;
#A
CONST MERCURY_PERIAPSIS 77.45779628 * Kw.ARCDEG;
#A
CONST MERCURY_ASCENDING 48.33076593 * Kw.ARCDEG;
#A
CONST MERCURY_ORBIT_DT 0.00000037 * Kw.AU / Kw.JCENTURY;
#LT-1
CONST MERCURY_ECCENTRICITY_DT 0.00001906 / Kw.JCENTURY;
#T-1
CONST MERCURY_INCLINATION_DT - 0.00594749 * Kw.ARCDEG / Kw.JCENTURY;
#AT-1
CONST MERCURY_LONGITUDE_DT 149472.67411175 * Kw.ARCDEG / Kw.JCENTURY;
#AT-1
CONST MERCURY_PERIAPSIS_DT 0.16047689 * Kw.ARCDEG / Kw.JCENTURY;
#AT-1
CONST MERCURY_ASCENDING_DT - 0.12534081 * Kw.ARCDEG / Kw.JCENTURY;
#AT-1
# Orbital Elements for VENUS
CONST VENUS_ORBIT 0.72333566 * Kw.AU;
#L
CONST VENUS_ECCENTRICITY 0.00677672;
#1
CONST VENUS_INCLINATION 3.39467605 * Kw.ARCDEG;
#A
CONST VENUS_LONGITUDE 181.97909950 * Kw.ARCDEG;
#A
CONST VENUS_PERIAPSIS 131.60246718 * Kw.ARCDEG;
#A
CONST VENUS_ASCENDING 76.67984255 * Kw.ARCDEG;
#A
CONST VENUS_ORBIT_DT 0.00000390 * Kw.AU / Kw.JCENTURY;
#LT-1
CONST VENUS_ECCENTRICITY_DT - 0.00004107 / Kw.JCENTURY;
#T-1
CONST VENUS_INCLINATION_DT - 0.00078890 * Kw.ARCDEG / Kw.JCENTURY;
#AT-1
CONST VENUS_LONGITUDE_DT 58517.81538729 * Kw.ARCDEG / Kw.JCENTURY;
#AT-1
CONST VENUS_PERIAPSIS_DT 0.00268329 * Kw.ARCDEG / Kw.JCENTURY;
#AT-1
CONST VENUS_ASCENDING_DT - 0.27769418 * Kw.ARCDEG / Kw.JCENTURY;
#AT-1
# Orbital Elements for MARS
CONST MARS_ORBIT 1.52371034 * Kw.AU;
#L
CONST MARS_ECCENTRICITY 0.09339410;
#1
CONST MARS_INCLINATION 1.84969142 * Kw.ARCDEG;
#A
CONST MARS_LONGITUDE 355.44656795 * Kw.ARCDEG;
#A
CONST MARS_PERIAPSIS 336.05637041 * Kw.ARCDEG;
#A
CONST MARS_ASCENDING 49.55953891 * Kw.ARCDEG;
#A
CONST MARS_ORBIT_DT 0.00001847 * Kw.AU / Kw.JCENTURY;
#LT-1
CONST MARS_ECCENTRICITY_DT 0.00007882 / Kw.JCENTURY;
#T-1
CONST MARS_INCLINATION_DT - 0.00813131 * Kw.ARCDEG / Kw.JCENTURY;
#AT-1
CONST MARS_LONGITUDE_DT 19140.30268499 * Kw.ARCDEG / Kw.JCENTURY;
#AT-1
CONST MARS_PERIAPSIS_DT 0.44441088 * Kw.ARCDEG / Kw.JCENTURY;
#AT-1
CONST MARS_ASCENDING_DT - 0.29257343 * Kw.ARCDEG / Kw.JCENTURY;
#AT-1
# Orbital Elements for JUPITER
CONST JUPITER_ORBIT 5.20288700 * Kw.AU;
#L
CONST JUPITER_ECCENTRICITY 0.04838624;
#1
CONST JUPITER_INCLINATION 1.30439695 * Kw.ARCDEG;
#A
CONST JUPITER_LONGITUDE 34.39644051 * Kw.ARCDEG;
#A
CONST JUPITER_PERIAPSIS 14.72847983 * Kw.ARCDEG;
#A
CONST JUPITER_ASCENDING 100.47390909 * Kw.ARCDEG;
#A
CONST JUPITER_ORBIT_DT - 0.00011607 * Kw.AU / Kw.JCENTURY;
#LT-1
CONST JUPITER_ECCENTRICITY_DT - 0.00013253 / Kw.JCENTURY;
#T-1
CONST JUPITER_INCLINATION_DT - 0.00183714 * Kw.ARCDEG / Kw.JCENTURY;
#AT-1
CONST JUPITER_LONGITUDE_DT 3034.74612775 * Kw.ARCDEG / Kw.JCENTURY;
#AT-1
CONST JUPITER_PERIAPSIS_DT 0.21252668 * Kw.ARCDEG / Kw.JCENTURY;
#AT-1
CONST JUPITER_ASCENDING_DT 0.20469106 * Kw.ARCDEG / Kw.JCENTURY;
#AT-1
# Orbital Elements for SATURN
CONST SATURN_ORBIT 9.53667594 * Kw.AU;
#L
CONST SATURN_ECCENTRICITY 0.05386179;
#1
CONST SATURN_INCLINATION 2.48599187 * Kw.ARCDEG;
#A
CONST SATURN_LONGITUDE 49.95424423 * Kw.ARCDEG;
#A
CONST SATURN_PERIAPSIS 92.59887831 * Kw.ARCDEG;
#A
CONST SATURN_ASCENDING 113.66242448 * Kw.ARCDEG;
#A
CONST SATURN_ORBIT_DT - 0.00125060 * Kw.AU / Kw.JCENTURY;
#LT-1
CONST SATURN_ECCENTRICITY_DT - 0.00050991 / Kw.JCENTURY;
#T-1
CONST SATURN_INCLINATION_DT 0.00193609 * Kw.ARCDEG / Kw.JCENTURY;
#AT-1
CONST SATURN_LONGITUDE_DT 1222.49362201 * Kw.ARCDEG / Kw.JCENTURY;
#AT-1
CONST SATURN_PERIAPSIS_DT - 0.41897216 * Kw.ARCDEG / Kw.JCENTURY;
#AT-1
CONST SATURN_ASCENDING_DT - 0.28867794 * Kw.ARCDEG / Kw.JCENTURY;
#AT-1
# Orbital Elements for URANUS
CONST URANUS_ORBIT 19.18916464 * Kw.AU;
#L
CONST URANUS_ECCENTRICITY 0.04725744;
#1
CONST URANUS_INCLINATION 0.77263783 * Kw.ARCDEG;
#A
CONST URANUS_LONGITUDE 313.23810451 * Kw.ARCDEG;
#A
CONST URANUS_PERIAPSIS 170.95427630 * Kw.ARCDEG;
#A
CONST URANUS_ASCENDING 74.01692503 * Kw.ARCDEG;
#A
CONST URANUS_ORBIT_DT - 0.00196176 * Kw.AU / Kw.JCENTURY;
#LT-1
CONST URANUS_ECCENTRICITY_DT - 0.00004397 / Kw.JCENTURY;
#T-1
CONST URANUS_INCLINATION_DT - 0.00242939 * Kw.ARCDEG / Kw.JCENTURY;
#AT-1
CONST URANUS_LONGITUDE_DT 428.48202785 * Kw.ARCDEG / Kw.JCENTURY;
#AT-1
CONST URANUS_PERIAPSIS_DT 0.40805281 * Kw.ARCDEG / Kw.JCENTURY;
#AT-1
CONST URANUS_ASCENDING_DT 0.04240589 * Kw.ARCDEG / Kw.JCENTURY;
#AT-1
# Orbital Elements for NEPTUNE
CONST NEPTUNE_ORBIT 30.06992276 * Kw.AU;
#L
CONST NEPTUNE_ECCENTRICITY 0.00859048;
#1
CONST NEPTUNE_INCLINATION 1.77004347 * Kw.ARCDEG;
#A
CONST NEPTUNE_LONGITUDE 304.87997031 * Kw.ARCDEG;
#A
CONST NEPTUNE_PERIAPSIS 44.96476227 * Kw.ARCDEG;
#A
CONST NEPTUNE_ASCENDING 131.78422574 * Kw.ARCDEG;
#A
CONST NEPTUNE_ORBIT_DT 0.00026291 * Kw.AU / Kw.JCENTURY;
#LT-1
CONST NEPTUNE_ECCENTRICITY_DT 0.00005105 / Kw.JCENTURY;
#T-1
CONST NEPTUNE_INCLINATION_DT 0.00035372 * Kw.ARCDEG / Kw.JCENTURY;
#AT-1
CONST NEPTUNE_LONGITUDE_DT 218.45945325 * Kw.ARCDEG / Kw.JCENTURY;
#AT-1
CONST NEPTUNE_PERIAPSIS_DT - 0.32241464 * Kw.ARCDEG / Kw.JCENTURY;
#AT-1
CONST NEPTUNE_ASCENDING_DT - 0.00508664 * Kw.ARCDEG / Kw.JCENTURY;
#AT-1
# Orbital Elements for PLUTO
CONST PLUTO_ORBIT 39.48211675 * Kw.AU;
#L
CONST PLUTO_ECCENTRICITY 0.24882730;
#1
CONST PLUTO_INCLINATION 17.14001206 * Kw.ARCDEG;
#A
CONST PLUTO_LONGITUDE 238.92903833 * Kw.ARCDEG;
#A
CONST PLUTO_PERIAPSIS 224.06891629 * Kw.ARCDEG;
#A
CONST PLUTO_ASCENDING 110.30393684 * Kw.ARCDEG;
#A
CONST PLUTO_ORBIT_DT - 0.00031596 * Kw.AU / Kw.JCENTURY;
#LT-1
CONST PLUTO_ECCENTRICITY_DT 0.00005170 / Kw.JCENTURY;
#T-1
CONST PLUTO_INCLINATION_DT 0.00004818 * Kw.ARCDEG / Kw.JCENTURY;
#AT-1
CONST PLUTO_LONGITUDE_DT 145.20780515 * Kw.ARCDEG / Kw.JCENTURY;
#AT-1
CONST PLUTO_PERIAPSIS_DT - 0.04062942 * Kw.ARCDEG / Kw.JCENTURY;
#AT-1
CONST PLUTO_ASCENDING_DT - 0.01183482 * Kw.ARCDEG / Kw.JCENTURY;
#AT-1
# Orbital Elements for CERES
CONST CERES_ORBIT 2.76740933 * Kw.AU;
#L
CONST CERES_ECCENTRICITY 0.07560729;
#1
CONST CERES_INCLINATION 10.59321706 * Kw.ARCDEG;
#A
CONST CERES_LONGITUDE 102.82668 * Kw.ARCDEG;
#A
CONST CERES_PERIAPSIS 73.023742647 * Kw.ARCDEG;
#A
CONST CERES_ASCENDING 80.308882612359 * Kw.ARCDEG;
#A
CONST CERES_ORBIT_DT 0.0 * Kw.AU / Kw.JCENTURY;
#LT-1
CONST CERES_ECCENTRICITY_DT 0.0 / Kw.JCENTURY;
#T-1
CONST CERES_INCLINATION_DT 0.0 * Kw.ARCDEG / Kw.JCENTURY;
#AT-1
CONST CERES_LONGITUDE_DT 0.0 * Kw.ARCDEG / Kw.JCENTURY;
#AT-1
CONST CERES_PERIAPSIS_DT 0.0 * Kw.ARCDEG / Kw.JCENTURY;
#AT-1
CONST CERES_ASCENDING_DT 0.0 * Kw.ARCDEG / Kw.JCENTURY;
#AT-1
# Orbital Elements for ERIS
CONST ERIS_ORBIT 67.781 * Kw.AU;
#L
CONST ERIS_ECCENTRICITY 0.44068;
#1
CONST ERIS_INCLINATION 44.0445 * Kw.ARCDEG;
#A
CONST ERIS_LONGITUDE 32.4926663 * Kw.ARCDEG;
#A
CONST ERIS_PERIAPSIS 151.60371236817 * Kw.ARCDEG;
#A
CONST ERIS_ASCENDING 35.87992471211 * Kw.ARCDEG;
#A
CONST ERIS_ORBIT_DT 0.0 * Kw.AU / Kw.JCENTURY;
#LT-1
CONST ERIS_ECCENTRICITY_DT 0.0 / Kw.JCENTURY;
#T-1
CONST ERIS_INCLINATION_DT 0.0 * Kw.ARCDEG / Kw.JCENTURY;
#AT-1
CONST ERIS_LONGITUDE_DT 0.0 * Kw.ARCDEG / Kw.JCENTURY;
#AT-1
CONST ERIS_PERIAPSIS_DT 0.0 * Kw.ARCDEG / Kw.JCENTURY;
#AT-1
CONST ERIS_ASCENDING_DT 0.0 * Kw.ARCDEG / Kw.JCENTURY;
#AT-1
# Orbital Elements for MAKEMAKE
CONST MAKEMAKE_ORBIT 45.715 * Kw.AU;
#L
CONST MAKEMAKE_ECCENTRICITY 0.15586;
#1
CONST MAKEMAKE_INCLINATION 29.00685 * Kw.ARCDEG;
#A
CONST MAKEMAKE_LONGITUDE 177.2966805 * Kw.ARCDEG;
#A
CONST MAKEMAKE_PERIAPSIS 295.642772002 * Kw.ARCDEG;
#A
CONST MAKEMAKE_ASCENDING 79.616805978978 * Kw.ARCDEG;
#A
CONST MAKEMAKE_ORBIT_DT 0.0 * Kw.AU / Kw.JCENTURY;
#LT-1
CONST MAKEMAKE_ECCENTRICITY_DT 0.0 / Kw.JCENTURY;
#T-1
CONST MAKEMAKE_INCLINATION_DT 0.0 * Kw.ARCDEG / Kw.JCENTURY;
#AT-1
CONST MAKEMAKE_LONGITUDE_DT 0.0 * Kw.ARCDEG / Kw.JCENTURY;
#AT-1
CONST MAKEMAKE_PERIAPSIS_DT 0.0 * Kw.ARCDEG / Kw.JCENTURY;
#AT-1
CONST MAKEMAKE_ASCENDING_DT 0.0 * Kw.ARCDEG / Kw.JCENTURY;
#AT-1
# Orbital Elements for HAUMEA
CONST HAUMEA_ORBIT 43.218 * Kw.AU;
#L
CONST HAUMEA_ECCENTRICITY 0.19126;
#1
CONST HAUMEA_INCLINATION 28.19 * Kw.ARCDEG;
#A
CONST HAUMEA_LONGITUDE 215.687315 * Kw.ARCDEG;
#A
CONST HAUMEA_PERIAPSIS 238.69440821915 * Kw.ARCDEG;
#A
CONST HAUMEA_ASCENDING 122.01840302632 * Kw.ARCDEG;
#A
CONST HAUMEA_ORBIT_DT 0.0 * Kw.AU / Kw.JCENTURY;
#LT-1
CONST HAUMEA_ECCENTRICITY_DT 0.0 / Kw.JCENTURY;
#T-1
CONST HAUMEA_INCLINATION_DT 0.0 * Kw.ARCDEG / Kw.JCENTURY;
#AT-1
CONST HAUMEA_LONGITUDE_DT 0.0 * Kw.ARCDEG / Kw.JCENTURY;
#AT-1
CONST HAUMEA_PERIAPSIS_DT 0.0 * Kw.ARCDEG / Kw.JCENTURY;
#AT-1
CONST HAUMEA_ASCENDING_DT 0.0 * Kw.ARCDEG / Kw.JCENTURY;
#AT-1
FUNC DBL orbitgm_v(DBL gm_gm
         , DBL orbit_m):
   # orbital velocity around a mass with gravitational parameter GM_GM at a
   #    distance of ORBIT_M meters from center
   RETURN SQRT(gm_gm / orbit_m);
FUNC_END
FUNC DBL orbit_v(DBL mass_kg
         , DBL orbit_m):
   # orbital velocity around a mass MASS_KG at a distance of ORBIT_M meters
   #    from center
   RETURN orbitgm_v(Kw.GRAVITATION * mass_kg, orbit_m);
FUNC_END
FUNC DBL margot(DBL pmass
         , DBL porbit):
   # the const, k, in the following routine equals
   #   k = sqrt(3) * (100 * Tsun)**0.75 * AU**1.125
   #         / (SUNMASS * C**1.5)
   #   k = T**0.75*L**1.125/(M*L**1.5)
   #   where:
   #      C = 2*sqrt(3) HillRadius
   #      HillRadius = _ORBIT * cbrt(_MASS / (3 * SUNMASS))
   #      Tsun = 1E+10 year = lifetime of sun
   #      T_star = (2.5E+108 s kg**3) / starMASS**3
   #   planets have a value much greater than 1, and
   #   dwarf planets have a value much less than 1
   DBL retvalu;
   IF pmass <= 0.0 OR porbit <= 0.0:
      retvalu = 0.0;
   ELSE:
      retvalu = 5.0401742E-10 * pmass / EXP(LN(porbit) * 1.125);
   IF_END
   RETURN retvalu;
FUNC_END
FUNC DBL sternlevison(DBL pmass
         , DBL porbit):
   # the const, k, in the following routine equals
   #   k=1.53E+5 * AU**1.5 / EARTH_MASS**2
   #   planets have a value much larger than 1, and
   #   dwarf planets have a value much less than 1
   DBL retvalu;
   DBL xx;
   IF pmass <= 0.0 OR porbit <= 0.0:
      retvalu = 0.0;
   ELSE:
      xx = 2.0 * LN(pmass) - 1.5 * LN(porbit);
      retvalu = 2.482E-28 * EXP(xx);
   IF_END
   RETURN retvalu;
FUNC_END
BLOCK:
   # SUN must be < 2**15 for VB6 VBDOTNET
   BLOCK_DEF CONST LC_P1_ERR - 1;
   # 1
   BLOCK_DEF CONST LC_P1_PREV_PL - 1;
   # 1
   BLOCK_DEF CONST LC_P1_SUN 0;
   # 1
   BLOCK_DEF CONST LC_P1_MERCURY 1;
   # 1
   BLOCK_DEF CONST LC_P1_VENUS 2;
   # 1
   BLOCK_DEF CONST LC_P1_EARTH 3;
   # 1
   BLOCK_DEF CONST LC_P1_MARS 4;
   # 1
   BLOCK_DEF CONST LC_P1_JUPITER 5;
   # 1
   BLOCK_DEF CONST LC_P1_SATURN 6;
   # 1
   BLOCK_DEF CONST LC_P1_URANUS 7;
   # 1
   BLOCK_DEF CONST LC_P1_NEPTUNE 8;
   # 1
   BLOCK_DEF CONST LC_P1_PLUTO 9;
   # 1
   BLOCK_DEF CONST LC_P1_CERES 10;
   # 1
   BLOCK_DEF CONST LC_P1_ERIS 11;
   # 1
   BLOCK_DEF CONST LC_P1_MAKEMAKE 12;
   # 1
   BLOCK_DEF CONST LC_P1_HAUMEA 13;
   # 1
   BLOCK_DEF CONST LC_P1_CNT 14;
   # 1
   BLOCK_DEF CONST LC_P2_GM 0;
   BLOCK_DEF CONST LC_P2_DAY 1;
   BLOCK_DEF CONST LC_P2_FLATNESS 2;
   BLOCK_DEF CONST LC_P2_A 3;
   BLOCK_DEF CONST LC_P2_C 4;
   BLOCK_DEF CONST LC_P2_YEAR 5;
   BLOCK_DEF CONST LC_P2_ORB 6;
   BLOCK_DEF CONST LC_P2_ECC 7;
   BLOCK_DEF CONST LC_P2_INC 8;
   BLOCK_DEF CONST LC_P2_LON 9;
   BLOCK_DEF CONST LC_P2_PER 10;
   BLOCK_DEF CONST LC_P2_ASC 11;
   BLOCK_DEF CONST LC_P2_ORB_DT 12;
   BLOCK_DEF CONST LC_P2_ECC_DT 13;
   BLOCK_DEF CONST LC_P2_INC_DT 14;
   BLOCK_DEF CONST LC_P2_LON_DT 15;
   BLOCK_DEF CONST LC_P2_PER_DT 16;
   BLOCK_DEF CONST LC_P2_ASC_DT 17;
   BLOCK_DEF CONST LC_P2_CNT 18;
   BLOCK_DEF DBL lv_plsun_arr[3];
   BLOCK_DEF DBL lv_plgeo_arr[3];
   BLOCK_DEF INT lv_pl_ind = LC_P1_PREV_PL;
   BLOCK_DEF DBL lv_pl_mtrx[LC_P1_CNT][LC_P2_CNT];
   BLOCK_DEF DBL lv_pl_earth_year = EARTH_YEAR;
   BLOCK_DEF DBL lv_pl_jtwoktime = 1.0 / 64.0;
   # setup macro
   BLOCK_DEF FUNC INT lf_pl_init(INT plnt):
      BLOCK_USE lv_pl_ind;
      BLOCK_USE lv_pl_mtrx[];
      IF lv_pl_ind < 0:
         lv_pl_mtrx[LC_P1_SUN][LC_P2_GM] = SUN_GM;
         lv_pl_mtrx[LC_P1_SUN][LC_P2_DAY] = SUN_DAY;
         lv_pl_mtrx[LC_P1_SUN][LC_P2_FLATNESS] = SUN_FLATNESS;
         lv_pl_mtrx[LC_P1_SUN][LC_P2_A] = SUN_A;
         lv_pl_mtrx[LC_P1_SUN][LC_P2_C] = SUN_C;
         lv_pl_mtrx[LC_P1_SUN][LC_P2_YEAR] = SUN_YEAR;
         lv_pl_mtrx[LC_P1_SUN][LC_P2_ORB] = SUN_ORBIT;
         lv_pl_mtrx[LC_P1_SUN][LC_P2_ECC] = SUN_ECCENTRICITY;
         lv_pl_mtrx[LC_P1_SUN][LC_P2_INC] = SUN_INCLINATION;
         lv_pl_mtrx[LC_P1_SUN][LC_P2_LON] = SUN_LONGITUDE;
         lv_pl_mtrx[LC_P1_SUN][LC_P2_PER] = SUN_PERIAPSIS;
         lv_pl_mtrx[LC_P1_SUN][LC_P2_ASC] = SUN_ASCENDING;
         lv_pl_mtrx[LC_P1_SUN][LC_P2_ORB_DT] = SUN_ORBIT_DT;
         lv_pl_mtrx[LC_P1_SUN][LC_P2_ECC_DT] = SUN_ECCENTRICITY_DT;
         lv_pl_mtrx[LC_P1_SUN][LC_P2_INC_DT] = SUN_INCLINATION_DT;
         lv_pl_mtrx[LC_P1_SUN][LC_P2_LON_DT] = SUN_LONGITUDE_DT;
         lv_pl_mtrx[LC_P1_SUN][LC_P2_PER_DT] = SUN_PERIAPSIS_DT;
         lv_pl_mtrx[LC_P1_SUN][LC_P2_ASC_DT] = SUN_ASCENDING_DT;
         lv_pl_mtrx[LC_P1_MERCURY][LC_P2_GM] = MERCURY_GM;
         lv_pl_mtrx[LC_P1_MERCURY][LC_P2_DAY] = MERCURY_DAY;
         lv_pl_mtrx[LC_P1_MERCURY][LC_P2_FLATNESS] = MERCURY_FLATNESS;
         lv_pl_mtrx[LC_P1_MERCURY][LC_P2_A] = MERCURY_A;
         lv_pl_mtrx[LC_P1_MERCURY][LC_P2_C] = MERCURY_C;
         lv_pl_mtrx[LC_P1_MERCURY][LC_P2_YEAR] = MERCURY_YEAR;
         lv_pl_mtrx[LC_P1_MERCURY][LC_P2_ORB] = MERCURY_ORBIT;
         lv_pl_mtrx[LC_P1_MERCURY][LC_P2_ECC] = MERCURY_ECCENTRICITY;
         lv_pl_mtrx[LC_P1_MERCURY][LC_P2_INC] = MERCURY_INCLINATION;
         lv_pl_mtrx[LC_P1_MERCURY][LC_P2_LON] = MERCURY_LONGITUDE;
         lv_pl_mtrx[LC_P1_MERCURY][LC_P2_PER] = MERCURY_PERIAPSIS;
         lv_pl_mtrx[LC_P1_MERCURY][LC_P2_ASC] = MERCURY_ASCENDING;
         lv_pl_mtrx[LC_P1_MERCURY][LC_P2_ORB_DT] = MERCURY_ORBIT_DT;
         lv_pl_mtrx[LC_P1_MERCURY][LC_P2_ECC_DT] = MERCURY_ECCENTRICITY_DT;
         lv_pl_mtrx[LC_P1_MERCURY][LC_P2_INC_DT] = MERCURY_INCLINATION_DT;
         lv_pl_mtrx[LC_P1_MERCURY][LC_P2_LON_DT] = MERCURY_LONGITUDE_DT;
         lv_pl_mtrx[LC_P1_MERCURY][LC_P2_PER_DT] = MERCURY_PERIAPSIS_DT;
         lv_pl_mtrx[LC_P1_MERCURY][LC_P2_ASC_DT] = MERCURY_ASCENDING_DT;
         lv_pl_mtrx[LC_P1_VENUS][LC_P2_GM] = VENUS_GM;
         lv_pl_mtrx[LC_P1_VENUS][LC_P2_DAY] = VENUS_DAY;
         lv_pl_mtrx[LC_P1_VENUS][LC_P2_FLATNESS] = VENUS_FLATNESS;
         lv_pl_mtrx[LC_P1_VENUS][LC_P2_A] = VENUS_A;
         lv_pl_mtrx[LC_P1_VENUS][LC_P2_C] = VENUS_C;
         lv_pl_mtrx[LC_P1_VENUS][LC_P2_YEAR] = VENUS_YEAR;
         lv_pl_mtrx[LC_P1_VENUS][LC_P2_ORB] = VENUS_ORBIT;
         lv_pl_mtrx[LC_P1_VENUS][LC_P2_ECC] = VENUS_ECCENTRICITY;
         lv_pl_mtrx[LC_P1_VENUS][LC_P2_INC] = VENUS_INCLINATION;
         lv_pl_mtrx[LC_P1_VENUS][LC_P2_LON] = VENUS_LONGITUDE;
         lv_pl_mtrx[LC_P1_VENUS][LC_P2_PER] = VENUS_PERIAPSIS;
         lv_pl_mtrx[LC_P1_VENUS][LC_P2_ASC] = VENUS_ASCENDING;
         lv_pl_mtrx[LC_P1_VENUS][LC_P2_ORB_DT] = VENUS_ORBIT_DT;
         lv_pl_mtrx[LC_P1_VENUS][LC_P2_ECC_DT] = VENUS_ECCENTRICITY_DT;
         lv_pl_mtrx[LC_P1_VENUS][LC_P2_INC_DT] = VENUS_INCLINATION_DT;
         lv_pl_mtrx[LC_P1_VENUS][LC_P2_LON_DT] = VENUS_LONGITUDE_DT;
         lv_pl_mtrx[LC_P1_VENUS][LC_P2_PER_DT] = VENUS_PERIAPSIS_DT;
         lv_pl_mtrx[LC_P1_VENUS][LC_P2_ASC_DT] = VENUS_ASCENDING_DT;
         lv_pl_mtrx[LC_P1_EARTH][LC_P2_GM] = EARTH_GM;
         lv_pl_mtrx[LC_P1_EARTH][LC_P2_DAY] = EARTH_DAY;
         lv_pl_mtrx[LC_P1_EARTH][LC_P2_FLATNESS] = EARTH_FLATNESS;
         lv_pl_mtrx[LC_P1_EARTH][LC_P2_A] = EARTH_A;
         lv_pl_mtrx[LC_P1_EARTH][LC_P2_C] = EARTH_C;
         lv_pl_mtrx[LC_P1_EARTH][LC_P2_YEAR] = EARTH_YEAR;
         lv_pl_mtrx[LC_P1_EARTH][LC_P2_ORB] = EARTH_ORBIT;
         lv_pl_mtrx[LC_P1_EARTH][LC_P2_ECC] = EARTH_ECCENTRICITY;
         lv_pl_mtrx[LC_P1_EARTH][LC_P2_INC] = EARTH_INCLINATION;
         lv_pl_mtrx[LC_P1_EARTH][LC_P2_LON] = EARTH_LONGITUDE;
         lv_pl_mtrx[LC_P1_EARTH][LC_P2_PER] = EARTH_PERIAPSIS;
         lv_pl_mtrx[LC_P1_EARTH][LC_P2_ASC] = EARTH_ASCENDING;
         lv_pl_mtrx[LC_P1_EARTH][LC_P2_ORB_DT] = EARTH_ORBIT_DT;
         lv_pl_mtrx[LC_P1_EARTH][LC_P2_ECC_DT] = EARTH_ECCENTRICITY_DT;
         lv_pl_mtrx[LC_P1_EARTH][LC_P2_INC_DT] = EARTH_INCLINATION_DT;
         lv_pl_mtrx[LC_P1_EARTH][LC_P2_LON_DT] = EARTH_LONGITUDE_DT;
         lv_pl_mtrx[LC_P1_EARTH][LC_P2_PER_DT] = EARTH_PERIAPSIS_DT;
         lv_pl_mtrx[LC_P1_EARTH][LC_P2_ASC_DT] = EARTH_ASCENDING_DT;
         lv_pl_mtrx[LC_P1_MARS][LC_P2_GM] = MARS_GM;
         lv_pl_mtrx[LC_P1_MARS][LC_P2_DAY] = MARS_DAY;
         lv_pl_mtrx[LC_P1_MARS][LC_P2_FLATNESS] = MARS_FLATNESS;
         lv_pl_mtrx[LC_P1_MARS][LC_P2_A] = MARS_A;
         lv_pl_mtrx[LC_P1_MARS][LC_P2_C] = MARS_C;
         lv_pl_mtrx[LC_P1_MARS][LC_P2_YEAR] = MARS_YEAR;
         lv_pl_mtrx[LC_P1_MARS][LC_P2_ORB] = MARS_ORBIT;
         lv_pl_mtrx[LC_P1_MARS][LC_P2_ECC] = MARS_ECCENTRICITY;
         lv_pl_mtrx[LC_P1_MARS][LC_P2_INC] = MARS_INCLINATION;
         lv_pl_mtrx[LC_P1_MARS][LC_P2_LON] = MARS_LONGITUDE;
         lv_pl_mtrx[LC_P1_MARS][LC_P2_PER] = MARS_PERIAPSIS;
         lv_pl_mtrx[LC_P1_MARS][LC_P2_ASC] = MARS_ASCENDING;
         lv_pl_mtrx[LC_P1_MARS][LC_P2_ORB_DT] = MARS_ORBIT_DT;
         lv_pl_mtrx[LC_P1_MARS][LC_P2_ECC_DT] = MARS_ECCENTRICITY_DT;
         lv_pl_mtrx[LC_P1_MARS][LC_P2_INC_DT] = MARS_INCLINATION_DT;
         lv_pl_mtrx[LC_P1_MARS][LC_P2_LON_DT] = MARS_LONGITUDE_DT;
         lv_pl_mtrx[LC_P1_MARS][LC_P2_PER_DT] = MARS_PERIAPSIS_DT;
         lv_pl_mtrx[LC_P1_MARS][LC_P2_ASC_DT] = MARS_ASCENDING_DT;
         lv_pl_mtrx[LC_P1_JUPITER][LC_P2_GM] = JUPITER_GM;
         lv_pl_mtrx[LC_P1_JUPITER][LC_P2_DAY] = JUPITER_DAY;
         lv_pl_mtrx[LC_P1_JUPITER][LC_P2_FLATNESS] = JUPITER_FLATNESS;
         lv_pl_mtrx[LC_P1_JUPITER][LC_P2_A] = JUPITER_A;
         lv_pl_mtrx[LC_P1_JUPITER][LC_P2_C] = JUPITER_C;
         lv_pl_mtrx[LC_P1_JUPITER][LC_P2_YEAR] = JUPITER_YEAR;
         lv_pl_mtrx[LC_P1_JUPITER][LC_P2_ORB] = JUPITER_ORBIT;
         lv_pl_mtrx[LC_P1_JUPITER][LC_P2_ECC] = JUPITER_ECCENTRICITY;
         lv_pl_mtrx[LC_P1_JUPITER][LC_P2_INC] = JUPITER_INCLINATION;
         lv_pl_mtrx[LC_P1_JUPITER][LC_P2_LON] = JUPITER_LONGITUDE;
         lv_pl_mtrx[LC_P1_JUPITER][LC_P2_PER] = JUPITER_PERIAPSIS;
         lv_pl_mtrx[LC_P1_JUPITER][LC_P2_ASC] = JUPITER_ASCENDING;
         lv_pl_mtrx[LC_P1_JUPITER][LC_P2_ORB_DT] = JUPITER_ORBIT_DT;
         lv_pl_mtrx[LC_P1_JUPITER][LC_P2_ECC_DT] = JUPITER_ECCENTRICITY_DT;
         lv_pl_mtrx[LC_P1_JUPITER][LC_P2_INC_DT] = JUPITER_INCLINATION_DT;
         lv_pl_mtrx[LC_P1_JUPITER][LC_P2_LON_DT] = JUPITER_LONGITUDE_DT;
         lv_pl_mtrx[LC_P1_JUPITER][LC_P2_PER_DT] = JUPITER_PERIAPSIS_DT;
         lv_pl_mtrx[LC_P1_JUPITER][LC_P2_ASC_DT] = JUPITER_ASCENDING_DT;
         lv_pl_mtrx[LC_P1_SATURN][LC_P2_GM] = SATURN_GM;
         lv_pl_mtrx[LC_P1_SATURN][LC_P2_DAY] = SATURN_DAY;
         lv_pl_mtrx[LC_P1_SATURN][LC_P2_FLATNESS] = SATURN_FLATNESS;
         lv_pl_mtrx[LC_P1_SATURN][LC_P2_A] = SATURN_A;
         lv_pl_mtrx[LC_P1_SATURN][LC_P2_C] = SATURN_C;
         lv_pl_mtrx[LC_P1_SATURN][LC_P2_YEAR] = SATURN_YEAR;
         lv_pl_mtrx[LC_P1_SATURN][LC_P2_ORB] = SATURN_ORBIT;
         lv_pl_mtrx[LC_P1_SATURN][LC_P2_ECC] = SATURN_ECCENTRICITY;
         lv_pl_mtrx[LC_P1_SATURN][LC_P2_INC] = SATURN_INCLINATION;
         lv_pl_mtrx[LC_P1_SATURN][LC_P2_LON] = SATURN_LONGITUDE;
         lv_pl_mtrx[LC_P1_SATURN][LC_P2_PER] = SATURN_PERIAPSIS;
         lv_pl_mtrx[LC_P1_SATURN][LC_P2_ASC] = SATURN_ASCENDING;
         lv_pl_mtrx[LC_P1_SATURN][LC_P2_ORB_DT] = SATURN_ORBIT_DT;
         lv_pl_mtrx[LC_P1_SATURN][LC_P2_ECC_DT] = SATURN_ECCENTRICITY_DT;
         lv_pl_mtrx[LC_P1_SATURN][LC_P2_INC_DT] = SATURN_INCLINATION_DT;
         lv_pl_mtrx[LC_P1_SATURN][LC_P2_LON_DT] = SATURN_LONGITUDE_DT;
         lv_pl_mtrx[LC_P1_SATURN][LC_P2_PER_DT] = SATURN_PERIAPSIS_DT;
         lv_pl_mtrx[LC_P1_SATURN][LC_P2_ASC_DT] = SATURN_ASCENDING_DT;
         lv_pl_mtrx[LC_P1_URANUS][LC_P2_GM] = URANUS_GM;
         lv_pl_mtrx[LC_P1_URANUS][LC_P2_DAY] = URANUS_DAY;
         lv_pl_mtrx[LC_P1_URANUS][LC_P2_FLATNESS] = URANUS_FLATNESS;
         lv_pl_mtrx[LC_P1_URANUS][LC_P2_A] = URANUS_A;
         lv_pl_mtrx[LC_P1_URANUS][LC_P2_C] = URANUS_C;
         lv_pl_mtrx[LC_P1_URANUS][LC_P2_YEAR] = URANUS_YEAR;
         lv_pl_mtrx[LC_P1_URANUS][LC_P2_ORB] = URANUS_ORBIT;
         lv_pl_mtrx[LC_P1_URANUS][LC_P2_ECC] = URANUS_ECCENTRICITY;
         lv_pl_mtrx[LC_P1_URANUS][LC_P2_INC] = URANUS_INCLINATION;
         lv_pl_mtrx[LC_P1_URANUS][LC_P2_LON] = URANUS_LONGITUDE;
         lv_pl_mtrx[LC_P1_URANUS][LC_P2_PER] = URANUS_PERIAPSIS;
         lv_pl_mtrx[LC_P1_URANUS][LC_P2_ASC] = URANUS_ASCENDING;
         lv_pl_mtrx[LC_P1_URANUS][LC_P2_ORB_DT] = URANUS_ORBIT_DT;
         lv_pl_mtrx[LC_P1_URANUS][LC_P2_ECC_DT] = URANUS_ECCENTRICITY_DT;
         lv_pl_mtrx[LC_P1_URANUS][LC_P2_INC_DT] = URANUS_INCLINATION_DT;
         lv_pl_mtrx[LC_P1_URANUS][LC_P2_LON_DT] = URANUS_LONGITUDE_DT;
         lv_pl_mtrx[LC_P1_URANUS][LC_P2_PER_DT] = URANUS_PERIAPSIS_DT;
         lv_pl_mtrx[LC_P1_URANUS][LC_P2_ASC_DT] = URANUS_ASCENDING_DT;
         lv_pl_mtrx[LC_P1_NEPTUNE][LC_P2_GM] = NEPTUNE_GM;
         lv_pl_mtrx[LC_P1_NEPTUNE][LC_P2_DAY] = NEPTUNE_DAY;
         lv_pl_mtrx[LC_P1_NEPTUNE][LC_P2_FLATNESS] = NEPTUNE_FLATNESS;
         lv_pl_mtrx[LC_P1_NEPTUNE][LC_P2_A] = NEPTUNE_A;
         lv_pl_mtrx[LC_P1_NEPTUNE][LC_P2_C] = NEPTUNE_C;
         lv_pl_mtrx[LC_P1_NEPTUNE][LC_P2_YEAR] = NEPTUNE_YEAR;
         lv_pl_mtrx[LC_P1_NEPTUNE][LC_P2_ORB] = NEPTUNE_ORBIT;
         lv_pl_mtrx[LC_P1_NEPTUNE][LC_P2_ECC] = NEPTUNE_ECCENTRICITY;
         lv_pl_mtrx[LC_P1_NEPTUNE][LC_P2_INC] = NEPTUNE_INCLINATION;
         lv_pl_mtrx[LC_P1_NEPTUNE][LC_P2_LON] = NEPTUNE_LONGITUDE;
         lv_pl_mtrx[LC_P1_NEPTUNE][LC_P2_PER] = NEPTUNE_PERIAPSIS;
         lv_pl_mtrx[LC_P1_NEPTUNE][LC_P2_ASC] = NEPTUNE_ASCENDING;
         lv_pl_mtrx[LC_P1_NEPTUNE][LC_P2_ORB_DT] = NEPTUNE_ORBIT_DT;
         lv_pl_mtrx[LC_P1_NEPTUNE][LC_P2_ECC_DT] = NEPTUNE_ECCENTRICITY_DT;
         lv_pl_mtrx[LC_P1_NEPTUNE][LC_P2_INC_DT] = NEPTUNE_INCLINATION_DT;
         lv_pl_mtrx[LC_P1_NEPTUNE][LC_P2_LON_DT] = NEPTUNE_LONGITUDE_DT;
         lv_pl_mtrx[LC_P1_NEPTUNE][LC_P2_PER_DT] = NEPTUNE_PERIAPSIS_DT;
         lv_pl_mtrx[LC_P1_NEPTUNE][LC_P2_ASC_DT] = NEPTUNE_ASCENDING_DT;
         lv_pl_mtrx[LC_P1_PLUTO][LC_P2_GM] = PLUTO_GM;
         lv_pl_mtrx[LC_P1_PLUTO][LC_P2_DAY] = PLUTO_DAY;
         lv_pl_mtrx[LC_P1_PLUTO][LC_P2_FLATNESS] = PLUTO_FLATNESS;
         lv_pl_mtrx[LC_P1_PLUTO][LC_P2_A] = PLUTO_A;
         lv_pl_mtrx[LC_P1_PLUTO][LC_P2_C] = PLUTO_C;
         lv_pl_mtrx[LC_P1_PLUTO][LC_P2_YEAR] = PLUTO_YEAR;
         lv_pl_mtrx[LC_P1_PLUTO][LC_P2_ORB] = PLUTO_ORBIT;
         lv_pl_mtrx[LC_P1_PLUTO][LC_P2_ECC] = PLUTO_ECCENTRICITY;
         lv_pl_mtrx[LC_P1_PLUTO][LC_P2_INC] = PLUTO_INCLINATION;
         lv_pl_mtrx[LC_P1_PLUTO][LC_P2_LON] = PLUTO_LONGITUDE;
         lv_pl_mtrx[LC_P1_PLUTO][LC_P2_PER] = PLUTO_PERIAPSIS;
         lv_pl_mtrx[LC_P1_PLUTO][LC_P2_ASC] = PLUTO_ASCENDING;
         lv_pl_mtrx[LC_P1_PLUTO][LC_P2_ORB_DT] = PLUTO_ORBIT_DT;
         lv_pl_mtrx[LC_P1_PLUTO][LC_P2_ECC_DT] = PLUTO_ECCENTRICITY_DT;
         lv_pl_mtrx[LC_P1_PLUTO][LC_P2_INC_DT] = PLUTO_INCLINATION_DT;
         lv_pl_mtrx[LC_P1_PLUTO][LC_P2_LON_DT] = PLUTO_LONGITUDE_DT;
         lv_pl_mtrx[LC_P1_PLUTO][LC_P2_PER_DT] = PLUTO_PERIAPSIS_DT;
         lv_pl_mtrx[LC_P1_PLUTO][LC_P2_ASC_DT] = PLUTO_ASCENDING_DT;
         lv_pl_mtrx[LC_P1_CERES][LC_P2_GM] = CERES_GM;
         lv_pl_mtrx[LC_P1_CERES][LC_P2_DAY] = CERES_DAY;
         lv_pl_mtrx[LC_P1_CERES][LC_P2_FLATNESS] = CERES_FLATNESS;
         lv_pl_mtrx[LC_P1_CERES][LC_P2_A] = CERES_A;
         lv_pl_mtrx[LC_P1_CERES][LC_P2_C] = CERES_C;
         lv_pl_mtrx[LC_P1_CERES][LC_P2_YEAR] = CERES_YEAR;
         lv_pl_mtrx[LC_P1_CERES][LC_P2_ORB] = CERES_ORBIT;
         lv_pl_mtrx[LC_P1_CERES][LC_P2_ECC] = CERES_ECCENTRICITY;
         lv_pl_mtrx[LC_P1_CERES][LC_P2_INC] = CERES_INCLINATION;
         lv_pl_mtrx[LC_P1_CERES][LC_P2_LON] = CERES_LONGITUDE;
         lv_pl_mtrx[LC_P1_CERES][LC_P2_PER] = CERES_PERIAPSIS;
         lv_pl_mtrx[LC_P1_CERES][LC_P2_ASC] = CERES_ASCENDING;
         lv_pl_mtrx[LC_P1_CERES][LC_P2_ORB_DT] = CERES_ORBIT_DT;
         lv_pl_mtrx[LC_P1_CERES][LC_P2_ECC_DT] = CERES_ECCENTRICITY_DT;
         lv_pl_mtrx[LC_P1_CERES][LC_P2_INC_DT] = CERES_INCLINATION_DT;
         lv_pl_mtrx[LC_P1_CERES][LC_P2_LON_DT] = CERES_LONGITUDE_DT;
         lv_pl_mtrx[LC_P1_CERES][LC_P2_PER_DT] = CERES_PERIAPSIS_DT;
         lv_pl_mtrx[LC_P1_CERES][LC_P2_ASC_DT] = CERES_ASCENDING_DT;
         lv_pl_mtrx[LC_P1_ERIS][LC_P2_GM] = ERIS_GM;
         lv_pl_mtrx[LC_P1_ERIS][LC_P2_DAY] = ERIS_DAY;
         lv_pl_mtrx[LC_P1_ERIS][LC_P2_FLATNESS] = ERIS_FLATNESS;
         lv_pl_mtrx[LC_P1_ERIS][LC_P2_A] = ERIS_A;
         lv_pl_mtrx[LC_P1_ERIS][LC_P2_C] = ERIS_C;
         lv_pl_mtrx[LC_P1_ERIS][LC_P2_YEAR] = ERIS_YEAR;
         lv_pl_mtrx[LC_P1_ERIS][LC_P2_ORB] = ERIS_ORBIT;
         lv_pl_mtrx[LC_P1_ERIS][LC_P2_ECC] = ERIS_ECCENTRICITY;
         lv_pl_mtrx[LC_P1_ERIS][LC_P2_INC] = ERIS_INCLINATION;
         lv_pl_mtrx[LC_P1_ERIS][LC_P2_LON] = ERIS_LONGITUDE;
         lv_pl_mtrx[LC_P1_ERIS][LC_P2_PER] = ERIS_PERIAPSIS;
         lv_pl_mtrx[LC_P1_ERIS][LC_P2_ASC] = ERIS_ASCENDING;
         lv_pl_mtrx[LC_P1_ERIS][LC_P2_ORB_DT] = ERIS_ORBIT_DT;
         lv_pl_mtrx[LC_P1_ERIS][LC_P2_ECC_DT] = ERIS_ECCENTRICITY_DT;
         lv_pl_mtrx[LC_P1_ERIS][LC_P2_INC_DT] = ERIS_INCLINATION_DT;
         lv_pl_mtrx[LC_P1_ERIS][LC_P2_LON_DT] = ERIS_LONGITUDE_DT;
         lv_pl_mtrx[LC_P1_ERIS][LC_P2_PER_DT] = ERIS_PERIAPSIS_DT;
         lv_pl_mtrx[LC_P1_ERIS][LC_P2_ASC_DT] = ERIS_ASCENDING_DT;
         lv_pl_mtrx[LC_P1_MAKEMAKE][LC_P2_GM] = MAKEMAKE_GM;
         lv_pl_mtrx[LC_P1_MAKEMAKE][LC_P2_DAY] = MAKEMAKE_DAY;
         lv_pl_mtrx[LC_P1_MAKEMAKE][LC_P2_FLATNESS] = MAKEMAKE_FLATNESS;
         lv_pl_mtrx[LC_P1_MAKEMAKE][LC_P2_A] = MAKEMAKE_A;
         lv_pl_mtrx[LC_P1_MAKEMAKE][LC_P2_C] = MAKEMAKE_C;
         lv_pl_mtrx[LC_P1_MAKEMAKE][LC_P2_YEAR] = MAKEMAKE_YEAR;
         lv_pl_mtrx[LC_P1_MAKEMAKE][LC_P2_ORB] = MAKEMAKE_ORBIT;
         lv_pl_mtrx[LC_P1_MAKEMAKE][LC_P2_ECC] = MAKEMAKE_ECCENTRICITY;
         lv_pl_mtrx[LC_P1_MAKEMAKE][LC_P2_INC] = MAKEMAKE_INCLINATION;
         lv_pl_mtrx[LC_P1_MAKEMAKE][LC_P2_LON] = MAKEMAKE_LONGITUDE;
         lv_pl_mtrx[LC_P1_MAKEMAKE][LC_P2_PER] = MAKEMAKE_PERIAPSIS;
         lv_pl_mtrx[LC_P1_MAKEMAKE][LC_P2_ASC] = MAKEMAKE_ASCENDING;
         lv_pl_mtrx[LC_P1_MAKEMAKE][LC_P2_ORB_DT] = MAKEMAKE_ORBIT_DT;
         lv_pl_mtrx[LC_P1_MAKEMAKE][LC_P2_ECC_DT] = MAKEMAKE_ECCENTRICITY_DT;
         lv_pl_mtrx[LC_P1_MAKEMAKE][LC_P2_INC_DT] = MAKEMAKE_INCLINATION_DT;
         lv_pl_mtrx[LC_P1_MAKEMAKE][LC_P2_LON_DT] = MAKEMAKE_LONGITUDE_DT;
         lv_pl_mtrx[LC_P1_MAKEMAKE][LC_P2_PER_DT] = MAKEMAKE_PERIAPSIS_DT;
         lv_pl_mtrx[LC_P1_MAKEMAKE][LC_P2_ASC_DT] = MAKEMAKE_ASCENDING_DT;
         lv_pl_mtrx[LC_P1_HAUMEA][LC_P2_GM] = HAUMEA_GM;
         lv_pl_mtrx[LC_P1_HAUMEA][LC_P2_DAY] = HAUMEA_DAY;
         lv_pl_mtrx[LC_P1_HAUMEA][LC_P2_FLATNESS] = HAUMEA_FLATNESS;
         lv_pl_mtrx[LC_P1_HAUMEA][LC_P2_A] = HAUMEA_A;
         lv_pl_mtrx[LC_P1_HAUMEA][LC_P2_C] = HAUMEA_C;
         lv_pl_mtrx[LC_P1_HAUMEA][LC_P2_YEAR] = HAUMEA_YEAR;
         lv_pl_mtrx[LC_P1_HAUMEA][LC_P2_ORB] = HAUMEA_ORBIT;
         lv_pl_mtrx[LC_P1_HAUMEA][LC_P2_ECC] = HAUMEA_ECCENTRICITY;
         lv_pl_mtrx[LC_P1_HAUMEA][LC_P2_INC] = HAUMEA_INCLINATION;
         lv_pl_mtrx[LC_P1_HAUMEA][LC_P2_LON] = HAUMEA_LONGITUDE;
         lv_pl_mtrx[LC_P1_HAUMEA][LC_P2_PER] = HAUMEA_PERIAPSIS;
         lv_pl_mtrx[LC_P1_HAUMEA][LC_P2_ASC] = HAUMEA_ASCENDING;
         lv_pl_mtrx[LC_P1_HAUMEA][LC_P2_ORB_DT] = HAUMEA_ORBIT_DT;
         lv_pl_mtrx[LC_P1_HAUMEA][LC_P2_ECC_DT] = HAUMEA_ECCENTRICITY_DT;
         lv_pl_mtrx[LC_P1_HAUMEA][LC_P2_INC_DT] = HAUMEA_INCLINATION_DT;
         lv_pl_mtrx[LC_P1_HAUMEA][LC_P2_LON_DT] = HAUMEA_LONGITUDE_DT;
         lv_pl_mtrx[LC_P1_HAUMEA][LC_P2_PER_DT] = HAUMEA_PERIAPSIS_DT;
         lv_pl_mtrx[LC_P1_HAUMEA][LC_P2_ASC_DT] = HAUMEA_ASCENDING_DT;
         IF 0 < lv_pl_jtwoktime AND lv_pl_jtwoktime < 1.0 / 32.0:
            CALL plsettime(Kw.uet2j2k(Kw.timee()));
         IF_END
         lv_pl_earth_year = EARTH_YEAR;
      IF_END
      IF LC_P1_SUN <= plnt AND plnt < LC_P1_CNT:
         lv_pl_ind = plnt;
      ELSIF plnt == LC_P1_PREV_PL:
         IF lv_pl_ind < 0:
            lv_pl_ind = LC_P1_EARTH;
         IF_END
      ELSE:
         lv_pl_ind = LC_P1_PREV_PL;
      IF_END
      RETURN lv_pl_ind;
   FUNC_END
   BLOCK_DEF FUNC DBL lf_val(INT pa_ind, INT pb_bb, INT pb_bbd):
      INT pl_ind;
      DBL retvalu;
      IF pa_ind < LC_P1_PREV_PL OR LC_P1_CNT <= pa_ind:
         retvalu = LC_P1_ERR;
      ELSE:
         pl_ind = pl(pa_ind);
         retvalu = (lv_pl_mtrx[pl_ind][pb_bb] + lv_pl_jtwoktime
                  * lv_pl_mtrx[pl_ind][pb_bbd]);
      IF_END
      RETURN retvalu;
   FUNC_END
   FUNC INT pl(INT plnt):
      # set selected planet to PLNT
      RETURN lf_pl_init(plnt);
   FUNC_END
   FUNC DBL plsettime(DBL jtwokdate):
      # set planet-time to JTWOKDATE
      lv_pl_jtwoktime = jtwokdate * Kw.JDAY;
      RETURN lv_pl_jtwoktime;
   FUNC_END
   FUNC DBL pl_gm(INT plnt):
      # gm of planet PLNT
      BLOCK_USE lv_pl_mtrx[];
      BLOCK_USE lv_pl_ind;
      DBL retvalu;
      CALL lf_pl_init(plnt);
      IF LC_P1_SUN <= plnt AND plnt < LC_P1_CNT:
         retvalu = lv_pl_mtrx[plnt][LC_P2_GM];
      ELSIF plnt == LC_P1_PREV_PL:
         retvalu = lv_pl_mtrx[lv_pl_ind][LC_P2_GM];
      ELSE:
         retvalu = LC_P1_ERR;
      IF_END
      RETURN retvalu;
   FUNC_END
   FUNC DBL plgm(NUL):
      # gm of previous selected planet
      BLOCK_USE lv_pl_ind;
      RETURN pl_gm(LC_P1_PREV_PL);
   FUNC_END
   FUNC DBL pl_year(INT plnt):
      # year of planet PLNT
      BLOCK_USE lv_pl_mtrx[];
      BLOCK_USE lv_pl_ind;
      DBL retvalu;
      CALL lf_pl_init(plnt);
      IF LC_P1_SUN <= plnt AND plnt < LC_P1_CNT:
         retvalu = lv_pl_mtrx[plnt][LC_P2_YEAR];
      ELSIF plnt == LC_P1_PREV_PL:
         retvalu = lv_pl_mtrx[lv_pl_ind][LC_P2_YEAR];
      ELSE:
         retvalu = LC_P1_ERR;
      IF_END
      RETURN retvalu;
   FUNC_END
   FUNC DBL plyear(NUL):
      # year of previous selected planet
      BLOCK_USE lv_pl_ind;
      RETURN pl_year(LC_P1_PREV_PL);
   FUNC_END
   FUNC DBL pl_day(INT plnt):
      # day of planet PLNT
      BLOCK_USE lv_pl_mtrx[];
      BLOCK_USE lv_pl_ind;
      DBL retvalu;
      CALL lf_pl_init(plnt);
      IF LC_P1_SUN <= plnt AND plnt < LC_P1_CNT:
         retvalu = lv_pl_mtrx[plnt][LC_P2_DAY];
      ELSIF plnt == LC_P1_PREV_PL:
         retvalu = lv_pl_mtrx[lv_pl_ind][LC_P2_DAY];
      ELSE:
         retvalu = LC_P1_ERR;
      IF_END
      RETURN retvalu;
   FUNC_END
   FUNC DBL plday(NUL):
      # day of previous selected planet
      BLOCK_USE lv_pl_ind;
      RETURN pl_day(LC_P1_PREV_PL);
   FUNC_END
   FUNC DBL pl_flatness(INT plnt):
      # flatness of planet PLNT
      BLOCK_USE lv_pl_mtrx[];
      BLOCK_USE lv_pl_ind;
      DBL retvalu;
      CALL lf_pl_init(plnt);
      IF LC_P1_SUN <= plnt AND plnt < LC_P1_CNT:
         retvalu = lv_pl_mtrx[plnt][LC_P2_FLATNESS];
      ELSIF plnt == LC_P1_PREV_PL:
         retvalu = lv_pl_mtrx[lv_pl_ind][LC_P2_FLATNESS];
      ELSE:
         retvalu = LC_P1_ERR;
      IF_END
      RETURN retvalu;
   FUNC_END
   FUNC DBL plflatness(NUL):
      # flatness of previous selected planet
      BLOCK_USE lv_pl_ind;
      RETURN pl_flatness(LC_P1_PREV_PL);
   FUNC_END
   FUNC DBL pl_a(INT plnt):
      # a of planet PLNT
      BLOCK_USE lv_pl_mtrx[];
      BLOCK_USE lv_pl_ind;
      DBL retvalu;
      CALL lf_pl_init(plnt);
      IF LC_P1_SUN <= plnt AND plnt < LC_P1_CNT:
         retvalu = lv_pl_mtrx[plnt][LC_P2_A];
      ELSIF plnt == LC_P1_PREV_PL:
         retvalu = lv_pl_mtrx[lv_pl_ind][LC_P2_A];
      ELSE:
         retvalu = LC_P1_ERR;
      IF_END
      RETURN retvalu;
   FUNC_END
   FUNC DBL pla(NUL):
      # a of previous selected planet
      BLOCK_USE lv_pl_ind;
      RETURN pl_a(LC_P1_PREV_PL);
   FUNC_END
   FUNC DBL pl_c(INT plnt):
      # c of planet PLNT
      BLOCK_USE lv_pl_mtrx[];
      BLOCK_USE lv_pl_ind;
      DBL retvalu;
      CALL lf_pl_init(plnt);
      IF LC_P1_SUN <= plnt AND plnt < LC_P1_CNT:
         retvalu = lv_pl_mtrx[plnt][LC_P2_C];
      ELSIF plnt == LC_P1_PREV_PL:
         retvalu = lv_pl_mtrx[lv_pl_ind][LC_P2_C];
      ELSE:
         retvalu = LC_P1_ERR;
      IF_END
      RETURN retvalu;
   FUNC_END
   FUNC DBL plc(NUL):
      # c of previous selected planet
      BLOCK_USE lv_pl_ind;
      RETURN pl_c(LC_P1_PREV_PL);
   FUNC_END
   FUNC DBL pl_orbit(INT plnt):
      # compute orbital orbit of planet PLNT
      RETURN lf_val(plnt, LC_P2_ORB, LC_P2_ORB_DT);
   FUNC_END
   FUNC DBL plorbit(NUL):
      # orbit of previous selected planet
      BLOCK_USE lv_pl_ind;
      RETURN pl_orbit(LC_P1_PREV_PL);
   FUNC_END
   FUNC DBL pl_eccentricity(INT plnt):
      # compute orbital eccentricity of planet PLNT
      RETURN lf_val(plnt, LC_P2_ECC, LC_P2_ECC_DT);
   FUNC_END
   FUNC DBL pleccentricity(NUL):
      # eccentricity of previous selected planet
      BLOCK_USE lv_pl_ind;
      RETURN pl_eccentricity(LC_P1_PREV_PL);
   FUNC_END
   FUNC DBL pl_inclination(INT plnt):
      # compute orbital inclination of planet PLNT
      RETURN lf_val(plnt, LC_P2_INC, LC_P2_INC_DT);
   FUNC_END
   FUNC DBL plinclination(NUL):
      # inclination of previous selected planet
      BLOCK_USE lv_pl_ind;
      RETURN pl_inclination(LC_P1_PREV_PL);
   FUNC_END
   FUNC DBL pl_longitude(INT plnt):
      # compute orbital longitude of planet PLNT
      RETURN lf_val(plnt, LC_P2_LON, LC_P2_LON_DT);
   FUNC_END
   FUNC DBL pllongitude(NUL):
      # longitude of previous selected planet
      BLOCK_USE lv_pl_ind;
      RETURN pl_longitude(LC_P1_PREV_PL);
   FUNC_END
   FUNC DBL pl_periapsis(INT plnt):
      # compute orbital periapsis of planet PLNT
      RETURN lf_val(plnt, LC_P2_PER, LC_P2_PER_DT);
   FUNC_END
   FUNC DBL plperiapsis(NUL):
      # periapsis of previous selected planet
      BLOCK_USE lv_pl_ind;
      RETURN pl_periapsis(LC_P1_PREV_PL);
   FUNC_END
   FUNC DBL pl_ascending(INT plnt):
      # compute orbital ascending of planet PLNT
      RETURN lf_val(plnt, LC_P2_ASC, LC_P2_ASC_DT);
   FUNC_END
   FUNC DBL plascending(NUL):
      # ascending of previous selected planet
      BLOCK_USE lv_pl_ind;
      RETURN pl_ascending(LC_P1_PREV_PL);
   FUNC_END
   FUNC DBL pl_mass(INT plnt):
      # Mass(kg) of planet PLNT
      DBL retvalu;
      IF plnt < LC_P1_PREV_PL OR LC_P1_CNT <= plnt:
         retvalu = LC_P1_ERR;
      ELSE:
         retvalu = pl_gm(plnt) / Kw.GRAVITATION;
      IF_END
      RETURN retvalu;
   FUNC_END
   FUNC DBL plmass(NUL):
      # mass of previous selected planet
      BLOCK_USE lv_pl_ind;
      RETURN pl_mass(LC_P1_PREV_PL);
   FUNC_END
   FUNC DBL pl_b(INT plnt):
      # polar radius(m) of planet PLNT
      DBL retvalu;
      IF plnt < LC_P1_PREV_PL OR LC_P1_CNT <= plnt:
         retvalu = LC_P1_ERR;
      ELSE:
         retvalu = (1.0 - pl_flatness(plnt)) * pl_a(plnt);
      IF_END
      RETURN retvalu;
   FUNC_END
   FUNC DBL plb(NUL):
      # b of previous selected planet
      BLOCK_USE lv_pl_ind;
      RETURN pl_b(LC_P1_PREV_PL);
   FUNC_END
   FUNC DBL pl_radius(INT plnt):
      # average radius(m) of planet PLNT
      DBL retvalu;
      IF plnt < LC_P1_PREV_PL OR LC_P1_CNT <= plnt:
         retvalu = LC_P1_ERR;
      ELSE:
         retvalu = (pl_a(plnt) + pl_b(plnt) + pl_c(plnt)) / 3.0;
      IF_END
      RETURN retvalu;
   FUNC_END
   FUNC DBL plradius(NUL):
      # radius of previous selected planet
      BLOCK_USE lv_pl_ind;
      RETURN pl_radius(LC_P1_PREV_PL);
   FUNC_END
   FUNC DBL pl_gravity(INT plnt):
      # mean surface gravity(m/s**2) of planet PLNT
      #   GM / RADIUS**2
      DBL retvalu;
      IF plnt < LC_P1_PREV_PL OR LC_P1_CNT <= plnt:
         retvalu = LC_P1_ERR;
      ELSE:
         retvalu = pl_gm(plnt) / Kw.square(pl_radius(plnt));
      IF_END
      RETURN retvalu;
   FUNC_END
   FUNC DBL plgravity(NUL):
      # gravity of previous selected planet
      BLOCK_USE lv_pl_ind;
      RETURN pl_gravity(LC_P1_PREV_PL);
   FUNC_END
   FUNC DBL pl_meananomaly(INT plnt):
      # mean anomaly of planet PLNT
      DBL retvalu;
      IF plnt < LC_P1_PREV_PL OR LC_P1_CNT <= plnt:
         retvalu = LC_P1_ERR;
      ELSE:
         retvalu = Kw.fmodu(pl_longitude(plnt) - pl_periapsis(plnt), Kw.TAU);
      IF_END
      RETURN retvalu;
   FUNC_END
   FUNC DBL plmeananomaly(NUL):
      # meananomaly of previous selected planet
      BLOCK_USE lv_pl_ind;
      RETURN pl_meananomaly(LC_P1_PREV_PL);
   FUNC_END
   FUNC DBL pl_escape(INT plnt):
      # mean escape velocity(m/s) of planet PLNT
      #    SQRT(2.0 * GM / RADIUS);
      DBL retvalu;
      IF plnt < LC_P1_PREV_PL OR LC_P1_CNT <= plnt:
         retvalu = LC_P1_ERR;
      ELSE:
         retvalu = SQRT(2.0 * pl_gm(plnt) / pl_radius(plnt));
      IF_END
      RETURN retvalu;
   FUNC_END
   FUNC DBL plescape(NUL):
      # escape of previous selected planet
      BLOCK_USE lv_pl_ind;
      RETURN pl_escape(LC_P1_PREV_PL);
   FUNC_END
   FUNC DBL pl_synodic(INT plnt):
      # synodic period(s) of planet PLNT
      #    PL_YEAR * EARTH_YEAR / (PL_YEAR - EARTH_YEAR)
      BLOCK_USE lv_pl_earth_year;
      DBL yra;
      DBL retvalu;
      IF plnt < LC_P1_PREV_PL OR LC_P1_CNT <= plnt:
         retvalu = LC_P1_ERR;
      ELSE:
         yra = pl_year(plnt);
         retvalu = Kw.divi(yra * lv_pl_earth_year, ABS(yra
                  - lv_pl_earth_year), 0.0);
      IF_END
      RETURN retvalu;
   FUNC_END
   FUNC DBL plsynodic(NUL):
      # synodic of previous selected planet
      BLOCK_USE lv_pl_ind;
      RETURN pl_synodic(LC_P1_PREV_PL);
   FUNC_END
   FUNC DBL pl_volume(INT plnt):
      # volume(m**3) of planet PLNT
      DBL retvalu;
      IF plnt < LC_P1_PREV_PL OR LC_P1_CNT <= plnt:
         retvalu = LC_P1_ERR;
      ELSE:
         retvalu = 2.0 * Kw.TAU * pl_a(plnt) * pl_b(plnt) * pl_c(plnt) / 3.0;
      IF_END
      RETURN retvalu;
   FUNC_END
   FUNC DBL plvolume(NUL):
      # volume of previous selected planet
      BLOCK_USE lv_pl_ind;
      RETURN pl_volume(LC_P1_PREV_PL);
   FUNC_END
   FUNC DBL pl_surface(INT plnt):
      # surface area(m**2) of planet PLNT
      DBL retvalu;
      IF plnt < LC_P1_PREV_PL OR LC_P1_CNT <= plnt:
         retvalu = LC_P1_ERR;
      ELSE:
         retvalu = Kw.ellipsoid_surface(pl_a(plnt), pl_b(plnt), pl_c(plnt));
      IF_END
      RETURN retvalu;
   FUNC_END
   FUNC DBL plsurface(NUL):
      # surface of previous selected planet
      BLOCK_USE lv_pl_ind;
      RETURN pl_surface(LC_P1_PREV_PL);
   FUNC_END
   FUNC DBL pl_density(INT plnt):
      # density(kg/m**3) of planet PLNT
      DBL retvalu;
      IF plnt < LC_P1_PREV_PL OR LC_P1_CNT <= plnt:
         retvalu = LC_P1_ERR;
      ELSE:
         retvalu = pl_mass(plnt) / pl_volume(plnt);
      IF_END
      RETURN retvalu;
   FUNC_END
   FUNC DBL pldensity(NUL):
      # density of previous selected planet
      BLOCK_USE lv_pl_ind;
      RETURN pl_density(LC_P1_PREV_PL);
   FUNC_END
   FUNC DBL pl_argument(INT plnt):
      # argument of perihelion of planet PLNT
      DBL retvalu;
      IF plnt < LC_P1_PREV_PL OR LC_P1_CNT <= plnt:
         retvalu = LC_P1_ERR;
      ELSE:
         retvalu = pl_periapsis(plnt) - pl_ascending(plnt);
      IF_END
      RETURN retvalu;
   FUNC_END
   FUNC DBL plargument(NUL):
      # argument of previous selected planet
      BLOCK_USE lv_pl_ind;
      RETURN pl_argument(LC_P1_PREV_PL);
   FUNC_END
   FUNC DBL pl_margot(INT plnt):
      # Margot parameter for given planet
      DBL retvalu;
      IF plnt < LC_P1_PREV_PL OR LC_P1_CNT <= plnt:
         retvalu = LC_P1_ERR;
      ELSE:
         retvalu = margot(pl_mass(plnt), pl_orbit(plnt));
      IF_END
      RETURN retvalu;
   FUNC_END
   FUNC DBL plmargot(NUL):
      # margot of previous selected planet
      BLOCK_USE lv_pl_ind;
      RETURN pl_margot(LC_P1_PREV_PL);
   FUNC_END
   FUNC DBL pl_sternlevison(INT plnt):
      # Stern-Levison parameter for given planet
      DBL retvalu;
      IF plnt < LC_P1_PREV_PL OR LC_P1_CNT <= plnt:
         retvalu = LC_P1_ERR;
      ELSE:
         retvalu = sternlevison(pl_mass(plnt), pl_orbit(plnt));
      IF_END
      RETURN retvalu;
   FUNC_END
   FUNC DBL plsternlevison(NUL):
      # sternlevison of previous selected planet
      BLOCK_USE lv_pl_ind;
      RETURN pl_sternlevison(LC_P1_PREV_PL);
   FUNC_END
   FUNC DBL pl_perihelion(INT plnt):
      # perihelion distance(m) of planet PLNT
      DBL retvalu;
      IF plnt < LC_P1_PREV_PL OR LC_P1_CNT <= plnt:
         retvalu = LC_P1_ERR;
      ELSE:
         retvalu = pl_orbit(plnt) * (1.0 - pl_eccentricity(plnt));
      IF_END
      RETURN retvalu;
   FUNC_END
   FUNC DBL plperihelion(NUL):
      # perihelion of previous selected planet
      BLOCK_USE lv_pl_ind;
      RETURN pl_perihelion(LC_P1_PREV_PL);
   FUNC_END
   FUNC DBL pl_aphelion(INT plnt):
      # aphelion distance m of planet PLNT
      DBL retvalu;
      IF plnt < LC_P1_PREV_PL OR LC_P1_CNT <= plnt:
         retvalu = LC_P1_ERR;
      ELSE:
         retvalu = pl_orbit(plnt) * (1.0 + pl_eccentricity(plnt));
      IF_END
      RETURN retvalu;
   FUNC_END
   FUNC DBL plaphelion(NUL):
      # aphelion of previous selected planet
      BLOCK_USE lv_pl_ind;
      RETURN pl_aphelion(LC_P1_PREV_PL);
   FUNC_END
   FUNC DBL eccentric_anomaly(DBL mean_ano_rad
            , DBL eccen):
      # solve 0 = EA - ECCEN * sin(EA) - MEAN_ANO_RAD for EA
      #   using Newton-Raphson method
      DBL mrad;
      DBL xrad;
      INT nrvx_ii;
      DBL nrvx_yy;
      DBL nrvx_xx;
      DBL nrvx_dy;
      DBL nrvx_xp;
      mrad = Kw.fmodu(mean_ano_rad, Kw.tur2rad(1.0));
      xrad = mrad + eccen * SIN(mrad);
      # init guess
      # return XX where
      #    nrvx_xx - eccen * SIN(nrvx_xx) - mean_ano_rad(XX) == 0
      # BEG Newton-Raphson Calculation
      nrvx_xx = xrad;
      FOR nrvx_ii FROM 0 TO 20:
         nrvx_xp = nrvx_xx;
         nrvx_dy = 1.0 - eccen * COS(nrvx_xx);
         IF Kw.iszero(nrvx_dy):
            FOR_EXIT;
         IF_END
         nrvx_yy = nrvx_xx - eccen * SIN(nrvx_xx) - mean_ano_rad;
         nrvx_xx -= nrvx_yy / nrvx_dy;
         IF Kw.iseq(nrvx_xp, nrvx_xx):
            FOR_EXIT;
         IF_END
      FOR_END
      # END Newton-Raphson Calculation
      RETURN nrvx_xx;
   FUNC_END
   FUNC DBL pl_eccentricanomaly(INT plnt):
      # eccentric anomaly of planet PLNT
      DBL retvalu;
      IF plnt < LC_P1_PREV_PL OR LC_P1_CNT <= plnt:
         retvalu = LC_P1_ERR;
      ELSE:
         retvalu = eccentric_anomaly(pl_meananomaly(plnt)
                  , pl_eccentricity(plnt));
      IF_END
      RETURN retvalu;
   FUNC_END
   FUNC DBL pleccentricanomaly(NUL):
      # eccentricanomaly of previous selected planet
      BLOCK_USE lv_pl_ind;
      RETURN pl_eccentricanomaly(LC_P1_PREV_PL);
   FUNC_END
   FUNC DBL pl_heliocentric(INT plnt
            , DBL jtwok):
      # compute heliocentric(and geocentric) coordinates
      # for planet PLNT at given J2K time.
      # use with functions plgeo, plhelio
      BLOCK_USE lv_plsun_arr[];
      BLOCK_USE lv_plgeo_arr[];
      DBL orb_m;
      DBL eccen;
      DBL inc_rad;
      DBL lon_rad;
      DBL per_rad;
      DBL asc_rad;
      DBL arg_rad;
      DBL mean_anomaly_rad;
      DBL eano_rad;
      DBL dxx_m;
      DBL dyy_m;
      DBL ci;
      DBL co;
      DBL cw;
      DBL si;
      DBL so;
      DBL sw;
      DBL swci;
      DBL cwci;
      DBL obl_rad;
      DBL retvalu;
      IF lf_pl_init(plnt) < 0.0:
         retvalu = LC_P1_ERR;
      ELSE:
         CALL plsettime(jtwok);
         orb_m = plorbit();
         eccen = pleccentricity();
         inc_rad = plinclination();
         lon_rad = pllongitude();
         per_rad = plperiapsis();
         asc_rad = plascending();
         # step 2: compute argument of perihelion, mean anomaly
         arg_rad = per_rad - asc_rad;
         mean_anomaly_rad = Kw.fmod(lon_rad - per_rad, Kw.tur2rad(1.0));
         # step 3: calculate eccentric anomaly
         eano_rad = eccentric_anomaly(mean_anomaly_rad, eccen);
         # step 4: compute planets heliocentric coordinates
         dxx_m = orb_m * (COS(eano_rad) - eccen);
         dyy_m = orb_m * Kw.topyh1(eccen) * SIN(eano_rad);
         # step 5: compute J2000 eliptic plane, x axis = equinox
         cw = COS(arg_rad);
         sw = SIN(arg_rad);
         co = COS(asc_rad);
         so = SIN(asc_rad);
         ci = COS(inc_rad);
         si = SIN(inc_rad);
         swci = sw * ci;
         cwci = cw * ci;
         lv_plsun_arr[0] = (dxx_m * (cw * co - swci * so) - dyy_m * (sw
                  * co + cwci * so));
         lv_plsun_arr[1] = (dxx_m * (cw * so + swci * co) - dyy_m * (sw
                  * so - cwci * co));
         lv_plsun_arr[2] = (dxx_m * (sw * si) + dyy_m * (cw * si));
         # step 6 -- convert to ICRF frame or J2000 frame
         obl_rad = earthobliquity(jtwok);
         co = COS(obl_rad);
         so = SIN(obl_rad);
         lv_plgeo_arr[0] = lv_plsun_arr[0];
         lv_plgeo_arr[1] = co * lv_plsun_arr[1] - so * lv_plsun_arr[2];
         lv_plgeo_arr[2] = so * lv_plsun_arr[1] + co * lv_plsun_arr[2];
         retvalu = Kw.hypot3(lv_plsun_arr[0], lv_plsun_arr[1]
                  , lv_plsun_arr[2]);
      IF_END
      RETURN retvalu;
   FUNC_END
   FUNC DBL plhelio(INT indd):
      # heliocentric distance, in m, computed by
      #    previous call to pl_heliocentric
      BLOCK_USE lv_plsun_arr[];
      DBL retvalu;
      IF 0 <= indd AND indd < 3:
         retvalu = lv_plsun_arr[indd];
      ELSE:
         retvalu = 0.0;
      IF_END
      RETURN retvalu;
   FUNC_END
   FUNC DBL plgeo(INT indd):
      # geocentric distance, in m, computed by
      #    previous call to pl_heliocentric
      BLOCK_USE lv_plgeo_arr[];
      DBL retvalu;
      IF 0 <= indd AND indd < 3:
         retvalu = lv_plgeo_arr[indd];
      ELSE:
         retvalu = 0.0;
      IF_END
      RETURN retvalu;
   FUNC_END
   FUNC INT pl_name(INT plnt):
      # print name of planet PLNT
      INT plnt_ind;
      plnt_ind = lf_pl_init(plnt);
      IF plnt_ind == LC_P1_SUN:
         PRINTSTR("SUN      ");
      ELSIF plnt_ind == LC_P1_MERCURY:
         PRINTSTR("MERCURY  ");
      ELSIF plnt_ind == LC_P1_VENUS:
         PRINTSTR("VENUS    ");
      ELSIF plnt_ind == LC_P1_EARTH:
         PRINTSTR("EARTH    ");
      ELSIF plnt_ind == LC_P1_MARS:
         PRINTSTR("MARS     ");
      ELSIF plnt_ind == LC_P1_JUPITER:
         PRINTSTR("JUPITER  ");
      ELSIF plnt_ind == LC_P1_SATURN:
         PRINTSTR("SATURN   ");
      ELSIF plnt_ind == LC_P1_URANUS:
         PRINTSTR("URANUS   ");
      ELSIF plnt_ind == LC_P1_NEPTUNE:
         PRINTSTR("NEPTUNE  ");
      ELSIF plnt_ind == LC_P1_PLUTO:
         PRINTSTR("PLUTO    ");
      ELSIF plnt_ind == LC_P1_CERES:
         PRINTSTR("CERES    ");
      ELSIF plnt_ind == LC_P1_ERIS:
         PRINTSTR("ERIS     ");
      ELSIF plnt_ind == LC_P1_MAKEMAKE:
         PRINTSTR("MAKEMAKE ");
      ELSIF plnt_ind == LC_P1_HAUMEA:
         PRINTSTR("HAUMEA   ");
      ELSE:
         PRINTSTR("UNKNOWN");
         PRINTVAL(plnt_ind);
      IF_END
      RETURN plnt_ind;
   FUNC_END
   FUNC DBL plname(NUL):
      # name of previous selected planet
      BLOCK_USE lv_pl_ind;
      RETURN pl_name(LC_P1_PREV_PL);
   FUNC_END
   FUNC DBL earthradius(DBL lat_deg):
      # earth radius, in meters, at geoditic latitiude lat_deg
      RETURN pl_aradius(LC_P1_EARTH, lat_deg);
   FUNC_END
BLOCK_END
FUNC DBL earthtropicalyear(DBL jtwokdate):
   # tropical year length(in days) for given JTWOK date
   DBL jy;
   jy = jtwokdate * Kw.DAY / Kw.JYEAR;
   RETURN ((((2.64E-16) * jy - 7.29E-14) * jy - 6.15359E-8) * jy
            + 365.2421896698);
FUNC_END
FUNC DBL earthdistance(DBL lata_deg
         , DBL lona_deg
         , DBL latb_deg
         , DBL lonb_deg):
   # compute great circle distance on earth
   # between two sets of latitude and longitude
   RETURN EARTH_A * Kw.great_circle_distance(Kw.deg2rad(lata_deg)
            , Kw.deg2rad(lona_deg), Kw.deg2rad(latb_deg)
            , Kw.deg2rad(lonb_deg));
FUNC_END
FUNC DBL plaradius(DBL lat_deg):
   # radius, in meters, at geoditic latitiude lat_deg
   DBL calat;
   DBL sblat;
   DBL aa;
   DBL bb;
   aa = Kw.square(pla());
   bb = Kw.square(plb());
   calat = Kw.square(pla() * Kw.cosd(lat_deg));
   sblat = Kw.square(plb() * Kw.sind(lat_deg));
   RETURN SQRT((aa * calat + bb * sblat) / (calat + sblat));
FUNC_END
FUNC DBL pl_aradius(INT plnt
         , DBL lat_deg):
   # radius, in meters, at geoditic latitiude lat_deg
   CALL pl(plnt);
   RETURN plaradius(lat_deg);
FUNC_END
FUNC DBL earthobliquity(DBL jtwok):
   # earths obliquity at J2000 day JTWOK
   DBL tmill;
   DBL ob_arcsec;
   tmill = jtwok * Kw.DAY / (1.0E+4 * Kw.JYEAR);
   # Based on J. Laskar "Astronomy and Astrophysics", Vol 157, p68(1986),
   # "New Formulas for the Precession, Valid Over 10000 years"
   ob_arcsec = (((((((((((2.45) * tmill + 5.79) * tmill + 27.8) * tmill
            + 7.12) * tmill - 39.05) * tmill - 249.67) * tmill - 51.38)
            * tmill + 1999.25) * tmill - 1.55) * tmill - 4680.93) * tmill
            + 84381.448);
   RETURN Kw.sec2rad(ob_arcsec);
FUNC_END
FUNC DBL earthprecession(DBL jtwok):
   # earths precession at J2000 day JTWOK
   DBL tmill;
   DBL ob_arcsec;
   tmill = jtwok * Kw.DAY / (1.0E+4 * Kw.JYEAR);
   # Based on J. Laskar "Astronomy and Astrophysics", Vol 157, p68(1986),
   # "New Formulas for the Precession, Valid Over 10000 years"
   ob_arcsec = ((((((((((-8.66) * tmill - 47.59) * tmill + 24.24) * tmill
            + 130.95) * tmill + 174.51) * tmill - 180.55) * tmill
            - 2353.16) * tmill + 77.32) * tmill + 11119.71) * tmill
            + 502909.66) * tmill + 0.0;
   RETURN Kw.sec2rad(ob_arcsec);
FUNC_END
# See Wikipedia::Theoretical_gravity and Wikipedia::Clairauts_theorem
CONST EARTH_GRAVITYA 9.7803253359 * Kw.MPSS;
#LT-2
CONST EARTH_GRAVITYB 9.8321849378 * Kw.MPSS;
#LT-2
FUNC DBL earthgravity(DBL lat_deg):
   # earth gravity, in m/s**2, at geoditic latitiude LAT_DEG
   # using Somigliana formula with WGS-84 parameters
   # See Wikipedia::Normal_gravity_formula
   DBL slatsq;
   DBL obltsq;
   DBL kk;
   slatsq = Kw.square(Kw.sind(lat_deg));
   # following two variables are actually constants given
   #    earth flatness, gravitya, and gravityb
   # oblateness is calculated as
   #    oblateness = sqrt(flatness * (2 - flatness))
   obltsq = EARTH_FLATNESS * (2.0 - EARTH_FLATNESS);
   kk = (((1.0 - EARTH_FLATNESS) * EARTH_GRAVITYB) - EARTH_GRAVITYA);
   RETURN (EARTH_GRAVITYA + kk * slatsq) / SQRT(1.0 - obltsq * slatsq);
FUNC_END
FUNC DBL earthgravity_height(DBL lat_deg
         , DBL height_m):
   # earth gravity, in m/s**2, at geoditic latititude LAT_DEG
   # at an elevation of HEIGHT_M meters
   RETURN (earthgravity(lat_deg) - height_m * 2.0 * EARTH_GM
            / Kw.cube(EARTH_A));
FUNC_END
BLOCK:
   # ISA atmosphere
   BLOCK_DEF CONST LC_ISA_CNT 12;
   BLOCK_DEF CONST LC_ISA_TEMP 0;
   BLOCK_DEF CONST LC_ISA_PRES 1;
   BLOCK_DEF CONST LC_ISA_DENS 2;
   BLOCK_DEF CONST LC_ISA_HEIGHT 3;
   BLOCK_DEF CONST LC_ISA_KEY_CNT 4;
   BLOCK_DEF DBL lv_isa_mtrx[LC_ISA_CNT][LC_ISA_KEY_CNT];
   BLOCK_DEF DBL lv_isa_magic = 0.0;
   BLOCK_DEF FUNC DBL lf_isa_calc(DBL height_m, INT state_x):
      BLOCK_USE lv_isa_mtrx[];
      BLOCK_USE lv_isa_magic;
      INT h_ind;
      DBL air_k_per_m;
      DBL expon;
      DBL this_temp;
      DBL delta_h;
      DBL retvalu;
      DBL tdiff;
      DBL hdiff;
      DBL lapse_kpm;
      IF NOT Kw.ismagic(lv_isa_magic):
         # from Wikipedia::Barometric_formula
         lv_isa_mtrx[0][LC_ISA_HEIGHT] = 0.0;
         lv_isa_mtrx[0][LC_ISA_TEMP] = 288.15;
         lv_isa_mtrx[0][LC_ISA_PRES] = Kw.ATM;
         lv_isa_mtrx[0][LC_ISA_DENS] = 1.2250;
         lv_isa_mtrx[1][LC_ISA_HEIGHT] = 1.1E+4;
         lv_isa_mtrx[1][LC_ISA_TEMP] = 216.65;
         lv_isa_mtrx[1][LC_ISA_PRES] = 22632.10;
         lv_isa_mtrx[1][LC_ISA_DENS] = 0.36391;
         lv_isa_mtrx[2][LC_ISA_HEIGHT] = 2.0E+4;
         lv_isa_mtrx[2][LC_ISA_TEMP] = 216.65;
         lv_isa_mtrx[2][LC_ISA_PRES] = 5474.89;
         lv_isa_mtrx[2][LC_ISA_DENS] = 0.08803;
         lv_isa_mtrx[3][LC_ISA_HEIGHT] = 3.2E+4;
         lv_isa_mtrx[3][LC_ISA_TEMP] = 228.65;
         lv_isa_mtrx[3][LC_ISA_PRES] = 868.02;
         lv_isa_mtrx[3][LC_ISA_DENS] = 0.01322;
         lv_isa_mtrx[4][LC_ISA_HEIGHT] = 4.7E+4;
         lv_isa_mtrx[4][LC_ISA_TEMP] = 270.65;
         lv_isa_mtrx[4][LC_ISA_PRES] = 110.91;
         lv_isa_mtrx[4][LC_ISA_DENS] = 0.00143;
         lv_isa_mtrx[5][LC_ISA_HEIGHT] = 5.1E+4;
         lv_isa_mtrx[5][LC_ISA_TEMP] = 270.65;
         lv_isa_mtrx[5][LC_ISA_PRES] = 66.94;
         lv_isa_mtrx[5][LC_ISA_DENS] = 8.6E-4;
         lv_isa_mtrx[6][LC_ISA_HEIGHT] = 7.1E+4;
         lv_isa_mtrx[6][LC_ISA_TEMP] = 214.65;
         lv_isa_mtrx[6][LC_ISA_PRES] = 3.96;
         lv_isa_mtrx[6][LC_ISA_DENS] = 6.4E-5;
         lv_isa_mtrx[7][LC_ISA_HEIGHT] = 84852;
         lv_isa_mtrx[7][LC_ISA_TEMP] = 186.87;
         lv_isa_mtrx[7][LC_ISA_PRES] = 0.3734;
         lv_isa_mtrx[7][LC_ISA_DENS] = 7.0E-6;
         lv_isa_mtrx[8][LC_ISA_HEIGHT] = 89700;
         lv_isa_mtrx[8][LC_ISA_TEMP] = 186.87;
         lv_isa_mtrx[8][LC_ISA_PRES] = 0.15;
         lv_isa_mtrx[8][LC_ISA_DENS] = 3.0E-6;
         lv_isa_mtrx[9][LC_ISA_HEIGHT] = 100400;
         lv_isa_mtrx[9][LC_ISA_TEMP] = 199.55;
         lv_isa_mtrx[9][LC_ISA_PRES] = 0.02;
         lv_isa_mtrx[9][LC_ISA_DENS] = 5.0E-7;
         lv_isa_mtrx[10][LC_ISA_HEIGHT] = 105000;
         lv_isa_mtrx[10][LC_ISA_TEMP] = 217.65;
         lv_isa_mtrx[10][LC_ISA_PRES] = 0.01;
         lv_isa_mtrx[10][LC_ISA_DENS] = 2.0E-7;
         lv_isa_mtrx[11][LC_ISA_HEIGHT] = 110000;
         lv_isa_mtrx[11][LC_ISA_TEMP] = 263.95;
         lv_isa_mtrx[11][LC_ISA_PRES] = 0.01;
         lv_isa_mtrx[11][LC_ISA_DENS] = 1.0E-7;
         #                  m;      K;       Pa; kg/m**3
         lv_isa_magic = Kw.magicset();
      IF_END
      h_ind = LC_ISA_CNT - 1;
      WHILE height_m < lv_isa_mtrx[h_ind][LC_ISA_HEIGHT] AND 0 < h_ind:
         h_ind -= 1;
      WHILE_END
      delta_h = height_m - lv_isa_mtrx[h_ind][LC_ISA_HEIGHT];
      IF h_ind < LC_ISA_CNT - 1:
         tdiff = lv_isa_mtrx[h_ind + 1][LC_ISA_TEMP]
                  - lv_isa_mtrx[h_ind][LC_ISA_TEMP];
         hdiff = lv_isa_mtrx[h_ind + 1][LC_ISA_HEIGHT]
                  - lv_isa_mtrx[h_ind][LC_ISA_HEIGHT];
         lapse_kpm = tdiff / hdiff;
      ELSE:
         lapse_kpm = 0.003;
      IF_END
      this_temp = lv_isa_mtrx[h_ind][LC_ISA_TEMP] + lapse_kpm * delta_h;
      IF state_x == LC_ISA_TEMP:
         retvalu = this_temp;
      ELSE:
         air_k_per_m = Kw.GRAVITY * Kwelements.AIR_MASS / Kw.GAS;
         IF Kw.iszero(lapse_kpm):
            retvalu = EXP(-air_k_per_m * delta_h
                     / lv_isa_mtrx[h_ind][LC_ISA_TEMP]);
         ELSE:
            expon = air_k_per_m / lapse_kpm;
            IF state_x == LC_ISA_DENS:
               expon += 1;
            IF_END
            retvalu = POW(lv_isa_mtrx[h_ind][LC_ISA_TEMP] / this_temp
                     , expon);
         IF_END
         IF state_x == LC_ISA_PRES:
            retvalu *= lv_isa_mtrx[h_ind][LC_ISA_PRES];
         ELSE:
            retvalu *= lv_isa_mtrx[h_ind][LC_ISA_DENS];
         IF_END
      IF_END
      RETURN retvalu;
   FUNC_END
   FUNC DBL isa_temp(DBL height_m):
      # temperature(in K) at a height HEIGHT_M
      # of International Standard Atmosphere
      RETURN lf_isa_calc(height_m, LC_ISA_TEMP);
   FUNC_END
   FUNC DBL isa_pres(DBL height_m):
      # pressure(in pascals) at a height HEIGHT_M
      # of International Standard Atmosphere
      RETURN lf_isa_calc(height_m, LC_ISA_PRES);
   FUNC_END
   FUNC DBL isa_dens(DBL height_m):
      # density(in kg/m**3) at a height HEIGHT_M
      # of International Standard Atmosphere
      RETURN lf_isa_calc(height_m, LC_ISA_DENS);
   FUNC_END
BLOCK_END
# ISA atmosphere
# Thinly veiled wrappers around several ellipsoid_.* functions
# with args in familiar degrees
FUNC DBL vin_distance(DBL lata_deg
         , DBL lona_deg
         , DBL latb_deg
         , DBL lonb_deg
         , WRITEONLY DBL ret_bearings_arr_p[]):
   # distance(meters) from(LATA, LONA) to(LATB, LONB)
   # RET_BEARINGS_ARR_P[0] = bearing from A to B(degrees)
   # RET_BEARINGS_ARR_P[1] = bearing from B to A(degrees)
   DBL retvalu;
   DBL rad_arr[2];
   retvalu = EARTH_A * Kw.ellipsoid_distance(EARTH_FLATNESS
            , Kw.deg2rad(lata_deg), Kw.deg2rad(lona_deg)
            , Kw.deg2rad(latb_deg), Kw.deg2rad(lonb_deg), rad_arr[]);
   ret_bearings_arr_p[0] = Kw.rad2deg(rad_arr[0]);
   ret_bearings_arr_p[1] = Kw.rad2deg(rad_arr[1]);
   RETURN retvalu;
FUNC_END
FUNC DBL vin_destination(DBL lata_deg
         , DBL lona_deg
         , DBL heading_deg
         , DBL dist_m
         , WRITEONLY DBL ret_dest_arr_p[]):
   # bearing(degree CCW from North)
   # from(LATA, LONA) to point(LATB, LONB)
   # RET_DEST_ARR_P[0] = Latitude of destination(degrees)
   # RET_DEST_ARR_P[1] = Longitude of destination(degrees)
   DBL fltnss;
   DBL retvalu;
   DBL rad_arr[2];
   fltnss = EARTH_FLATNESS;
   retvalu = Kw.ellipsoid_destination(fltnss, Kw.deg2rad(lata_deg)
            , Kw.deg2rad(lona_deg), Kw.deg2rad(heading_deg), dist_m
            / EARTH_A, rad_arr[]);
   ret_dest_arr_p[0] = Kw.rad2deg(rad_arr[0]);
   ret_dest_arr_p[1] = Kw.rad2deg(rad_arr[1]);
   RETURN Kw.rad2deg(retvalu);
FUNC_END
BLOCK:
   # PREM
   BLOCK_DEF CONST LC_PREM_DENS 0;
   BLOCK_DEF CONST LC_PREM_MASS 1;
   BLOCK_DEF CONST LC_PREM_XHEIGHT 0;
   BLOCK_DEF CONST LC_PREM_XCOEA 1;
   BLOCK_DEF CONST LC_PREM_XCOEB 2;
   BLOCK_DEF CONST LC_PREM_XCOEC 3;
   BLOCK_DEF CONST LC_PREM_XMASSD 4;
   BLOCK_DEF DBL lv_prem_mtrx[12][6];
   BLOCK_DEF DBL lv_prem_magic = 0.0;
   BLOCK_DEF FUNC DBL lf_prem(DBL height_m, INT state_x):
      # density at of height meters, HEIGHT_M
      # from center of earth
      DBL coec;
      DBL coeb;
      DBL coea;
      DBL hght_i;
      DBL hght_j;
      DBL retvalu;
      DBL mass_a;
      DBL mass_b;
      DBL mass_i;
      DBL mass_ip;
      INT ii;
      IF NOT Kw.ismagic(lv_prem_magic):
         lv_prem_mtrx[0][LC_PREM_XHEIGHT] = 0.0;
         lv_prem_mtrx[0][LC_PREM_XCOEA] = 0.0;
         lv_prem_mtrx[0][LC_PREM_XCOEB] = 0.0;
         lv_prem_mtrx[0][LC_PREM_XCOEC] = 0.0;
         lv_prem_mtrx[1][LC_PREM_XHEIGHT] = 1.2215E+6;
         lv_prem_mtrx[1][LC_PREM_XCOEA] = 1.3088E+4;
         lv_prem_mtrx[1][LC_PREM_XCOEB] = 1.911E-8;
         lv_prem_mtrx[1][LC_PREM_XCOEC] = -2.1773E-10;
         lv_prem_mtrx[2][LC_PREM_XHEIGHT] = 3.480E+6;
         lv_prem_mtrx[2][LC_PREM_XCOEA] = 1.2346E+4;
         lv_prem_mtrx[2][LC_PREM_XCOEB] = 1.3976E-4;
         lv_prem_mtrx[2][LC_PREM_XCOEC] = -2.4123E-10;
         lv_prem_mtrx[3][LC_PREM_XHEIGHT] = 3.630E+6;
         lv_prem_mtrx[3][LC_PREM_XCOEA] = 7.3067E+3;
         lv_prem_mtrx[3][LC_PREM_XCOEB] = -5.0007E-4;
         lv_prem_mtrx[3][LC_PREM_XCOEC] = 0.0;
         lv_prem_mtrx[4][LC_PREM_XHEIGHT] = 5.701E+6;
         lv_prem_mtrx[4][LC_PREM_XCOEA] = 6.7823E+3;
         lv_prem_mtrx[4][LC_PREM_XCOEB] = -2.4441E-4;
         lv_prem_mtrx[4][LC_PREM_XCOEC] = -3.0922E-11;
         lv_prem_mtrx[5][LC_PREM_XHEIGHT] = 5.771E+6;
         lv_prem_mtrx[5][LC_PREM_XCOEA] = 5.3197E+3;
         lv_prem_mtrx[5][LC_PREM_XCOEB] = -2.3286E-4;
         lv_prem_mtrx[5][LC_PREM_XCOEC] = 0.0;
         lv_prem_mtrx[6][LC_PREM_XHEIGHT] = 5.971E+6;
         lv_prem_mtrx[6][LC_PREM_XCOEA] = 1.1249E+4;
         lv_prem_mtrx[6][LC_PREM_XCOEB] = -1.2603E-3;
         lv_prem_mtrx[6][LC_PREM_XCOEC] = 0.0;
         lv_prem_mtrx[7][LC_PREM_XHEIGHT] = 6.151E+6;
         lv_prem_mtrx[7][LC_PREM_XCOEA] = 7.1083E+3;
         lv_prem_mtrx[7][LC_PREM_XCOEB] = -5.9706E-4;
         lv_prem_mtrx[7][LC_PREM_XCOEC] = 0.0;
         lv_prem_mtrx[8][LC_PREM_XHEIGHT] = 6.3466E+6;
         lv_prem_mtrx[8][LC_PREM_XCOEA] = 2.691E+3;
         lv_prem_mtrx[8][LC_PREM_XCOEB] = 1.0869E-4;
         lv_prem_mtrx[8][LC_PREM_XCOEC] = 0.0;
         lv_prem_mtrx[9][LC_PREM_XHEIGHT] = 6.356E+6;
         lv_prem_mtrx[9][LC_PREM_XCOEA] = 2.9E+3;
         lv_prem_mtrx[9][LC_PREM_XCOEB] = 0.0;
         lv_prem_mtrx[9][LC_PREM_XCOEC] = 0.0;
         lv_prem_mtrx[10][LC_PREM_XHEIGHT] = 6.368E+6;
         lv_prem_mtrx[10][LC_PREM_XCOEA] = 2.6E+3;
         lv_prem_mtrx[10][LC_PREM_XCOEB] = 0.0;
         lv_prem_mtrx[10][LC_PREM_XCOEC] = 0.0;
         lv_prem_mtrx[11][LC_PREM_XHEIGHT] = 6.371E+6;
         lv_prem_mtrx[11][LC_PREM_XCOEA] = 1.02E+3;
         lv_prem_mtrx[11][LC_PREM_XCOEB] = 0.0;
         lv_prem_mtrx[11][LC_PREM_XCOEC] = 0.0;
         # Init mass difference
         lv_prem_mtrx[0][LC_PREM_XMASSD] = 0.0;
         mass_i = 0.0;
         FOR ii FROM 1 TO 11:
            hght_i = lv_prem_mtrx[ii - 1][LC_PREM_XHEIGHT];
            mass_b = 2.0 * Kw.TAU * hght_i * hght_i * hght_i
                     * ((lv_prem_mtrx[ii][LC_PREM_XCOEC] / 5.0 * hght_i
                     + lv_prem_mtrx[ii][LC_PREM_XCOEB] / 4.0) * hght_i
                     + lv_prem_mtrx[ii][LC_PREM_XCOEA] / 3.0);
            hght_j = lv_prem_mtrx[ii][LC_PREM_XHEIGHT];
            mass_a = 2.0 * Kw.TAU * hght_j * hght_j * hght_j
                     * ((lv_prem_mtrx[ii][LC_PREM_XCOEC] / 5.0 * hght_j
                     + lv_prem_mtrx[ii][LC_PREM_XCOEB] / 4.0) * hght_j
                     + lv_prem_mtrx[ii][LC_PREM_XCOEA] / 3.0);
            mass_ip = mass_i;
            mass_i += (mass_a - mass_b);
            lv_prem_mtrx[ii][LC_PREM_XMASSD] = mass_ip - mass_b;
         FOR_END
         lv_prem_magic = Kw.magicset();
      IF_END
      IF height_m <= 0.0:
         retvalu = 0.0;
      ELSIF EARTH_RADIUS < height_m:
         IF state_x == 0:
            retvalu = 0.0;
         ELSE:
            retvalu = EARTH_MASS;
         IF_END
      ELSE:
         ii = 0;
         WHILE lv_prem_mtrx[ii][LC_PREM_XHEIGHT] < height_m:
            ii += 1;
         WHILE_END
         coea = lv_prem_mtrx[ii][LC_PREM_XCOEA];
         coeb = lv_prem_mtrx[ii][LC_PREM_XCOEB];
         coec = lv_prem_mtrx[ii][LC_PREM_XCOEC];
         IF state_x == 0:
            retvalu = (coec * height_m + coeb) * height_m + coea;
         ELSIF state_x == 1:
            hght_i = lv_prem_mtrx[ii][LC_PREM_XHEIGHT];
            coec /= 5.0;
            coeb /= 4.0;
            coea /= 3.0;
            mass_a = 2.0 * Kw.TAU * height_m * height_m * height_m * ((coec
                     * height_m + coeb) * height_m + coea);
            retvalu = mass_a + lv_prem_mtrx[ii][LC_PREM_XMASSD];
         IF_END
      IF_END
      RETURN retvalu;
   FUNC_END
   FUNC DBL prem_density(DBL height_m):
      # Density(kg/m**3) of earth at a HEIGHT_M m from center
      RETURN lf_prem(height_m, LC_PREM_DENS);
   FUNC_END
   FUNC DBL prem_mass(DBL height_m):
      # Mass(kg) of a sphere, radius HEIGHT_M m,
      # from center of earth
      RETURN lf_prem(height_m, LC_PREM_MASS);
   FUNC_END
   FUNC DBL prem_g(DBL height_m):
      # Acceleration due to gravity(m/s**2) at a
      # distance HEIGHT_M m from center of earth
      DBL retvalu;
      IF height_m <= 0.0:
         retvalu = 0.0;
      ELSE:
         retvalu = Kw.GRAVITATION * prem_mass(height_m) / (height_m
                  * height_m);
      IF_END
      RETURN retvalu;
   FUNC_END
BLOCK_END
